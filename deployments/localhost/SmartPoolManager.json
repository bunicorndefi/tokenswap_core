{
  "address": "0x4CD95BBf3FcD61278E2e1b96De952166229dfE5E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmountsOut",
          "type": "uint256[]"
        }
      ],
      "name": "exitPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exitFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pAiAfterExitFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "actualAmountsOut",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPoolAmountIn",
          "type": "uint256"
        }
      ],
      "name": "exitswapExternAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exitFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "exitswapPoolAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exitFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "maxAmountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "joinPool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "actualAmountsIn",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPoolAmountOut",
          "type": "uint256"
        }
      ],
      "name": "joinswapExternAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IConfigurableRightsPool",
          "name": "self",
          "type": "IConfigurableRightsPool"
        },
        {
          "internalType": "contract IBPool",
          "name": "bPool",
          "type": "IBPool"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountIn",
          "type": "uint256"
        }
      ],
      "name": "joinswapPoolAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x72dbd26d6260dc2e85d2685d1af7ba49e0583db422bfa6532609ec35b66ec798",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "3671916",
    "logsBloom": "0x
    "blockHash": "0xe28897cd132f8a8d511440bdf8c6f1a28ff9a6a10130507517e219cdefb55575",
    "transactionHash": "0x72dbd26d6260dc2e85d2685d1af7ba49e0583db422bfa6532609ec35b66ec798",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "3671916",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "44256da70cc812bee6154882727baa12",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"exitPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exitFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pAiAfterExitFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"actualAmountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolAmountIn\",\"type\":\"uint256\"}],\"name\":\"exitswapExternAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exitFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"exitswapPoolAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exitFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"}],\"name\":\"joinPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"actualAmountsIn\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolAmountOut\",\"type\":\"uint256\"}],\"name\":\"joinswapExternAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IConfigurableRightsPool\",\"name\":\"self\",\"type\":\"IConfigurableRightsPool\"},{\"internalType\":\"contract IBPool\",\"name\":\"bPool\",\"type\":\"IBPool\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"joinswapPoolAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Buni Labs\",\"kind\":\"dev\",\"methods\":{\"applyAddToken(IConfigurableRightsPool,IBPool,uint256,SmartPoolManager.NewTokenParams storage)\":{\"params\":{\"addTokenTimeLockInBlocks\":\"-  Wait time between committing and applying a new token\",\"bPool\":\"- Core BPool the CRP is wrapping\",\"newToken\":\"- NewTokenParams struct used to hold the token data (in CRP storage)\",\"self\":\"- ConfigurableRightsPool instance calling the library\"}},\"commitAddToken(IBPool,address,uint256,uint256,SmartPoolManager.NewTokenParams storage)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"balance\":\"- how much to be added\",\"denormalizedWeight\":\"- the desired token weight\",\"newToken\":\"- NewTokenParams struct used to hold the token data (in CRP storage)\",\"token\":\"- the token to be added\"}},\"exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"minAmountsOut\":\"- minimum amount of asset tokens to receive\",\"poolAmountIn\":\"- amount of pool tokens to redeem\",\"self\":\"- ConfigurableRightsPool instance calling the library\"},\"returns\":{\"actualAmountsOut\":\"- calculated amounts of each token to pull\",\"exitFee\":\"- calculated exit fee\",\"pAiAfterExitFee\":\"- final amount in (after accounting for exit fee)\"}},\"exitswapExternAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"maxPoolAmountIn\":\"- maximum pool tokens to be redeemed\",\"self\":\"- ConfigurableRightsPool instance calling the library\",\"tokenAmountOut\":\"- amount of underlying asset tokens to receive\",\"tokenOut\":\"- which token the caller wants to receive\"},\"returns\":{\"exitFee\":\"- calculated exit fee\",\"poolAmountIn\":\"- amount of pool tokens redeemed\"}},\"exitswapPoolAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"minAmountOut\":\"- minimum asset tokens to receive\",\"poolAmountIn\":\"- amount of pool tokens to redeem\",\"self\":\"- ConfigurableRightsPool instance calling the library\",\"tokenOut\":\"- which token the caller wants to receive\"},\"returns\":{\"exitFee\":\"- calculated exit fee\",\"tokenAmountOut\":\"- amount of asset tokens returned\"}},\"joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[])\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"maxAmountsIn\":\"- Max amount of asset tokens to spend\",\"poolAmountOut\":\"- number of pool tokens to receive\",\"self\":\"- ConfigurableRightsPool instance calling the library\"},\"returns\":{\"actualAmountsIn\":\"- calculated values of the tokens to pull in\"}},\"joinswapExternAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"minPoolAmountOut\":\"- minimum of pool tokens to receive\",\"self\":\"- ConfigurableRightsPool instance calling the library\",\"tokenAmountIn\":\"- amount of deposit\",\"tokenIn\":\"- which token we're transferring in\"},\"returns\":{\"poolAmountOut\":\"- amount of pool tokens minted and transferred\"}},\"joinswapPoolAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"maxAmountIn\":\"- Maximum asset tokens that can be pulled to pay for the pool tokens\",\"poolAmountOut\":\"- amount of pool tokens to be received\",\"self\":\"- ConfigurableRightsPool instance calling the library\",\"tokenIn\":\"- which token we're transferring in (system calculates amount required)\"},\"returns\":{\"tokenAmountIn\":\"- amount of asset tokens transferred in to purchase the pool tokens\"}},\"pokeWeights(IBPool,SmartPoolManager.GradualUpdateParams storage)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"gradualUpdate\":\"- gradual update parameters from the CRP\"}},\"removeToken(IConfigurableRightsPool,IBPool,address)\":{\"details\":\"Logic in the CRP controls when ths can be called. There are two related permissions:      AddRemoveTokens - which allows removing down to the underlying BPool limit of two      RemoveAllTokens - which allows completely draining the pool by removing all tokens                        This can result in a non-viable pool with 0 or 1 tokens (by design),                        meaning all swapping or binding operations would fail in this state\",\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"self\":\"- ConfigurableRightsPool instance calling the library\",\"token\":\"- token to remove\"}},\"updateWeight(IConfigurableRightsPool,IBPool,address,uint256)\":{\"details\":\"Refactored to library to make CRPFactory deployable\",\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"newWeight\":\"- new weight of the token\",\"self\":\"- ConfigurableRightsPool instance calling the library\",\"token\":\"- token to be reweighted\"}},\"updateWeightsGradually(IBPool,SmartPoolManager.GradualUpdateParams storage,uint256[],uint256,uint256,uint256)\":{\"params\":{\"bPool\":\"- Core BPool the CRP is wrapping\",\"endBlock\":\"- when weights will be at their final values\",\"minimumWeightChangeBlockPeriod\":\"- needed to validate the block period\",\"newWeights\":\"- final weights we want to get to\",\"startBlock\":\"- when weights should start to change\"}},\"verifyTokenCompliance(address)\":{\"details\":\"Will revert if invalid\",\"params\":{\"token\":\"- The prospective token to verify\"}},\"verifyTokenCompliance(address[])\":{\"details\":\"Will revert if invalid - overloaded to save space in the main contract\",\"params\":{\"tokens\":\"- The prospective tokens to verify\"}}},\"title\":\"Factor out the weight updates\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"applyAddToken(IConfigurableRightsPool,IBPool,uint256,SmartPoolManager.NewTokenParams storage)\":{\"notice\":\"Add the token previously committed (in commitAddToken) to the pool\"},\"commitAddToken(IBPool,address,uint256,uint256,SmartPoolManager.NewTokenParams storage)\":{\"notice\":\"Schedule (commit) a token to be added; must call applyAddToken after a fixed         number of blocks to actually add the token\"},\"exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])\":{\"notice\":\"Exit a pool - redeem pool tokens for underlying assets\"},\"exitswapExternAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"notice\":\"Exit a pool - redeem pool tokens for a specific amount of underlying assets         Asset must be present in the pool\"},\"exitswapPoolAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"notice\":\"Exit a pool - redeem a specific number of pool tokens for an underlying asset         Asset must be present in the pool, and will incur an EXIT_FEE (if set to non-zero)\"},\"joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[])\":{\"notice\":\"Join a pool\"},\"joinswapExternAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"notice\":\"Join by swapping a fixed amount of an external token in (must be present in the pool)         System calculates the pool token amount\"},\"joinswapPoolAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)\":{\"notice\":\"Join by swapping an external token in (must be present in the pool)         To receive an exact amount of pool tokens out. System calculates the deposit amount\"},\"pokeWeights(IBPool,SmartPoolManager.GradualUpdateParams storage)\":{\"notice\":\"External function called to make the contract update weights according to plan\"},\"removeToken(IConfigurableRightsPool,IBPool,address)\":{\"notice\":\"Remove a token from the pool\"},\"updateWeight(IConfigurableRightsPool,IBPool,address,uint256)\":{\"notice\":\"Update the weight of an existing token\"},\"updateWeightsGradually(IBPool,SmartPoolManager.GradualUpdateParams storage,uint256[],uint256,uint256,uint256)\":{\"notice\":\"Update weights in a predetermined way, between startBlock and endBlock,         through external cals to pokeWeights\"},\"verifyTokenCompliance(address)\":{\"notice\":\"Non ERC20-conforming tokens are problematic; don't allow them in pools\"},\"verifyTokenCompliance(address[])\":{\"notice\":\"Non ERC20-conforming tokens are problematic; don't allow them in pools\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/SmartPoolManager.sol\":\"SmartPoolManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IBPool {\\n    function rebind(address token, uint balance, uint denorm) external;\\n    function setSwapFee(uint swapFee) external;\\n    function setPublicSwap(bool publicSwap) external;\\n    function bind(address token, uint balance, uint denorm) external;\\n    function unbind(address token) external;\\n    function gulp(address token) external;\\n    function isBound(address token) external view returns(bool);\\n    function getBalance(address token) external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n    function getSwapFee() external view returns (uint);\\n    function isPublicSwap() external view returns (bool);\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n    // solhint-disable-next-line func-name-mixedcase\\n    function EXIT_FEE() external view returns (uint);\\n \\n    function calcPoolOutGivenSingleIn(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint tokenAmountIn,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint poolAmountOut);\\n\\n    function calcSingleInGivenPoolOut(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint poolAmountOut,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint tokenAmountIn);\\n\\n    function calcSingleOutGivenPoolIn(\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint poolAmountIn,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint tokenAmountOut);\\n\\n    function calcPoolInGivenSingleOut(\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint tokenAmountOut,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint poolAmountIn);\\n\\n    function getCurrentTokens()\\n        external view\\n        returns (address[] memory tokens);\\n}\\n\\ninterface IBFactory {\\n    function newBPool() external returns (IBPool);\\n    function setBLabs(address b) external;\\n    function collect(IBPool pool) external;\\n    function isBPool(address b) external view returns (bool);\\n    function getKLabs() external view returns (address);\\n}\\n\",\"keccak256\":\"0xfaee647b2f1e162e356bf32bcf624a1604a06aaf7fb22d3fea4288a900fa296d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n    function burnPoolShareFromLib(uint amount) external;\\n    function totalSupply() external view returns (uint);\\n    function getController() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa1a798c05839da9029729e92454c5da729cec5bbbbf13f3950e3aab59d678c16\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x37d7904de6fabb6ab50b063cc6623997d5f7ff8e0322d0b4ba651c1c00fceed9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BuniConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Buni Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary BuniConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = BONE / 10**6;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 2;\\n    uint public constant MAX_ASSET_LIMIT = 8;\\n    uint public constant MAX_UINT = uint(-1);\\n}\\n\",\"keccak256\":\"0x42607058118671667cb337e5381e06cae3d601c17b8b502d8a098bfc207c4529\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BuniSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n\\n// Imports\\n\\nimport \\\"./BuniConstants.sol\\\";\\n\\n/**\\n * @author Buni Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary BuniSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (BuniConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / BuniConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0){\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * BuniConstants.BONE;\\n        require(c0 / dividend == BuniConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        }\\n        else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28c34942509b641885d066ec59037b9d641465f1b6a11e21035c5e2c2406702f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Buni Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(IERC20 token, address spender, uint amount) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if(currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if(currentAllowance != 0) {\\n            return token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1ed81da0697a43b7cee41af99645de6ed80d13db57e32ca513b1f3aa16751476\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\";\\nimport \\\"../utils/BuniSafeMath.sol\\\";\\nimport \\\"../utils/SafeApprove.sol\\\";\\n\\n\\n/**\\n * @author Buni Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    // Type declarations\\n\\n    struct NewTokenParams {\\n        address addr;\\n        bool isCommitted;\\n        uint commitBlock;\\n        uint denorm;\\n        uint balance;\\n    }\\n\\n    // For blockwise, automated weight updates\\n    // Move weights linearly from startWeights to endWeights,\\n    // between startBlock and endBlock\\n    struct GradualUpdateParams {\\n        uint startBlock;\\n        uint endBlock;\\n        uint[] startWeights;\\n        uint[] endWeights;\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - token to be reweighted\\n     * @param newWeight - new weight of the token\\n    */\\n    function updateWeight(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address token,\\n        uint newWeight\\n    )\\n        external\\n    {\\n        require(newWeight >= BuniConstants.MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(newWeight <= BuniConstants.MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n\\n        uint currentWeight = bPool.getDenormalizedWeight(token);\\n        // Save gas; return immediately on NOOP\\n        if (currentWeight == newWeight) {\\n             return;\\n        }\\n\\n        uint currentBalance = bPool.getBalance(token);\\n        uint totalSupply = self.totalSupply();\\n        uint totalWeight = bPool.getTotalDenormalizedWeight();\\n        uint poolShares;\\n        uint deltaBalance;\\n        uint deltaWeight;\\n        uint newBalance;\\n\\n        if (newWeight < currentWeight) {\\n            // This means the controller will withdraw tokens to keep price\\n            // So they need to redeem PCTokens\\n            deltaWeight = BuniSafeMath.bsub(currentWeight, newWeight);\\n\\n            // poolShares = totalSupply * (deltaWeight / totalWeight)\\n            poolShares = BuniSafeMath.bmul(totalSupply,\\n                                               BuniSafeMath.bdiv(deltaWeight, totalWeight));\\n\\n            // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n            deltaBalance = BuniSafeMath.bmul(currentBalance,\\n                                                 BuniSafeMath.bdiv(deltaWeight, currentWeight));\\n\\n            // New balance cannot be lower than MIN_BALANCE\\n            newBalance = BuniSafeMath.bsub(currentBalance, deltaBalance);\\n\\n            require(newBalance >= BuniConstants.MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n            // First get the tokens from this contract (Pool Controller) to msg.sender\\n            bPool.rebind(token, newBalance, newWeight);\\n\\n            // Now with the tokens this contract can send them to msg.sender\\n            bool xfer = IERC20(token).transfer(msg.sender, deltaBalance);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            self.pullPoolShareFromLib(msg.sender, poolShares);\\n            self.burnPoolShareFromLib(poolShares);\\n        }\\n        else {\\n            // This means the controller will deposit tokens to keep the price.\\n            // They will be minted and given PCTokens\\n            deltaWeight = BuniSafeMath.bsub(newWeight, currentWeight);\\n\\n            require(BuniSafeMath.badd(totalWeight, deltaWeight) <= BuniConstants.MAX_TOTAL_WEIGHT,\\n                    \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n\\n            // poolShares = totalSupply * (deltaWeight / totalWeight)\\n            poolShares = BuniSafeMath.bmul(totalSupply,\\n                                               BuniSafeMath.bdiv(deltaWeight, totalWeight));\\n            // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n            deltaBalance = BuniSafeMath.bmul(currentBalance,\\n                                                 BuniSafeMath.bdiv(deltaWeight, currentWeight));\\n\\n            // First gets the tokens from msg.sender to this contract (Pool Controller)\\n            bool xfer = IERC20(token).transferFrom(msg.sender, address(this), deltaBalance);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            // Now with the tokens this contract can bind them to the pool it controls\\n            bPool.rebind(token, BuniSafeMath.badd(currentBalance, deltaBalance), newWeight);\\n\\n            self.mintPoolShareFromLib(poolShares);\\n            self.pushPoolShareFromLib(msg.sender, poolShares);\\n        }\\n    }\\n\\n    /**\\n     * @notice External function called to make the contract update weights according to plan\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param gradualUpdate - gradual update parameters from the CRP\\n    */\\n    function pokeWeights(\\n        IBPool bPool,\\n        GradualUpdateParams storage gradualUpdate\\n    )\\n        external\\n    {\\n        // Do nothing if we call this when there is no update plan\\n        if (gradualUpdate.startBlock == 0) {\\n            return;\\n        }\\n\\n        // Error to call it before the start of the plan\\n        require(block.number >= gradualUpdate.startBlock, \\\"ERR_CANT_POKE_YET\\\");\\n        // Proposed error message improvement\\n        // require(block.number >= startBlock, \\\"ERR_NO_HOKEY_POKEY\\\");\\n\\n        // This allows for pokes after endBlock that get weights to endWeights\\n        // Get the current block (or the endBlock, if we're already past the end)\\n        uint currentBlock;\\n        if (block.number > gradualUpdate.endBlock) {\\n            currentBlock = gradualUpdate.endBlock;\\n        }\\n        else {\\n            currentBlock = block.number;\\n        }\\n\\n        uint blockPeriod = BuniSafeMath.bsub(gradualUpdate.endBlock, gradualUpdate.startBlock);\\n        uint blocksElapsed = BuniSafeMath.bsub(currentBlock, gradualUpdate.startBlock);\\n        uint weightDelta;\\n        uint deltaPerBlock;\\n        uint newWeight;\\n\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            // Make sure it does nothing if the new and old weights are the same (saves gas)\\n            // It's a degenerate case if they're *all* the same, but you certainly could have\\n            // a plan where you only change some of the weights in the set\\n            if (gradualUpdate.startWeights[i] != gradualUpdate.endWeights[i]) {\\n                if (gradualUpdate.endWeights[i] < gradualUpdate.startWeights[i]) {\\n                    // We are decreasing the weight\\n\\n                    // First get the total weight delta\\n                    weightDelta = BuniSafeMath.bsub(gradualUpdate.startWeights[i],\\n                                                        gradualUpdate.endWeights[i]);\\n                    // And the amount it should change per block = total change/number of blocks in the period\\n                    deltaPerBlock = BuniSafeMath.bdiv(weightDelta, blockPeriod);\\n                    //deltaPerBlock = bdivx(weightDelta, blockPeriod);\\n\\n                     // newWeight = startWeight - (blocksElapsed * deltaPerBlock)\\n                    newWeight = BuniSafeMath.bsub(gradualUpdate.startWeights[i],\\n                                                      BuniSafeMath.bmul(blocksElapsed, deltaPerBlock));\\n                }\\n                else {\\n                    // We are increasing the weight\\n\\n                    // First get the total weight delta\\n                    weightDelta = BuniSafeMath.bsub(gradualUpdate.endWeights[i],\\n                                                        gradualUpdate.startWeights[i]);\\n                    // And the amount it should change per block = total change/number of blocks in the period\\n                    deltaPerBlock = BuniSafeMath.bdiv(weightDelta, blockPeriod);\\n                    //deltaPerBlock = bdivx(weightDelta, blockPeriod);\\n\\n                     // newWeight = startWeight + (blocksElapsed * deltaPerBlock)\\n                    newWeight = BuniSafeMath.badd(gradualUpdate.startWeights[i],\\n                                                      BuniSafeMath.bmul(blocksElapsed, deltaPerBlock));\\n                }\\n\\n                uint bal = bPool.getBalance(tokens[i]);\\n\\n                bPool.rebind(tokens[i], bal, newWeight);\\n            }\\n        }\\n\\n        // Reset to allow add/remove tokens, or manual weight updates\\n        if (block.number >= gradualUpdate.endBlock) {\\n            gradualUpdate.startBlock = 0;\\n        }\\n    }\\n\\n    /* solhint-enable function-max-lines */\\n\\n    /**\\n     * @notice Schedule (commit) a token to be added; must call applyAddToken after a fixed\\n     *         number of blocks to actually add the token\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - the token to be added\\n     * @param balance - how much to be added\\n     * @param denormalizedWeight - the desired token weight\\n     * @param newToken - NewTokenParams struct used to hold the token data (in CRP storage)\\n     */\\n    function commitAddToken(\\n        IBPool bPool,\\n        address token,\\n        uint balance,\\n        uint denormalizedWeight,\\n        NewTokenParams storage newToken\\n    )\\n        external\\n    {\\n        require(!bPool.isBound(token), \\\"ERR_IS_BOUND\\\");\\n\\n        require(denormalizedWeight <= BuniConstants.MAX_WEIGHT, \\\"ERR_WEIGHT_ABOVE_MAX\\\");\\n        require(denormalizedWeight >= BuniConstants.MIN_WEIGHT, \\\"ERR_WEIGHT_BELOW_MIN\\\");\\n        require(BuniSafeMath.badd(bPool.getTotalDenormalizedWeight(),\\n                                      denormalizedWeight) <= BuniConstants.MAX_TOTAL_WEIGHT,\\n                \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        require(balance >= BuniConstants.MIN_BALANCE, \\\"ERR_BALANCE_BELOW_MIN\\\");\\n\\n        newToken.addr = token;\\n        newToken.balance = balance;\\n        newToken.denorm = denormalizedWeight;\\n        newToken.commitBlock = block.number;\\n        newToken.isCommitted = true;\\n    }\\n\\n    /**\\n     * @notice Add the token previously committed (in commitAddToken) to the pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param addTokenTimeLockInBlocks -  Wait time between committing and applying a new token\\n     * @param newToken - NewTokenParams struct used to hold the token data (in CRP storage)\\n     */\\n    function applyAddToken(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint addTokenTimeLockInBlocks,\\n        NewTokenParams storage newToken\\n    )\\n        external\\n    {\\n        require(newToken.isCommitted, \\\"ERR_NO_TOKEN_COMMIT\\\");\\n        require(BuniSafeMath.bsub(block.number, newToken.commitBlock) >= addTokenTimeLockInBlocks,\\n                                      \\\"ERR_TIMELOCK_STILL_COUNTING\\\");\\n\\n        uint totalSupply = self.totalSupply();\\n\\n        // poolShares = totalSupply * newTokenWeight / totalWeight\\n        uint poolShares = BuniSafeMath.bdiv(BuniSafeMath.bmul(totalSupply, newToken.denorm),\\n                                                bPool.getTotalDenormalizedWeight());\\n\\n        // Clear this to allow adding more tokens\\n        newToken.isCommitted = false;\\n\\n        // First gets the tokens from msg.sender to this contract (Pool Controller)\\n        bool returnValue = IERC20(newToken.addr).transferFrom(self.getController(), address(self), newToken.balance);\\n        require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        // Approves bPool to pull from this controller\\n        // Approve unlimited, same as when creating the pool, so they can join pools later\\n        returnValue = SafeApprove.safeApprove(IERC20(newToken.addr), address(bPool), BuniConstants.MAX_UINT);\\n        require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n        bPool.bind(newToken.addr, newToken.balance, newToken.denorm);\\n\\n        self.mintPoolShareFromLib(poolShares);\\n        self.pushPoolShareFromLib(msg.sender, poolShares);\\n    }\\n\\n     /**\\n     * @notice Remove a token from the pool\\n     * @dev Logic in the CRP controls when ths can be called. There are two related permissions:\\n     *      AddRemoveTokens - which allows removing down to the underlying BPool limit of two\\n     *      RemoveAllTokens - which allows completely draining the pool by removing all tokens\\n     *                        This can result in a non-viable pool with 0 or 1 tokens (by design),\\n     *                        meaning all swapping or binding operations would fail in this state\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - token to remove\\n     */\\n    function removeToken(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address token\\n    )\\n        external\\n    {\\n        uint totalSupply = self.totalSupply();\\n\\n        // poolShares = totalSupply * tokenWeight / totalWeight\\n        uint poolShares = BuniSafeMath.bdiv(BuniSafeMath.bmul(totalSupply,\\n                                                                      bPool.getDenormalizedWeight(token)),\\n                                                bPool.getTotalDenormalizedWeight());\\n\\n        // this is what will be unbound from the pool\\n        // Have to get it before unbinding\\n        uint balance = bPool.getBalance(token);\\n\\n        // Unbind and get the tokens out of Buni pool\\n        bPool.unbind(token);\\n\\n        // Now with the tokens this contract can send them to msg.sender\\n        bool xfer = IERC20(token).transfer(self.getController(), balance);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n        self.pullPoolShareFromLib(self.getController(), poolShares);\\n        self.burnPoolShareFromLib(poolShares);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n         }\\n    }\\n\\n    /**\\n     * @notice Update weights in a predetermined way, between startBlock and endBlock,\\n     *         through external cals to pokeWeights\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param newWeights - final weights we want to get to\\n     * @param startBlock - when weights should start to change\\n     * @param endBlock - when weights will be at their final values\\n     * @param minimumWeightChangeBlockPeriod - needed to validate the block period\\n    */\\n    function updateWeightsGradually(\\n        IBPool bPool,\\n        GradualUpdateParams storage gradualUpdate,\\n        uint[] calldata newWeights,\\n        uint startBlock,\\n        uint endBlock,\\n        uint minimumWeightChangeBlockPeriod\\n    )\\n        external\\n    {\\n        require(block.number < endBlock, \\\"ERR_GRADUAL_UPDATE_TIME_TRAVEL\\\");\\n        \\n        if (block.number > startBlock) {\\n            // This means the weight update should start ASAP\\n            // Moving the start block up prevents a big jump/discontinuity in the weights\\n            gradualUpdate.startBlock = block.number;\\n        }\\n        else{\\n            gradualUpdate.startBlock = startBlock;\\n        }\\n\\n        // Enforce a minimum time over which to make the changes\\n        // The also prevents endBlock <= startBlock\\n        require(BuniSafeMath.bsub(endBlock, gradualUpdate.startBlock) >= minimumWeightChangeBlockPeriod,\\n                \\\"ERR_WEIGHT_CHANGE_TIME_BELOW_MIN\\\");\\n\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        // Must specify weights for all tokens\\n        require(newWeights.length == tokens.length, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n\\n        uint weightsSum = 0;\\n        gradualUpdate.startWeights = new uint[](tokens.length);\\n\\n        // Check that endWeights are valid now to avoid reverting in a future pokeWeights call\\n        //\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            require(newWeights[i] <= BuniConstants.MAX_WEIGHT, \\\"ERR_WEIGHT_ABOVE_MAX\\\");\\n            require(newWeights[i] >= BuniConstants.MIN_WEIGHT, \\\"ERR_WEIGHT_BELOW_MIN\\\");\\n\\n            weightsSum = BuniSafeMath.badd(weightsSum, newWeights[i]);\\n            gradualUpdate.startWeights[i] = bPool.getDenormalizedWeight(tokens[i]);\\n        }\\n        require(weightsSum <= BuniConstants.MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n\\n        gradualUpdate.endBlock = endBlock;\\n        gradualUpdate.endWeights = newWeights;\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn\\n    )\\n         external\\n         view\\n         returns (uint[] memory actualAmountsIn)\\n    {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = BuniSafeMath.bdiv(poolAmountOut,\\n                                           BuniSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountIn = BuniSafeMath.bmul(ratio,\\n                                                       BuniSafeMath.badd(bal, 1));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return exitFee - calculated exit fee\\n     * @return pAiAfterExitFee - final amount in (after accounting for exit fee)\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint pAiAfterExitFee, uint[] memory actualAmountsOut)\\n    {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        // Calculate exit fee and the final amount in\\n        exitFee = BuniSafeMath.bmul(poolAmountIn, BuniConstants.EXIT_FEE);\\n        pAiAfterExitFee = BuniSafeMath.bsub(poolAmountIn, exitFee);\\n\\n        uint ratio = BuniSafeMath.bdiv(pAiAfterExitFee,\\n                                           BuniSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = BuniSafeMath.bmul(ratio,\\n                                                        BuniSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    /**\\n     * @notice Join by swapping a fixed amount of an external token in (must be present in the pool)\\n     *         System calculates the pool token amount\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenIn - which token we're transferring in\\n     * @param tokenAmountIn - amount of deposit\\n     * @param minPoolAmountOut - minimum of pool tokens to receive\\n     * @return poolAmountOut - amount of pool tokens minted and transferred\\n     */\\n    function joinswapExternAmountIn(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenIn,\\n        uint tokenAmountIn,\\n        uint minPoolAmountOut\\n    )\\n        external\\n        view\\n        returns (uint poolAmountOut)\\n    {\\n        require(bPool.isBound(tokenIn), \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountIn <= BuniSafeMath.bmul(bPool.getBalance(tokenIn),\\n                                                       BuniConstants.MAX_IN_RATIO),\\n                                                       \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        poolAmountOut = bPool.calcPoolOutGivenSingleIn(\\n                            bPool.getBalance(tokenIn),\\n                            bPool.getDenormalizedWeight(tokenIn),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            tokenAmountIn,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n    }\\n\\n    /**\\n     * @notice Join by swapping an external token in (must be present in the pool)\\n     *         To receive an exact amount of pool tokens out. System calculates the deposit amount\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenIn - which token we're transferring in (system calculates amount required)\\n     * @param poolAmountOut - amount of pool tokens to be received\\n     * @param maxAmountIn - Maximum asset tokens that can be pulled to pay for the pool tokens\\n     * @return tokenAmountIn - amount of asset tokens transferred in to purchase the pool tokens\\n     */\\n    function joinswapPoolAmountOut(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenIn,\\n        uint poolAmountOut,\\n        uint maxAmountIn\\n    )\\n        external\\n        view\\n        returns (uint tokenAmountIn)\\n    {\\n        require(bPool.isBound(tokenIn), \\\"ERR_NOT_BOUND\\\");\\n\\n        tokenAmountIn = bPool.calcSingleInGivenPoolOut(\\n                            bPool.getBalance(tokenIn),\\n                            bPool.getDenormalizedWeight(tokenIn),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            poolAmountOut,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(tokenAmountIn <= BuniSafeMath.bmul(bPool.getBalance(tokenIn),\\n                                                       BuniConstants.MAX_IN_RATIO),\\n                                                       \\\"ERR_MAX_IN_RATIO\\\");\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem a specific number of pool tokens for an underlying asset\\n     *         Asset must be present in the pool, and will incur an EXIT_FEE (if set to non-zero)\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountOut - minimum asset tokens to receive\\n     * @return exitFee - calculated exit fee\\n     * @return tokenAmountOut - amount of asset tokens returned\\n     */\\n    function exitswapPoolAmountIn(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenOut,\\n        uint poolAmountIn,\\n        uint minAmountOut\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint tokenAmountOut)\\n    {\\n        require(bPool.isBound(tokenOut), \\\"ERR_NOT_BOUND\\\");\\n\\n        tokenAmountOut = bPool.calcSingleOutGivenPoolIn(\\n                            bPool.getBalance(tokenOut),\\n                            bPool.getDenormalizedWeight(tokenOut),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            poolAmountIn,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n        require(tokenAmountOut <= BuniSafeMath.bmul(bPool.getBalance(tokenOut),\\n                                                        BuniConstants.MAX_OUT_RATIO),\\n                                                        \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        exitFee = BuniSafeMath.bmul(poolAmountIn, BuniConstants.EXIT_FEE);\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for a specific amount of underlying assets\\n     *         Asset must be present in the pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param tokenAmountOut - amount of underlying asset tokens to receive\\n     * @param maxPoolAmountIn - maximum pool tokens to be redeemed\\n     * @return exitFee - calculated exit fee\\n     * @return poolAmountIn - amount of pool tokens redeemed\\n     */\\n    function exitswapExternAmountOut(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenOut,\\n        uint tokenAmountOut,\\n        uint maxPoolAmountIn\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint poolAmountIn)\\n    {\\n        require(bPool.isBound(tokenOut), \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountOut <= BuniSafeMath.bmul(bPool.getBalance(tokenOut),\\n                                                        BuniConstants.MAX_OUT_RATIO),\\n                                                        \\\"ERR_MAX_OUT_RATIO\\\");\\n        poolAmountIn = bPool.calcPoolInGivenSingleOut(\\n                            bPool.getBalance(tokenOut),\\n                            bPool.getDenormalizedWeight(tokenOut),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            tokenAmountOut,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        exitFee = BuniSafeMath.bmul(poolAmountIn, BuniConstants.EXIT_FEE);\\n    }\\n\\n    // Internal functions\\n\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0371915aeb8570eb7f8e15a7f918f659aa0045284970ee8e59b32eb2b2589bd9\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x61417a610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c806382495b4511610096578063d505a94e11610070578063d505a94e14610247578063df90de0b1461025a578063efa587741461026d578063f544aa1c1461028d576100f4565b806382495b45146101e7578063a1925f1d14610207578063b489ec1914610227576100f4565b80635471c3e4116100d25780635471c3e41461015b5780636a6dc6e714610186578063724a2d53146101a657806377d44349146101c7576100f4565b80630970e47f146100f957806313b8bf241461011b5780631c1af1361461013b575b600080fd5b81801561010557600080fd5b5061011961011436600461380d565b6102ad565b005b81801561012757600080fd5b50610119610136366004613798565b610786565b81801561014757600080fd5b506101196101563660046135da565b610a78565b61016e610169366004613901565b610a84565b60405161017d939291906140c1565b60405180910390f35b6101996101943660046138a7565b610d5d565b60405161017d91906140aa565b6101b96101b43660046138a7565b6111b2565b60405161017d9291906140b3565b8180156101d357600080fd5b506101196101e2366004613612565b611615565b8180156101f357600080fd5b5061011961020236600461376d565b611656565b61021a610215366004613901565b6119d8565b60405161017d9190613a95565b81801561023357600080fd5b5061011961024236600461371d565b611c93565b6101b96102553660046138a7565b611ea4565b6101996102683660046138a7565b612280565b81801561027957600080fd5b50610119610288366004613972565b612651565b81801561029957600080fd5b506101196102a8366004613857565b612a27565b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e857600080fd5b505afa1580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032091906139b7565b905060006104226103ac83866001600160a01b031663948d8ce6876040518263ffffffff1660e01b81526004016103579190613a09565b60206040518083038186803b15801561036f57600080fd5b505afa158015610383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a791906139b7565b613112565b856001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e557600080fd5b505afa1580156103f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041d91906139b7565b613191565b90506000846001600160a01b031663f8b2cb4f856040518263ffffffff1660e01b81526004016104529190613a09565b60206040518083038186803b15801561046a57600080fd5b505afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a291906139b7565b6040517fcf5e7bd30000000000000000000000000000000000000000000000000000000081529091506001600160a01b0386169063cf5e7bd3906104ea908790600401613a09565b600060405180830381600087803b15801561050457600080fd5b505af1158015610518573d6000803e3d6000fd5b505050506000846001600160a01b031663a9059cbb886001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561056657600080fd5b505afa15801561057a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059e91906135f6565b846040518363ffffffff1660e01b81526004016105bc929190613a41565b602060405180830381600087803b1580156105d657600080fd5b505af11580156105ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060e91906136fd565b9050806106365760405162461bcd60e51b815260040161062d90614005565b60405180910390fd5b866001600160a01b03166355c32a23886001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561067e57600080fd5b505afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b691906135f6565b856040518363ffffffff1660e01b81526004016106d4929190613a41565b600060405180830381600087803b1580156106ee57600080fd5b505af1158015610702573d6000803e3d6000fd5b50506040517f220eb7600000000000000000000000000000000000000000000000000000000081526001600160a01b038a16925063220eb760915061074b9086906004016140aa565b600060405180830381600087803b15801561076557600080fd5b505af1158015610779573d6000803e3d6000fd5b5050505050505050505050565b8143106107a55760405162461bcd60e51b815260040161062d90613adf565b824311156107b5574386556107b9565b8286555b806107c8838860000154613222565b10156107e65760405162461bcd60e51b815260040161062d90613b16565b6060876001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561082157600080fd5b505afa158015610835573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261085d9190810190613652565b805190915085146108805760405162461bcd60e51b815260040161062d90613b4b565b6000815167ffffffffffffffff8111801561089a57600080fd5b506040519080825280602002602001820160405280156108c4578160200160208202803683370190505b5080516108db9160028b01916020909101906134f2565b5060005b8251811015610a2d576802b5e3af16b18800008888838181106108fe57fe5b9050602002013511156109235760405162461bcd60e51b815260040161062d90613ebb565b670de0b6b3a764000088888381811061093857fe5b90506020020135101561095d5760405162461bcd60e51b815260040161062d90613ddf565b6109798289898481811061096d57fe5b9050602002013561325b565b9150896001600160a01b031663948d8ce684838151811061099657fe5b60200260200101516040518263ffffffff1660e01b81526004016109ba9190613a09565b60206040518083038186803b1580156109d257600080fd5b505afa1580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a91906139b7565b896002018281548110610a1957fe5b6000918252602090912001556001016108df565b506802b5e3af16b1880000811115610a575760405162461bcd60e51b815260040161062d90613c5e565b60018801849055610a6c60038901888861353d565b50505050505050505050565b610a8181613287565b50565b600080606080876001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610ac357600080fd5b505afa158015610ad7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610aff9190810190613652565b80519091508514610b225760405162461bcd60e51b815260040161062d90613c95565b6000896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5d57600080fd5b505afa158015610b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9591906139b7565b9050610ba2886000613112565b9450610bae8886613222565b93506000610bc18561041d84600161325b565b905080610be05760405162461bcd60e51b815260040161062d90613bf0565b825167ffffffffffffffff81118015610bf857600080fd5b50604051908082528060200260200182016040528015610c22578160200160208202803683370190505b50935060005b8351811015610d4e576000848281518110610c3f57fe5b6020026020010151905060008c6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b8152600401610c779190613a09565b60206040518083038186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc791906139b7565b90506000610cda856103a7846001613222565b905080610cf95760405162461bcd60e51b815260040161062d90613bf0565b8b8b85818110610d0557fe5b90506020020135811015610d2b5760405162461bcd60e51b815260040161062d90613ccc565b80888581518110610d3857fe5b6020908102919091010152505050600101610c28565b50505050955095509592505050565b604051630bcded8960e21b81526000906001600160a01b03861690632f37b62490610d8c908790600401613a09565b60206040518083038186803b158015610da457600080fd5b505afa158015610db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddc91906136fd565b610df85760405162461bcd60e51b815260040161062d90613e4d565b60405163f8b2cb4f60e01b81526001600160a01b03861690635c1bbaf790829063f8b2cb4f90610e2c908990600401613a09565b60206040518083038186803b158015610e4457600080fd5b505afa158015610e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7c91906139b7565b604051634a46c67360e11b81526001600160a01b0389169063948d8ce690610ea8908a90600401613a09565b60206040518083038186803b158015610ec057600080fd5b505afa158015610ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef891906139b7565b896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3157600080fd5b505afa158015610f45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6991906139b7565b896001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa257600080fd5b505afa158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda91906139b7565b888b6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561101457600080fd5b505afa158015611028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104c91906139b7565b6040518763ffffffff1660e01b815260040161106d969594939291906140e0565b60206040518083038186803b15801561108557600080fd5b505afa158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd91906139b7565b9050806110dc5760405162461bcd60e51b815260040161062d90613bf0565b818111156110fc5760405162461bcd60e51b815260040161062d90613da8565b60405163f8b2cb4f60e01b815261118a906001600160a01b0387169063f8b2cb4f9061112c908890600401613a09565b60206040518083038186803b15801561114457600080fd5b505afa158015611158573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117c91906139b7565b6706f05b59d3b20000613112565b8111156111a95760405162461bcd60e51b815260040161062d90613bb9565b95945050505050565b600080856001600160a01b0316632f37b624866040518263ffffffff1660e01b81526004016111e19190613a09565b60206040518083038186803b1580156111f957600080fd5b505afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123191906136fd565b61124d5760405162461bcd60e51b815260040161062d90613e4d565b60405163f8b2cb4f60e01b81526112db906001600160a01b0388169063f8b2cb4f9061127d908990600401613a09565b60206040518083038186803b15801561129557600080fd5b505afa1580156112a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cd91906139b7565b6704a03ce68d215556613112565b8411156112fa5760405162461bcd60e51b815260040161062d90613e16565b60405163f8b2cb4f60e01b81526001600160a01b038716906382f652ad90829063f8b2cb4f9061132e908a90600401613a09565b60206040518083038186803b15801561134657600080fd5b505afa15801561135a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137e91906139b7565b604051634a46c67360e11b81526001600160a01b038a169063948d8ce6906113aa908b90600401613a09565b60206040518083038186803b1580156113c257600080fd5b505afa1580156113d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fa91906139b7565b8a6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561143357600080fd5b505afa158015611447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146b91906139b7565b8a6001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a457600080fd5b505afa1580156114b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114dc91906139b7565b898c6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561151657600080fd5b505afa15801561152a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154e91906139b7565b6040518763ffffffff1660e01b815260040161156f969594939291906140e0565b60206040518083038186803b15801561158757600080fd5b505afa15801561159b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bf91906139b7565b9050806115de5760405162461bcd60e51b815260040161062d90613bf0565b828111156115fe5760405162461bcd60e51b815260040161062d90613da8565b611609816000613112565b91509550959350505050565b60005b818110156116515761164983838381811061162f57fe5b905060200201602081019061164491906135da565b613287565b600101611618565b505050565b8054611661576119d4565b80544310156116825760405162461bcd60e51b815260040161062d90613d3a565b6000816001015443111561169b5750600181015461169e565b50435b60006116b283600101548460000154613222565b905060006116c4838560000154613222565b905060008060006060886001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561170657600080fd5b505afa15801561171a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117429190810190613652565b905060005b81518110156119bb5788600301818154811061175f57fe5b906000526020600020015489600201828154811061177957fe5b9060005260206000200154146119b35788600201818154811061179857fe5b90600052602060002001548960030182815481106117b257fe5b90600052602060002001541015611840576117ff8960020182815481106117d557fe5b90600052602060002001548a60030183815481106117ef57fe5b9060005260206000200154613222565b945061180b8588613191565b935061183989600201828154811061181f57fe5b90600052602060002001546118348887613112565b613222565b92506118a9565b61186c89600301828154811061185257fe5b90600052602060002001548a60020183815481106117ef57fe5b94506118788588613191565b93506118a689600201828154811061188c57fe5b90600052602060002001546118a18887613112565b61325b565b92505b60008a6001600160a01b031663f8b2cb4f8484815181106118c657fe5b60200260200101516040518263ffffffff1660e01b81526004016118ea9190613a09565b60206040518083038186803b15801561190257600080fd5b505afa158015611916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193a91906139b7565b90508a6001600160a01b0316633fdddaa284848151811061195757fe5b602002602001015183876040518463ffffffff1660e01b815260040161197f93929190613a74565b600060405180830381600087803b15801561199957600080fd5b505af11580156119ad573d6000803e3d6000fd5b50505050505b600101611747565b50876001015443106119cc57600088555b505050505050505b5050565b606080856001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b158015611a1457600080fd5b505afa158015611a28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a509190810190613652565b80519091508314611a735760405162461bcd60e51b815260040161062d90613c95565b6000876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aae57600080fd5b505afa158015611ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae691906139b7565b90506000611af98761041d846001613222565b905080611b185760405162461bcd60e51b815260040161062d90613bf0565b825167ffffffffffffffff81118015611b3057600080fd5b50604051908082528060200260200182016040528015611b5a578160200160208202803683370190505b50935060005b8351811015611c86576000848281518110611b7757fe5b6020026020010151905060008a6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b8152600401611baf9190613a09565b60206040518083038186803b158015611bc757600080fd5b505afa158015611bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bff91906139b7565b90506000611c12856103a784600161325b565b905080611c315760405162461bcd60e51b815260040161062d90613bf0565b898985818110611c3d57fe5b90506020020135811115611c635760405162461bcd60e51b815260040161062d90613da8565b80888581518110611c7057fe5b6020908102919091010152505050600101611b60565b5050505095945050505050565b604051630bcded8960e21b81526001600160a01b03861690632f37b62490611cbf908790600401613a09565b60206040518083038186803b158015611cd757600080fd5b505afa158015611ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0f91906136fd565b15611d2c5760405162461bcd60e51b815260040161062d90613b82565b6802b5e3af16b1880000821115611d555760405162461bcd60e51b815260040161062d90613ebb565b670de0b6b3a7640000821015611d7d5760405162461bcd60e51b815260040161062d90613ddf565b670de0b6b3a7640000603202611e03866001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b158015611dc557600080fd5b505afa158015611dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfd91906139b7565b8461325b565b1115611e215760405162461bcd60e51b815260040161062d90613c5e565b64e8d4a51000831015611e465760405162461bcd60e51b815260040161062d90613fce565b805460038201939093556002810191909155436001820155600160a01b7fffffffffffffffffffffffff00000000000000000000000000000000000000009092166001600160a01b03939093169290921760ff60a01b191617905550565b600080856001600160a01b0316632f37b624866040518263ffffffff1660e01b8152600401611ed39190613a09565b60206040518083038186803b158015611eeb57600080fd5b505afa158015611eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2391906136fd565b611f3f5760405162461bcd60e51b815260040161062d90613e4d565b60405163f8b2cb4f60e01b81526001600160a01b03871690638929801290829063f8b2cb4f90611f73908a90600401613a09565b60206040518083038186803b158015611f8b57600080fd5b505afa158015611f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc391906139b7565b604051634a46c67360e11b81526001600160a01b038a169063948d8ce690611fef908b90600401613a09565b60206040518083038186803b15801561200757600080fd5b505afa15801561201b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203f91906139b7565b8a6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561207857600080fd5b505afa15801561208c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b091906139b7565b8a6001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b1580156120e957600080fd5b505afa1580156120fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212191906139b7565b898c6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561215b57600080fd5b505afa15801561216f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219391906139b7565b6040518763ffffffff1660e01b81526004016121b4969594939291906140e0565b60206040518083038186803b1580156121cc57600080fd5b505afa1580156121e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220491906139b7565b9050828110156122265760405162461bcd60e51b815260040161062d90613ccc565b60405163f8b2cb4f60e01b8152612256906001600160a01b0388169063f8b2cb4f9061127d908990600401613a09565b8111156122755760405162461bcd60e51b815260040161062d90613e16565b611609846000613112565b604051630bcded8960e21b81526000906001600160a01b03861690632f37b624906122af908790600401613a09565b60206040518083038186803b1580156122c757600080fd5b505afa1580156122db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ff91906136fd565b61231b5760405162461bcd60e51b815260040161062d90613e4d565b60405163f8b2cb4f60e01b815261234b906001600160a01b0387169063f8b2cb4f9061112c908890600401613a09565b83111561236a5760405162461bcd60e51b815260040161062d90613bb9565b60405163f8b2cb4f60e01b81526001600160a01b03861690638656b65390829063f8b2cb4f9061239e908990600401613a09565b60206040518083038186803b1580156123b657600080fd5b505afa1580156123ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ee91906139b7565b604051634a46c67360e11b81526001600160a01b0389169063948d8ce69061241a908a90600401613a09565b60206040518083038186803b15801561243257600080fd5b505afa158015612446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246a91906139b7565b896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124a357600080fd5b505afa1580156124b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124db91906139b7565b896001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b15801561251457600080fd5b505afa158015612528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254c91906139b7565b888b6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561258657600080fd5b505afa15801561259a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125be91906139b7565b6040518763ffffffff1660e01b81526004016125df969594939291906140e0565b60206040518083038186803b1580156125f757600080fd5b505afa15801561260b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262f91906139b7565b9050818110156111a95760405162461bcd60e51b815260040161062d90613ccc565b8054600160a01b900460ff166126795760405162461bcd60e51b815260040161062d90613aa8565b81612688438360010154613222565b10156126a65760405162461bcd60e51b815260040161062d90613ef2565b6000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126e157600080fd5b505afa1580156126f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271991906139b7565b9050600061276761272e838560020154613112565b866001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e557600080fd5b835460ff60a01b1981168555604080517f3018205f00000000000000000000000000000000000000000000000000000000815290519293506000926001600160a01b03928316926323b872dd92908b1691633018205f91600480820192602092909190829003018186803b1580156127de57600080fd5b505afa1580156127f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281691906135f6565b8987600301546040518463ffffffff1660e01b815260040161283a93929190613a1d565b602060405180830381600087803b15801561285457600080fd5b505af1158015612868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288c91906136fd565b9050806128ab5760405162461bcd60e51b815260040161062d90614005565b83546128c3906001600160a01b031687600019613329565b9050806128e25760405162461bcd60e51b815260040161062d90614005565b8354600385015460028601546040517fe4e1e5380000000000000000000000000000000000000000000000000000000081526001600160a01b03808b169463e4e1e53894612937949190921692600401613a74565b600060405180830381600087803b15801561295157600080fd5b505af1158015612965573d6000803e3d6000fd5b50506040517f4ba578820000000000000000000000000000000000000000000000000000000081526001600160a01b038a169250634ba5788291506129ae9085906004016140aa565b600060405180830381600087803b1580156129c857600080fd5b505af11580156129dc573d6000803e3d6000fd5b50506040517f095dcccc0000000000000000000000000000000000000000000000000000000081526001600160a01b038a16925063095dcccc915061074b9033908690600401613a41565b670de0b6b3a7640000811015612a4f5760405162461bcd60e51b815260040161062d90613e84565b6802b5e3af16b1880000811115612a785760405162461bcd60e51b815260040161062d90613c27565b604051634a46c67360e11b81526000906001600160a01b0385169063948d8ce690612aa7908690600401613a09565b60206040518083038186803b158015612abf57600080fd5b505afa158015612ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af791906139b7565b905081811415612b07575061310c565b60405163f8b2cb4f60e01b81526000906001600160a01b0386169063f8b2cb4f90612b36908790600401613a09565b60206040518083038186803b158015612b4e57600080fd5b505afa158015612b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8691906139b7565b90506000866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bc357600080fd5b505afa158015612bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfb91906139b7565b90506000866001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b158015612c3857600080fd5b505afa158015612c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7091906139b7565b905060008060008087891015612ed757612c8a888a613222565b9150612c9a866103a78488613191565b9350612caa876103a7848b613191565b9250612cb68784613222565b905064e8d4a51000811015612cdd5760405162461bcd60e51b815260040161062d90613d03565b6040517f3fdddaa20000000000000000000000000000000000000000000000000000000081526001600160a01b038c1690633fdddaa290612d26908d9085908e90600401613a74565b600060405180830381600087803b158015612d4057600080fd5b505af1158015612d54573d6000803e3d6000fd5b505060405163a9059cbb60e01b8152600092506001600160a01b038d16915063a9059cbb90612d899033908890600401613a41565b602060405180830381600087803b158015612da357600080fd5b505af1158015612db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ddb91906136fd565b905080612dfa5760405162461bcd60e51b815260040161062d90614005565b6040517f55c32a230000000000000000000000000000000000000000000000000000000081526001600160a01b038e16906355c32a2390612e419033908990600401613a41565b600060405180830381600087803b158015612e5b57600080fd5b505af1158015612e6f573d6000803e3d6000fd5b505050508c6001600160a01b031663220eb760866040518263ffffffff1660e01b8152600401612e9f91906140aa565b600060405180830381600087803b158015612eb957600080fd5b505af1158015612ecd573d6000803e3d6000fd5b5050505050613103565b612ee18989613222565b91506802b5e3af16b1880000612ef7868461325b565b1115612f155760405162461bcd60e51b815260040161062d90613c5e565b612f23866103a78488613191565b9350612f33876103a7848b613191565b925060008a6001600160a01b03166323b872dd3330876040518463ffffffff1660e01b8152600401612f6793929190613a1d565b602060405180830381600087803b158015612f8157600080fd5b505af1158015612f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb991906136fd565b905080612fd85760405162461bcd60e51b815260040161062d90614005565b8b6001600160a01b0316633fdddaa28c612ff28b8861325b565b8d6040518463ffffffff1660e01b815260040161301193929190613a74565b600060405180830381600087803b15801561302b57600080fd5b505af115801561303f573d6000803e3d6000fd5b505050508c6001600160a01b0316634ba57882866040518263ffffffff1660e01b815260040161306f91906140aa565b600060405180830381600087803b15801561308957600080fd5b505af115801561309d573d6000803e3d6000fd5b505050508c6001600160a01b031663095dcccc33876040518363ffffffff1660e01b81526004016130cf929190613a41565b600060405180830381600087803b1580156130e957600080fd5b505af11580156130fd573d6000803e3d6000fd5b50505050505b50505050505050505b50505050565b6000826131215750600061318b565b8282028284828161312e57fe5b041461314c5760405162461bcd60e51b815260040161062d90613f29565b6706f05b59d3b200008101818110156131775760405162461bcd60e51b815260040161062d90613f29565b6000670de0b6b3a7640000825b0493505050505b92915050565b6000816131b05760405162461bcd60e51b815260040161062d90613f97565b826131bd5750600061318b565b670de0b6b3a7640000838102908482816131d357fe5b04146131f15760405162461bcd60e51b815260040161062d90613d71565b600283048101818110156132175760405162461bcd60e51b815260040161062d90613d71565b600084828161318457fe5b600080600061323185856134cd565b9150915080156132535760405162461bcd60e51b815260040161062d9061403c565b509392505050565b6000828201838110156132805760405162461bcd60e51b815260040161062d90614073565b9392505050565b60405163a9059cbb60e01b81526000906001600160a01b0383169063a9059cbb906132b89033908590600401613a41565b602060405180830381600087803b1580156132d257600080fd5b505af11580156132e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061330a91906136fd565b9050806119d45760405162461bcd60e51b815260040161062d90613f60565b600080846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b815260040161335a929190613a5a565b60206040518083038186803b15801561337257600080fd5b505afa158015613386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133aa91906139b7565b9050828114156133be576001915050613280565b801561344d5760405163095ea7b360e01b81526001600160a01b0386169063095ea7b3906133f3908790600090600401613a41565b602060405180830381600087803b15801561340d57600080fd5b505af1158015613421573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344591906136fd565b915050613280565b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b39061347b9087908790600401613a41565b602060405180830381600087803b15801561349557600080fd5b505af11580156134a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a991906136fd565b6000808383116134e357505080820360006134eb565b505081810360015b9250929050565b82805482825590600052602060002090810192821561352d579160200282015b8281111561352d578251825591602001919060010190613512565b50613539929150613578565b5090565b82805482825590600052602060002090810192821561352d579160200282015b8281111561352d57823582559160200191906001019061355d565b5b808211156135395760008155600101613579565b805161318b8161412f565b60008083601f8401126135a9578182fd5b50813567ffffffffffffffff8111156135c0578182fd5b60208301915083602080830285010111156134eb57600080fd5b6000602082840312156135eb578081fd5b81356132808161412f565b600060208284031215613607578081fd5b81516132808161412f565b60008060208385031215613624578081fd5b823567ffffffffffffffff81111561363a578182fd5b61364685828601613598565b90969095509350505050565b60006020808385031215613664578182fd5b825167ffffffffffffffff8082111561367b578384fd5b818501915085601f83011261368e578384fd5b81518181111561369c578485fd5b83810291506136ac848301614108565b8181528481019084860184860187018a10156136c6578788fd5b8795505b838610156136f0576136dc8a8261358d565b8352600195909501949186019186016136ca565b5098975050505050505050565b60006020828403121561370e578081fd5b81518015158114613280578182fd5b600080600080600060a08688031215613734578081fd5b853561373f8161412f565b9450602086013561374f8161412f565b94979496505050506040830135926060810135926080909101359150565b6000806040838503121561377f578182fd5b823561378a8161412f565b946020939093013593505050565b600080600080600080600060c0888a0312156137b2578182fd5b87356137bd8161412f565b965060208801359550604088013567ffffffffffffffff8111156137df578283fd5b6137eb8a828b01613598565b989b979a50986060810135976080820135975060a09091013595509350505050565b600080600060608486031215613821578283fd5b833561382c8161412f565b9250602084013561383c8161412f565b9150604084013561384c8161412f565b809150509250925092565b6000806000806080858703121561386c578384fd5b84356138778161412f565b935060208501356138878161412f565b925060408501356138978161412f565b9396929550929360600135925050565b600080600080600060a086880312156138be578283fd5b85356138c98161412f565b945060208601356138d98161412f565b935060408601356138e98161412f565b94979396509394606081013594506080013592915050565b600080600080600060808688031215613918578283fd5b85356139238161412f565b945060208601356139338161412f565b935060408601359250606086013567ffffffffffffffff811115613955578182fd5b61396188828901613598565b969995985093965092949392505050565b60008060008060808587031215613987578182fd5b84356139928161412f565b935060208501356139a28161412f565b93969395505050506040820135916060013590565b6000602082840312156139c8578081fd5b5051919050565b6000815180845260208085019450808401835b838110156139fe578151875295820195908201906001016139e2565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b60006020825261328060208301846139cf565b60208082526013908201527f4552525f4e4f5f544f4b454e5f434f4d4d495400000000000000000000000000604082015260600190565b6020808252601e908201527f4552525f4752414455414c5f5550444154455f54494d455f54524156454c0000604082015260600190565b6020808252818101527f4552525f5745494748545f4348414e47455f54494d455f42454c4f575f4d494e604082015260600190565b6020808252601a908201527f4552525f53544152545f574549474854535f4d49534d41544348000000000000604082015260600190565b6020808252600c908201527f4552525f49535f424f554e440000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f4552525f4d41585f494e5f524154494f00000000000000000000000000000000604082015260600190565b6020808252600f908201527f4552525f4d4154485f415050524f580000000000000000000000000000000000604082015260600190565b6020808252600e908201527f4552525f4d41585f574549474854000000000000000000000000000000000000604082015260600190565b60208082526014908201527f4552525f4d41585f544f54414c5f574549474854000000000000000000000000604082015260600190565b60208082526014908201527f4552525f414d4f554e54535f4d49534d41544348000000000000000000000000604082015260600190565b6020808252600d908201527f4552525f4c494d49545f4f555400000000000000000000000000000000000000604082015260600190565b6020808252600f908201527f4552525f4d494e5f42414c414e43450000000000000000000000000000000000604082015260600190565b60208082526011908201527f4552525f43414e545f504f4b455f594554000000000000000000000000000000604082015260600190565b60208082526010908201527f4552525f4449565f494e5445524e414c00000000000000000000000000000000604082015260600190565b6020808252600c908201527f4552525f4c494d49545f494e0000000000000000000000000000000000000000604082015260600190565b60208082526014908201527f4552525f5745494748545f42454c4f575f4d494e000000000000000000000000604082015260600190565b60208082526011908201527f4552525f4d41585f4f55545f524154494f000000000000000000000000000000604082015260600190565b6020808252600d908201527f4552525f4e4f545f424f554e4400000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f4552525f4d494e5f574549474854000000000000000000000000000000000000604082015260600190565b60208082526014908201527f4552525f5745494748545f41424f56455f4d4158000000000000000000000000604082015260600190565b6020808252601b908201527f4552525f54494d454c4f434b5f5354494c4c5f434f554e54494e470000000000604082015260600190565b60208082526010908201527f4552525f4d554c5f4f564552464c4f5700000000000000000000000000000000604082015260600190565b60208082526017908201527f4552525f4e4f4e434f4e464f524d494e475f544f4b454e000000000000000000604082015260600190565b6020808252600c908201527f4552525f4449565f5a45524f0000000000000000000000000000000000000000604082015260600190565b60208082526015908201527f4552525f42414c414e43455f42454c4f575f4d494e0000000000000000000000604082015260600190565b6020808252600f908201527f4552525f45524332305f46414c53450000000000000000000000000000000000604082015260600190565b60208082526011908201527f4552525f5355425f554e444552464c4f57000000000000000000000000000000604082015260600190565b60208082526010908201527f4552525f4144445f4f564552464c4f5700000000000000000000000000000000604082015260600190565b90815260200190565b918252602082015260400190565b6000848252836020830152606060408301526111a960608301846139cf565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60405181810167ffffffffffffffff8111828210171561412757600080fd5b604052919050565b6001600160a01b0381168114610a8157600080fdfea2646970667358221220568ab577766f754330f320cb0357dbc986dedad7836293ea402553d013b0446964736f6c634300060c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c806382495b4511610096578063d505a94e11610070578063d505a94e14610247578063df90de0b1461025a578063efa587741461026d578063f544aa1c1461028d576100f4565b806382495b45146101e7578063a1925f1d14610207578063b489ec1914610227576100f4565b80635471c3e4116100d25780635471c3e41461015b5780636a6dc6e714610186578063724a2d53146101a657806377d44349146101c7576100f4565b80630970e47f146100f957806313b8bf241461011b5780631c1af1361461013b575b600080fd5b81801561010557600080fd5b5061011961011436600461380d565b6102ad565b005b81801561012757600080fd5b50610119610136366004613798565b610786565b81801561014757600080fd5b506101196101563660046135da565b610a78565b61016e610169366004613901565b610a84565b60405161017d939291906140c1565b60405180910390f35b6101996101943660046138a7565b610d5d565b60405161017d91906140aa565b6101b96101b43660046138a7565b6111b2565b60405161017d9291906140b3565b8180156101d357600080fd5b506101196101e2366004613612565b611615565b8180156101f357600080fd5b5061011961020236600461376d565b611656565b61021a610215366004613901565b6119d8565b60405161017d9190613a95565b81801561023357600080fd5b5061011961024236600461371d565b611c93565b6101b96102553660046138a7565b611ea4565b6101996102683660046138a7565b612280565b81801561027957600080fd5b50610119610288366004613972565b612651565b81801561029957600080fd5b506101196102a8366004613857565b612a27565b6000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e857600080fd5b505afa1580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032091906139b7565b905060006104226103ac83866001600160a01b031663948d8ce6876040518263ffffffff1660e01b81526004016103579190613a09565b60206040518083038186803b15801561036f57600080fd5b505afa158015610383573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a791906139b7565b613112565b856001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e557600080fd5b505afa1580156103f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041d91906139b7565b613191565b90506000846001600160a01b031663f8b2cb4f856040518263ffffffff1660e01b81526004016104529190613a09565b60206040518083038186803b15801561046a57600080fd5b505afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a291906139b7565b6040517fcf5e7bd30000000000000000000000000000000000000000000000000000000081529091506001600160a01b0386169063cf5e7bd3906104ea908790600401613a09565b600060405180830381600087803b15801561050457600080fd5b505af1158015610518573d6000803e3d6000fd5b505050506000846001600160a01b031663a9059cbb886001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561056657600080fd5b505afa15801561057a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059e91906135f6565b846040518363ffffffff1660e01b81526004016105bc929190613a41565b602060405180830381600087803b1580156105d657600080fd5b505af11580156105ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060e91906136fd565b9050806106365760405162461bcd60e51b815260040161062d90614005565b60405180910390fd5b866001600160a01b03166355c32a23886001600160a01b0316633018205f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561067e57600080fd5b505afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b691906135f6565b856040518363ffffffff1660e01b81526004016106d4929190613a41565b600060405180830381600087803b1580156106ee57600080fd5b505af1158015610702573d6000803e3d6000fd5b50506040517f220eb7600000000000000000000000000000000000000000000000000000000081526001600160a01b038a16925063220eb760915061074b9086906004016140aa565b600060405180830381600087803b15801561076557600080fd5b505af1158015610779573d6000803e3d6000fd5b5050505050505050505050565b8143106107a55760405162461bcd60e51b815260040161062d90613adf565b824311156107b5574386556107b9565b8286555b806107c8838860000154613222565b10156107e65760405162461bcd60e51b815260040161062d90613b16565b6060876001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561082157600080fd5b505afa158015610835573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261085d9190810190613652565b805190915085146108805760405162461bcd60e51b815260040161062d90613b4b565b6000815167ffffffffffffffff8111801561089a57600080fd5b506040519080825280602002602001820160405280156108c4578160200160208202803683370190505b5080516108db9160028b01916020909101906134f2565b5060005b8251811015610a2d576802b5e3af16b18800008888838181106108fe57fe5b9050602002013511156109235760405162461bcd60e51b815260040161062d90613ebb565b670de0b6b3a764000088888381811061093857fe5b90506020020135101561095d5760405162461bcd60e51b815260040161062d90613ddf565b6109798289898481811061096d57fe5b9050602002013561325b565b9150896001600160a01b031663948d8ce684838151811061099657fe5b60200260200101516040518263ffffffff1660e01b81526004016109ba9190613a09565b60206040518083038186803b1580156109d257600080fd5b505afa1580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a91906139b7565b896002018281548110610a1957fe5b6000918252602090912001556001016108df565b506802b5e3af16b1880000811115610a575760405162461bcd60e51b815260040161062d90613c5e565b60018801849055610a6c60038901888861353d565b50505050505050505050565b610a8181613287565b50565b600080606080876001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610ac357600080fd5b505afa158015610ad7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610aff9190810190613652565b80519091508514610b225760405162461bcd60e51b815260040161062d90613c95565b6000896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5d57600080fd5b505afa158015610b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9591906139b7565b9050610ba2886000613112565b9450610bae8886613222565b93506000610bc18561041d84600161325b565b905080610be05760405162461bcd60e51b815260040161062d90613bf0565b825167ffffffffffffffff81118015610bf857600080fd5b50604051908082528060200260200182016040528015610c22578160200160208202803683370190505b50935060005b8351811015610d4e576000848281518110610c3f57fe5b6020026020010151905060008c6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b8152600401610c779190613a09565b60206040518083038186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc791906139b7565b90506000610cda856103a7846001613222565b905080610cf95760405162461bcd60e51b815260040161062d90613bf0565b8b8b85818110610d0557fe5b90506020020135811015610d2b5760405162461bcd60e51b815260040161062d90613ccc565b80888581518110610d3857fe5b6020908102919091010152505050600101610c28565b50505050955095509592505050565b604051630bcded8960e21b81526000906001600160a01b03861690632f37b62490610d8c908790600401613a09565b60206040518083038186803b158015610da457600080fd5b505afa158015610db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddc91906136fd565b610df85760405162461bcd60e51b815260040161062d90613e4d565b60405163f8b2cb4f60e01b81526001600160a01b03861690635c1bbaf790829063f8b2cb4f90610e2c908990600401613a09565b60206040518083038186803b158015610e4457600080fd5b505afa158015610e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7c91906139b7565b604051634a46c67360e11b81526001600160a01b0389169063948d8ce690610ea8908a90600401613a09565b60206040518083038186803b158015610ec057600080fd5b505afa158015610ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef891906139b7565b896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3157600080fd5b505afa158015610f45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6991906139b7565b896001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa257600080fd5b505afa158015610fb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fda91906139b7565b888b6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561101457600080fd5b505afa158015611028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104c91906139b7565b6040518763ffffffff1660e01b815260040161106d969594939291906140e0565b60206040518083038186803b15801561108557600080fd5b505afa158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd91906139b7565b9050806110dc5760405162461bcd60e51b815260040161062d90613bf0565b818111156110fc5760405162461bcd60e51b815260040161062d90613da8565b60405163f8b2cb4f60e01b815261118a906001600160a01b0387169063f8b2cb4f9061112c908890600401613a09565b60206040518083038186803b15801561114457600080fd5b505afa158015611158573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117c91906139b7565b6706f05b59d3b20000613112565b8111156111a95760405162461bcd60e51b815260040161062d90613bb9565b95945050505050565b600080856001600160a01b0316632f37b624866040518263ffffffff1660e01b81526004016111e19190613a09565b60206040518083038186803b1580156111f957600080fd5b505afa15801561120d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123191906136fd565b61124d5760405162461bcd60e51b815260040161062d90613e4d565b60405163f8b2cb4f60e01b81526112db906001600160a01b0388169063f8b2cb4f9061127d908990600401613a09565b60206040518083038186803b15801561129557600080fd5b505afa1580156112a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cd91906139b7565b6704a03ce68d215556613112565b8411156112fa5760405162461bcd60e51b815260040161062d90613e16565b60405163f8b2cb4f60e01b81526001600160a01b038716906382f652ad90829063f8b2cb4f9061132e908a90600401613a09565b60206040518083038186803b15801561134657600080fd5b505afa15801561135a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137e91906139b7565b604051634a46c67360e11b81526001600160a01b038a169063948d8ce6906113aa908b90600401613a09565b60206040518083038186803b1580156113c257600080fd5b505afa1580156113d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fa91906139b7565b8a6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561143357600080fd5b505afa158015611447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146b91906139b7565b8a6001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a457600080fd5b505afa1580156114b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114dc91906139b7565b898c6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561151657600080fd5b505afa15801561152a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154e91906139b7565b6040518763ffffffff1660e01b815260040161156f969594939291906140e0565b60206040518083038186803b15801561158757600080fd5b505afa15801561159b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bf91906139b7565b9050806115de5760405162461bcd60e51b815260040161062d90613bf0565b828111156115fe5760405162461bcd60e51b815260040161062d90613da8565b611609816000613112565b91509550959350505050565b60005b818110156116515761164983838381811061162f57fe5b905060200201602081019061164491906135da565b613287565b600101611618565b505050565b8054611661576119d4565b80544310156116825760405162461bcd60e51b815260040161062d90613d3a565b6000816001015443111561169b5750600181015461169e565b50435b60006116b283600101548460000154613222565b905060006116c4838560000154613222565b905060008060006060886001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561170657600080fd5b505afa15801561171a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117429190810190613652565b905060005b81518110156119bb5788600301818154811061175f57fe5b906000526020600020015489600201828154811061177957fe5b9060005260206000200154146119b35788600201818154811061179857fe5b90600052602060002001548960030182815481106117b257fe5b90600052602060002001541015611840576117ff8960020182815481106117d557fe5b90600052602060002001548a60030183815481106117ef57fe5b9060005260206000200154613222565b945061180b8588613191565b935061183989600201828154811061181f57fe5b90600052602060002001546118348887613112565b613222565b92506118a9565b61186c89600301828154811061185257fe5b90600052602060002001548a60020183815481106117ef57fe5b94506118788588613191565b93506118a689600201828154811061188c57fe5b90600052602060002001546118a18887613112565b61325b565b92505b60008a6001600160a01b031663f8b2cb4f8484815181106118c657fe5b60200260200101516040518263ffffffff1660e01b81526004016118ea9190613a09565b60206040518083038186803b15801561190257600080fd5b505afa158015611916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193a91906139b7565b90508a6001600160a01b0316633fdddaa284848151811061195757fe5b602002602001015183876040518463ffffffff1660e01b815260040161197f93929190613a74565b600060405180830381600087803b15801561199957600080fd5b505af11580156119ad573d6000803e3d6000fd5b50505050505b600101611747565b50876001015443106119cc57600088555b505050505050505b5050565b606080856001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b158015611a1457600080fd5b505afa158015611a28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a509190810190613652565b80519091508314611a735760405162461bcd60e51b815260040161062d90613c95565b6000876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611aae57600080fd5b505afa158015611ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae691906139b7565b90506000611af98761041d846001613222565b905080611b185760405162461bcd60e51b815260040161062d90613bf0565b825167ffffffffffffffff81118015611b3057600080fd5b50604051908082528060200260200182016040528015611b5a578160200160208202803683370190505b50935060005b8351811015611c86576000848281518110611b7757fe5b6020026020010151905060008a6001600160a01b031663f8b2cb4f836040518263ffffffff1660e01b8152600401611baf9190613a09565b60206040518083038186803b158015611bc757600080fd5b505afa158015611bdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bff91906139b7565b90506000611c12856103a784600161325b565b905080611c315760405162461bcd60e51b815260040161062d90613bf0565b898985818110611c3d57fe5b90506020020135811115611c635760405162461bcd60e51b815260040161062d90613da8565b80888581518110611c7057fe5b6020908102919091010152505050600101611b60565b5050505095945050505050565b604051630bcded8960e21b81526001600160a01b03861690632f37b62490611cbf908790600401613a09565b60206040518083038186803b158015611cd757600080fd5b505afa158015611ceb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0f91906136fd565b15611d2c5760405162461bcd60e51b815260040161062d90613b82565b6802b5e3af16b1880000821115611d555760405162461bcd60e51b815260040161062d90613ebb565b670de0b6b3a7640000821015611d7d5760405162461bcd60e51b815260040161062d90613ddf565b670de0b6b3a7640000603202611e03866001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b158015611dc557600080fd5b505afa158015611dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfd91906139b7565b8461325b565b1115611e215760405162461bcd60e51b815260040161062d90613c5e565b64e8d4a51000831015611e465760405162461bcd60e51b815260040161062d90613fce565b805460038201939093556002810191909155436001820155600160a01b7fffffffffffffffffffffffff00000000000000000000000000000000000000009092166001600160a01b03939093169290921760ff60a01b191617905550565b600080856001600160a01b0316632f37b624866040518263ffffffff1660e01b8152600401611ed39190613a09565b60206040518083038186803b158015611eeb57600080fd5b505afa158015611eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2391906136fd565b611f3f5760405162461bcd60e51b815260040161062d90613e4d565b60405163f8b2cb4f60e01b81526001600160a01b03871690638929801290829063f8b2cb4f90611f73908a90600401613a09565b60206040518083038186803b158015611f8b57600080fd5b505afa158015611f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc391906139b7565b604051634a46c67360e11b81526001600160a01b038a169063948d8ce690611fef908b90600401613a09565b60206040518083038186803b15801561200757600080fd5b505afa15801561201b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203f91906139b7565b8a6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561207857600080fd5b505afa15801561208c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b091906139b7565b8a6001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b1580156120e957600080fd5b505afa1580156120fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212191906139b7565b898c6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561215b57600080fd5b505afa15801561216f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219391906139b7565b6040518763ffffffff1660e01b81526004016121b4969594939291906140e0565b60206040518083038186803b1580156121cc57600080fd5b505afa1580156121e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220491906139b7565b9050828110156122265760405162461bcd60e51b815260040161062d90613ccc565b60405163f8b2cb4f60e01b8152612256906001600160a01b0388169063f8b2cb4f9061127d908990600401613a09565b8111156122755760405162461bcd60e51b815260040161062d90613e16565b611609846000613112565b604051630bcded8960e21b81526000906001600160a01b03861690632f37b624906122af908790600401613a09565b60206040518083038186803b1580156122c757600080fd5b505afa1580156122db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ff91906136fd565b61231b5760405162461bcd60e51b815260040161062d90613e4d565b60405163f8b2cb4f60e01b815261234b906001600160a01b0387169063f8b2cb4f9061112c908890600401613a09565b83111561236a5760405162461bcd60e51b815260040161062d90613bb9565b60405163f8b2cb4f60e01b81526001600160a01b03861690638656b65390829063f8b2cb4f9061239e908990600401613a09565b60206040518083038186803b1580156123b657600080fd5b505afa1580156123ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ee91906139b7565b604051634a46c67360e11b81526001600160a01b0389169063948d8ce69061241a908a90600401613a09565b60206040518083038186803b15801561243257600080fd5b505afa158015612446573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246a91906139b7565b896001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124a357600080fd5b505afa1580156124b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124db91906139b7565b896001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b15801561251457600080fd5b505afa158015612528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254c91906139b7565b888b6001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561258657600080fd5b505afa15801561259a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125be91906139b7565b6040518763ffffffff1660e01b81526004016125df969594939291906140e0565b60206040518083038186803b1580156125f757600080fd5b505afa15801561260b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262f91906139b7565b9050818110156111a95760405162461bcd60e51b815260040161062d90613ccc565b8054600160a01b900460ff166126795760405162461bcd60e51b815260040161062d90613aa8565b81612688438360010154613222565b10156126a65760405162461bcd60e51b815260040161062d90613ef2565b6000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126e157600080fd5b505afa1580156126f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271991906139b7565b9050600061276761272e838560020154613112565b866001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e557600080fd5b835460ff60a01b1981168555604080517f3018205f00000000000000000000000000000000000000000000000000000000815290519293506000926001600160a01b03928316926323b872dd92908b1691633018205f91600480820192602092909190829003018186803b1580156127de57600080fd5b505afa1580156127f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281691906135f6565b8987600301546040518463ffffffff1660e01b815260040161283a93929190613a1d565b602060405180830381600087803b15801561285457600080fd5b505af1158015612868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288c91906136fd565b9050806128ab5760405162461bcd60e51b815260040161062d90614005565b83546128c3906001600160a01b031687600019613329565b9050806128e25760405162461bcd60e51b815260040161062d90614005565b8354600385015460028601546040517fe4e1e5380000000000000000000000000000000000000000000000000000000081526001600160a01b03808b169463e4e1e53894612937949190921692600401613a74565b600060405180830381600087803b15801561295157600080fd5b505af1158015612965573d6000803e3d6000fd5b50506040517f4ba578820000000000000000000000000000000000000000000000000000000081526001600160a01b038a169250634ba5788291506129ae9085906004016140aa565b600060405180830381600087803b1580156129c857600080fd5b505af11580156129dc573d6000803e3d6000fd5b50506040517f095dcccc0000000000000000000000000000000000000000000000000000000081526001600160a01b038a16925063095dcccc915061074b9033908690600401613a41565b670de0b6b3a7640000811015612a4f5760405162461bcd60e51b815260040161062d90613e84565b6802b5e3af16b1880000811115612a785760405162461bcd60e51b815260040161062d90613c27565b604051634a46c67360e11b81526000906001600160a01b0385169063948d8ce690612aa7908690600401613a09565b60206040518083038186803b158015612abf57600080fd5b505afa158015612ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af791906139b7565b905081811415612b07575061310c565b60405163f8b2cb4f60e01b81526000906001600160a01b0386169063f8b2cb4f90612b36908790600401613a09565b60206040518083038186803b158015612b4e57600080fd5b505afa158015612b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8691906139b7565b90506000866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bc357600080fd5b505afa158015612bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfb91906139b7565b90506000866001600160a01b031663936c34776040518163ffffffff1660e01b815260040160206040518083038186803b158015612c3857600080fd5b505afa158015612c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7091906139b7565b905060008060008087891015612ed757612c8a888a613222565b9150612c9a866103a78488613191565b9350612caa876103a7848b613191565b9250612cb68784613222565b905064e8d4a51000811015612cdd5760405162461bcd60e51b815260040161062d90613d03565b6040517f3fdddaa20000000000000000000000000000000000000000000000000000000081526001600160a01b038c1690633fdddaa290612d26908d9085908e90600401613a74565b600060405180830381600087803b158015612d4057600080fd5b505af1158015612d54573d6000803e3d6000fd5b505060405163a9059cbb60e01b8152600092506001600160a01b038d16915063a9059cbb90612d899033908890600401613a41565b602060405180830381600087803b158015612da357600080fd5b505af1158015612db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ddb91906136fd565b905080612dfa5760405162461bcd60e51b815260040161062d90614005565b6040517f55c32a230000000000000000000000000000000000000000000000000000000081526001600160a01b038e16906355c32a2390612e419033908990600401613a41565b600060405180830381600087803b158015612e5b57600080fd5b505af1158015612e6f573d6000803e3d6000fd5b505050508c6001600160a01b031663220eb760866040518263ffffffff1660e01b8152600401612e9f91906140aa565b600060405180830381600087803b158015612eb957600080fd5b505af1158015612ecd573d6000803e3d6000fd5b5050505050613103565b612ee18989613222565b91506802b5e3af16b1880000612ef7868461325b565b1115612f155760405162461bcd60e51b815260040161062d90613c5e565b612f23866103a78488613191565b9350612f33876103a7848b613191565b925060008a6001600160a01b03166323b872dd3330876040518463ffffffff1660e01b8152600401612f6793929190613a1d565b602060405180830381600087803b158015612f8157600080fd5b505af1158015612f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb991906136fd565b905080612fd85760405162461bcd60e51b815260040161062d90614005565b8b6001600160a01b0316633fdddaa28c612ff28b8861325b565b8d6040518463ffffffff1660e01b815260040161301193929190613a74565b600060405180830381600087803b15801561302b57600080fd5b505af115801561303f573d6000803e3d6000fd5b505050508c6001600160a01b0316634ba57882866040518263ffffffff1660e01b815260040161306f91906140aa565b600060405180830381600087803b15801561308957600080fd5b505af115801561309d573d6000803e3d6000fd5b505050508c6001600160a01b031663095dcccc33876040518363ffffffff1660e01b81526004016130cf929190613a41565b600060405180830381600087803b1580156130e957600080fd5b505af11580156130fd573d6000803e3d6000fd5b50505050505b50505050505050505b50505050565b6000826131215750600061318b565b8282028284828161312e57fe5b041461314c5760405162461bcd60e51b815260040161062d90613f29565b6706f05b59d3b200008101818110156131775760405162461bcd60e51b815260040161062d90613f29565b6000670de0b6b3a7640000825b0493505050505b92915050565b6000816131b05760405162461bcd60e51b815260040161062d90613f97565b826131bd5750600061318b565b670de0b6b3a7640000838102908482816131d357fe5b04146131f15760405162461bcd60e51b815260040161062d90613d71565b600283048101818110156132175760405162461bcd60e51b815260040161062d90613d71565b600084828161318457fe5b600080600061323185856134cd565b9150915080156132535760405162461bcd60e51b815260040161062d9061403c565b509392505050565b6000828201838110156132805760405162461bcd60e51b815260040161062d90614073565b9392505050565b60405163a9059cbb60e01b81526000906001600160a01b0383169063a9059cbb906132b89033908590600401613a41565b602060405180830381600087803b1580156132d257600080fd5b505af11580156132e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061330a91906136fd565b9050806119d45760405162461bcd60e51b815260040161062d90613f60565b600080846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b815260040161335a929190613a5a565b60206040518083038186803b15801561337257600080fd5b505afa158015613386573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133aa91906139b7565b9050828114156133be576001915050613280565b801561344d5760405163095ea7b360e01b81526001600160a01b0386169063095ea7b3906133f3908790600090600401613a41565b602060405180830381600087803b15801561340d57600080fd5b505af1158015613421573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344591906136fd565b915050613280565b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b39061347b9087908790600401613a41565b602060405180830381600087803b15801561349557600080fd5b505af11580156134a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a991906136fd565b6000808383116134e357505080820360006134eb565b505081810360015b9250929050565b82805482825590600052602060002090810192821561352d579160200282015b8281111561352d578251825591602001919060010190613512565b50613539929150613578565b5090565b82805482825590600052602060002090810192821561352d579160200282015b8281111561352d57823582559160200191906001019061355d565b5b808211156135395760008155600101613579565b805161318b8161412f565b60008083601f8401126135a9578182fd5b50813567ffffffffffffffff8111156135c0578182fd5b60208301915083602080830285010111156134eb57600080fd5b6000602082840312156135eb578081fd5b81356132808161412f565b600060208284031215613607578081fd5b81516132808161412f565b60008060208385031215613624578081fd5b823567ffffffffffffffff81111561363a578182fd5b61364685828601613598565b90969095509350505050565b60006020808385031215613664578182fd5b825167ffffffffffffffff8082111561367b578384fd5b818501915085601f83011261368e578384fd5b81518181111561369c578485fd5b83810291506136ac848301614108565b8181528481019084860184860187018a10156136c6578788fd5b8795505b838610156136f0576136dc8a8261358d565b8352600195909501949186019186016136ca565b5098975050505050505050565b60006020828403121561370e578081fd5b81518015158114613280578182fd5b600080600080600060a08688031215613734578081fd5b853561373f8161412f565b9450602086013561374f8161412f565b94979496505050506040830135926060810135926080909101359150565b6000806040838503121561377f578182fd5b823561378a8161412f565b946020939093013593505050565b600080600080600080600060c0888a0312156137b2578182fd5b87356137bd8161412f565b965060208801359550604088013567ffffffffffffffff8111156137df578283fd5b6137eb8a828b01613598565b989b979a50986060810135976080820135975060a09091013595509350505050565b600080600060608486031215613821578283fd5b833561382c8161412f565b9250602084013561383c8161412f565b9150604084013561384c8161412f565b809150509250925092565b6000806000806080858703121561386c578384fd5b84356138778161412f565b935060208501356138878161412f565b925060408501356138978161412f565b9396929550929360600135925050565b600080600080600060a086880312156138be578283fd5b85356138c98161412f565b945060208601356138d98161412f565b935060408601356138e98161412f565b94979396509394606081013594506080013592915050565b600080600080600060808688031215613918578283fd5b85356139238161412f565b945060208601356139338161412f565b935060408601359250606086013567ffffffffffffffff811115613955578182fd5b61396188828901613598565b969995985093965092949392505050565b60008060008060808587031215613987578182fd5b84356139928161412f565b935060208501356139a28161412f565b93969395505050506040820135916060013590565b6000602082840312156139c8578081fd5b5051919050565b6000815180845260208085019450808401835b838110156139fe578151875295820195908201906001016139e2565b509495945050505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b60006020825261328060208301846139cf565b60208082526013908201527f4552525f4e4f5f544f4b454e5f434f4d4d495400000000000000000000000000604082015260600190565b6020808252601e908201527f4552525f4752414455414c5f5550444154455f54494d455f54524156454c0000604082015260600190565b6020808252818101527f4552525f5745494748545f4348414e47455f54494d455f42454c4f575f4d494e604082015260600190565b6020808252601a908201527f4552525f53544152545f574549474854535f4d49534d41544348000000000000604082015260600190565b6020808252600c908201527f4552525f49535f424f554e440000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f4552525f4d41585f494e5f524154494f00000000000000000000000000000000604082015260600190565b6020808252600f908201527f4552525f4d4154485f415050524f580000000000000000000000000000000000604082015260600190565b6020808252600e908201527f4552525f4d41585f574549474854000000000000000000000000000000000000604082015260600190565b60208082526014908201527f4552525f4d41585f544f54414c5f574549474854000000000000000000000000604082015260600190565b60208082526014908201527f4552525f414d4f554e54535f4d49534d41544348000000000000000000000000604082015260600190565b6020808252600d908201527f4552525f4c494d49545f4f555400000000000000000000000000000000000000604082015260600190565b6020808252600f908201527f4552525f4d494e5f42414c414e43450000000000000000000000000000000000604082015260600190565b60208082526011908201527f4552525f43414e545f504f4b455f594554000000000000000000000000000000604082015260600190565b60208082526010908201527f4552525f4449565f494e5445524e414c00000000000000000000000000000000604082015260600190565b6020808252600c908201527f4552525f4c494d49545f494e0000000000000000000000000000000000000000604082015260600190565b60208082526014908201527f4552525f5745494748545f42454c4f575f4d494e000000000000000000000000604082015260600190565b60208082526011908201527f4552525f4d41585f4f55545f524154494f000000000000000000000000000000604082015260600190565b6020808252600d908201527f4552525f4e4f545f424f554e4400000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f4552525f4d494e5f574549474854000000000000000000000000000000000000604082015260600190565b60208082526014908201527f4552525f5745494748545f41424f56455f4d4158000000000000000000000000604082015260600190565b6020808252601b908201527f4552525f54494d454c4f434b5f5354494c4c5f434f554e54494e470000000000604082015260600190565b60208082526010908201527f4552525f4d554c5f4f564552464c4f5700000000000000000000000000000000604082015260600190565b60208082526017908201527f4552525f4e4f4e434f4e464f524d494e475f544f4b454e000000000000000000604082015260600190565b6020808252600c908201527f4552525f4449565f5a45524f0000000000000000000000000000000000000000604082015260600190565b60208082526015908201527f4552525f42414c414e43455f42454c4f575f4d494e0000000000000000000000604082015260600190565b6020808252600f908201527f4552525f45524332305f46414c53450000000000000000000000000000000000604082015260600190565b60208082526011908201527f4552525f5355425f554e444552464c4f57000000000000000000000000000000604082015260600190565b60208082526010908201527f4552525f4144445f4f564552464c4f5700000000000000000000000000000000604082015260600190565b90815260200190565b918252602082015260400190565b6000848252836020830152606060408301526111a960608301846139cf565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60405181810167ffffffffffffffff8111828210171561412757600080fd5b604052919050565b6001600160a01b0381168114610a8157600080fdfea2646970667358221220568ab577766f754330f320cb0357dbc986dedad7836293ea402553d013b0446964736f6c634300060c0033",
  "devdoc": {
    "author": "Buni Labs",
    "kind": "dev",
    "methods": {
      "applyAddToken(IConfigurableRightsPool,IBPool,uint256,SmartPoolManager.NewTokenParams storage)": {
        "params": {
          "addTokenTimeLockInBlocks": "-  Wait time between committing and applying a new token",
          "bPool": "- Core BPool the CRP is wrapping",
          "newToken": "- NewTokenParams struct used to hold the token data (in CRP storage)",
          "self": "- ConfigurableRightsPool instance calling the library"
        }
      },
      "commitAddToken(IBPool,address,uint256,uint256,SmartPoolManager.NewTokenParams storage)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "balance": "- how much to be added",
          "denormalizedWeight": "- the desired token weight",
          "newToken": "- NewTokenParams struct used to hold the token data (in CRP storage)",
          "token": "- the token to be added"
        }
      },
      "exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "minAmountsOut": "- minimum amount of asset tokens to receive",
          "poolAmountIn": "- amount of pool tokens to redeem",
          "self": "- ConfigurableRightsPool instance calling the library"
        },
        "returns": {
          "actualAmountsOut": "- calculated amounts of each token to pull",
          "exitFee": "- calculated exit fee",
          "pAiAfterExitFee": "- final amount in (after accounting for exit fee)"
        }
      },
      "exitswapExternAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "maxPoolAmountIn": "- maximum pool tokens to be redeemed",
          "self": "- ConfigurableRightsPool instance calling the library",
          "tokenAmountOut": "- amount of underlying asset tokens to receive",
          "tokenOut": "- which token the caller wants to receive"
        },
        "returns": {
          "exitFee": "- calculated exit fee",
          "poolAmountIn": "- amount of pool tokens redeemed"
        }
      },
      "exitswapPoolAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "minAmountOut": "- minimum asset tokens to receive",
          "poolAmountIn": "- amount of pool tokens to redeem",
          "self": "- ConfigurableRightsPool instance calling the library",
          "tokenOut": "- which token the caller wants to receive"
        },
        "returns": {
          "exitFee": "- calculated exit fee",
          "tokenAmountOut": "- amount of asset tokens returned"
        }
      },
      "joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[])": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "maxAmountsIn": "- Max amount of asset tokens to spend",
          "poolAmountOut": "- number of pool tokens to receive",
          "self": "- ConfigurableRightsPool instance calling the library"
        },
        "returns": {
          "actualAmountsIn": "- calculated values of the tokens to pull in"
        }
      },
      "joinswapExternAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "minPoolAmountOut": "- minimum of pool tokens to receive",
          "self": "- ConfigurableRightsPool instance calling the library",
          "tokenAmountIn": "- amount of deposit",
          "tokenIn": "- which token we're transferring in"
        },
        "returns": {
          "poolAmountOut": "- amount of pool tokens minted and transferred"
        }
      },
      "joinswapPoolAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "maxAmountIn": "- Maximum asset tokens that can be pulled to pay for the pool tokens",
          "poolAmountOut": "- amount of pool tokens to be received",
          "self": "- ConfigurableRightsPool instance calling the library",
          "tokenIn": "- which token we're transferring in (system calculates amount required)"
        },
        "returns": {
          "tokenAmountIn": "- amount of asset tokens transferred in to purchase the pool tokens"
        }
      },
      "pokeWeights(IBPool,SmartPoolManager.GradualUpdateParams storage)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "gradualUpdate": "- gradual update parameters from the CRP"
        }
      },
      "removeToken(IConfigurableRightsPool,IBPool,address)": {
        "details": "Logic in the CRP controls when ths can be called. There are two related permissions:      AddRemoveTokens - which allows removing down to the underlying BPool limit of two      RemoveAllTokens - which allows completely draining the pool by removing all tokens                        This can result in a non-viable pool with 0 or 1 tokens (by design),                        meaning all swapping or binding operations would fail in this state",
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "self": "- ConfigurableRightsPool instance calling the library",
          "token": "- token to remove"
        }
      },
      "updateWeight(IConfigurableRightsPool,IBPool,address,uint256)": {
        "details": "Refactored to library to make CRPFactory deployable",
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "newWeight": "- new weight of the token",
          "self": "- ConfigurableRightsPool instance calling the library",
          "token": "- token to be reweighted"
        }
      },
      "updateWeightsGradually(IBPool,SmartPoolManager.GradualUpdateParams storage,uint256[],uint256,uint256,uint256)": {
        "params": {
          "bPool": "- Core BPool the CRP is wrapping",
          "endBlock": "- when weights will be at their final values",
          "minimumWeightChangeBlockPeriod": "- needed to validate the block period",
          "newWeights": "- final weights we want to get to",
          "startBlock": "- when weights should start to change"
        }
      },
      "verifyTokenCompliance(address)": {
        "details": "Will revert if invalid",
        "params": {
          "token": "- The prospective token to verify"
        }
      },
      "verifyTokenCompliance(address[])": {
        "details": "Will revert if invalid - overloaded to save space in the main contract",
        "params": {
          "tokens": "- The prospective tokens to verify"
        }
      }
    },
    "title": "Factor out the weight updates",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "applyAddToken(IConfigurableRightsPool,IBPool,uint256,SmartPoolManager.NewTokenParams storage)": {
        "notice": "Add the token previously committed (in commitAddToken) to the pool"
      },
      "commitAddToken(IBPool,address,uint256,uint256,SmartPoolManager.NewTokenParams storage)": {
        "notice": "Schedule (commit) a token to be added; must call applyAddToken after a fixed         number of blocks to actually add the token"
      },
      "exitPool(IConfigurableRightsPool,IBPool,uint256,uint256[])": {
        "notice": "Exit a pool - redeem pool tokens for underlying assets"
      },
      "exitswapExternAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "notice": "Exit a pool - redeem pool tokens for a specific amount of underlying assets         Asset must be present in the pool"
      },
      "exitswapPoolAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "notice": "Exit a pool - redeem a specific number of pool tokens for an underlying asset         Asset must be present in the pool, and will incur an EXIT_FEE (if set to non-zero)"
      },
      "joinPool(IConfigurableRightsPool,IBPool,uint256,uint256[])": {
        "notice": "Join a pool"
      },
      "joinswapExternAmountIn(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "notice": "Join by swapping a fixed amount of an external token in (must be present in the pool)         System calculates the pool token amount"
      },
      "joinswapPoolAmountOut(IConfigurableRightsPool,IBPool,address,uint256,uint256)": {
        "notice": "Join by swapping an external token in (must be present in the pool)         To receive an exact amount of pool tokens out. System calculates the deposit amount"
      },
      "pokeWeights(IBPool,SmartPoolManager.GradualUpdateParams storage)": {
        "notice": "External function called to make the contract update weights according to plan"
      },
      "removeToken(IConfigurableRightsPool,IBPool,address)": {
        "notice": "Remove a token from the pool"
      },
      "updateWeight(IConfigurableRightsPool,IBPool,address,uint256)": {
        "notice": "Update the weight of an existing token"
      },
      "updateWeightsGradually(IBPool,SmartPoolManager.GradualUpdateParams storage,uint256[],uint256,uint256,uint256)": {
        "notice": "Update weights in a predetermined way, between startBlock and endBlock,         through external cals to pokeWeights"
      },
      "verifyTokenCompliance(address)": {
        "notice": "Non ERC20-conforming tokens are problematic; don't allow them in pools"
      },
      "verifyTokenCompliance(address[])": {
        "notice": "Non ERC20-conforming tokens are problematic; don't allow them in pools"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
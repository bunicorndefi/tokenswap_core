{
  "address": "0x08Dfa7D42685B43AaC3aeDaCDa4eBf1EaD3C8b12",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "LogNewCrp",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isCrp",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "poolTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "poolTokenName",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "constituentTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenBalances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenWeights",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ConfigurableRightsPool.PoolParams",
          "name": "poolParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canPauseSwapping",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeSwapFee",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeWeights",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canAddRemoveTokens",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeCap",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "rights",
          "type": "tuple"
        }
      ],
      "name": "newCrp",
      "outputs": [
        {
          "internalType": "contract ConfigurableRightsPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7386d6aec72c8fdf7968cd6dd04b03a562c74ed224cc0197877ff7e944127898",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "5296095",
    "logsBloom": "0x
    "blockHash": "0xf95d89a44004d1e6f66364aae2ff9bb6eb87a20f596f3bc03ce4ffdb1c3b697e",
    "transactionHash": "0x7386d6aec72c8fdf7968cd6dd04b03a562c74ed224cc0197877ff7e944127898",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "5296095",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "44256da70cc812bee6154882727baa12",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"LogNewCrp\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isCrp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolTokenName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"constituentTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ConfigurableRightsPool.PoolParams\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeCap\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"rights\",\"type\":\"tuple\"}],\"name\":\"newCrp\",\"outputs\":[{\"internalType\":\"contract ConfigurableRightsPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Buni Labs\",\"details\":\"Rights are held in a corresponding struct in ConfigurableRightsPool      Index values are as follows:      0: canPauseSwapping - can setPublicSwap back to false after turning it on                            by default, it is off on initialization and can only be turned on      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)      2: canChangeWeights - can bind new token weights (allowed by default in base pool)      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)      4: canWhitelistLPs - if set, only whitelisted addresses can join pools                           (enables private pools with more than one LP)      5: canChangeCap - can change the BSP cap (max # of pool tokens)\",\"kind\":\"dev\",\"methods\":{\"isCrp(address)\":{\"params\":{\"addr\":\"- address to check\"},\"returns\":{\"_0\":\"boolean indicating whether it is a CRP\"}},\"newCrp(address,(string,string,address[],uint256[],uint256[],uint256),(bool,bool,bool,bool,bool,bool))\":{\"details\":\"emits a LogNewCRP event\",\"params\":{\"factoryAddress\":\"- the BFactory instance used to create the underlying pool\",\"poolParams\":\"- struct containing the names, tokens, weights, balances, and swap fee\",\"rights\":\"- struct of permissions, configuring this CRP instance (see above for definitions)\"}}},\"title\":\"Configurable Rights Pool Factory - create parameterized smart pools\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isCrp(address)\":{\"notice\":\"Check to see if a given address is a CRP\"},\"newCrp(address,(string,string,address[],uint256[],uint256[],uint256),(bool,bool,bool,bool,bool,bool))\":{\"notice\":\"Create a new CRP\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/crp/CRPFactory.sol\":\"CRPFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/crp/CRPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"./ConfigurableRightsPool.sol\\\";\\n\\n// Contracts\\n\\n/**\\n * @author Buni Labs\\n * @title Configurable Rights Pool Factory - create parameterized smart pools\\n * @dev Rights are held in a corresponding struct in ConfigurableRightsPool\\n *      Index values are as follows:\\n *      0: canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                            by default, it is off on initialization and can only be turned on\\n *      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      2: canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      4: canWhitelistLPs - if set, only whitelisted addresses can join pools\\n *                           (enables private pools with more than one LP)\\n *      5: canChangeCap - can change the BSP cap (max # of pool tokens)\\n */\\ncontract CRPFactory {\\n    // State variables\\n\\n    // Keep a list of all Configurable Rights Pools\\n    mapping(address=>bool) private _isCrp;\\n\\n    // Event declarations\\n\\n    // Log the address of each new smart pool, and its creator\\n    event LogNewCrp(\\n        address indexed caller,\\n        address indexed pool\\n    );\\n\\n    // Function declarations\\n\\n    /**\\n     * @notice Create a new CRP\\n     * @dev emits a LogNewCRP event\\n     * @param factoryAddress - the BFactory instance used to create the underlying pool\\n     * @param poolParams - struct containing the names, tokens, weights, balances, and swap fee\\n     * @param rights - struct of permissions, configuring this CRP instance (see above for definitions)\\n     */\\n    function newCrp(\\n        address factoryAddress,\\n        ConfigurableRightsPool.PoolParams calldata poolParams,\\n        RightsManager.Rights calldata rights\\n    )\\n        external\\n        returns (ConfigurableRightsPool)\\n    {\\n        require(poolParams.constituentTokens.length >= BuniConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n\\n        // Arrays must be parallel\\n        require(poolParams.tokenBalances.length == poolParams.constituentTokens.length, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(poolParams.tokenWeights.length == poolParams.constituentTokens.length, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n\\n        ConfigurableRightsPool crp = new ConfigurableRightsPool(\\n            factoryAddress,\\n            poolParams,\\n            rights\\n        );\\n\\n        emit LogNewCrp(msg.sender, address(crp));\\n\\n        _isCrp[address(crp)] = true;\\n        // The caller is the controller of the CRP\\n        // The CRP will be the controller of the underlying Core BPool\\n        crp.setController(msg.sender);\\n\\n        return crp;\\n    }\\n\\n    /**\\n     * @notice Check to see if a given address is a CRP\\n     * @param addr - address to check\\n     * @return boolean indicating whether it is a CRP\\n     */\\n    function isCrp(address addr) external view returns (bool) {\\n        return _isCrp[addr];\\n    }\\n}\\n\",\"keccak256\":\"0x5aa139eebd461ccace98f4a71b5998b516bc525e214ad79e392be7f50b9e3c38\",\"license\":\"GPL-3.0-or-later\"},\"contracts/crp/ConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IBFactory.sol\\\";\\nimport \\\"../utils/PCToken.sol\\\";\\nimport \\\"../utils/BuniReentrancyGuard.sol\\\";\\nimport \\\"../utils/BuniOwnable.sol\\\";\\n\\n// Interfaces\\n\\n// Libraries\\nimport { RightsManager } from \\\"../utils/RightsManager.sol\\\";\\nimport \\\"../utils/SmartPoolManager.sol\\\";\\nimport \\\"../utils/SafeApprove.sol\\\";\\n\\n// Contracts\\n\\n/**\\n * @author Buni Labs\\n * @title Smart Pool with customizable features\\n * @notice PCToken is the \\\"Buni Smart Pool\\\" token (transferred upon finalization)\\n * @dev Rights are defined as follows (index values into the array)\\n *      0: canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                            by default, it is off on initialization and can only be turned on\\n *      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      2: canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      4: canWhitelistLPs - can restrict LPs to a whitelist\\n *      5: canChangeCap - can change the BSP cap (max # of pool tokens)\\n *\\n * Note that functions called on bPool and bFactory may look like internal calls,\\n *   but since they are contracts accessed through an interface, they are really external.\\n * To make this explicit, we could write \\\"IBPool(address(bPool)).function()\\\" everywhere,\\n *   instead of \\\"bPool.function()\\\".\\n */\\ncontract ConfigurableRightsPool is PCToken, BuniOwnable, BuniReentrancyGuard {\\n    using BuniSafeMath for uint;\\n    using SafeApprove for IERC20;\\n\\n    // Type declarations\\n\\n    struct PoolParams {\\n        // Buni Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n    }\\n\\n    // State variables\\n\\n    IBFactory public bFactory;\\n    IBPool public bPool;\\n\\n    // Struct holding the rights configuration\\n    RightsManager.Rights public rights;\\n\\n    // Hold the parameters used in updateWeightsGradually\\n    SmartPoolManager.GradualUpdateParams public gradualUpdate;\\n\\n    // This is for adding a new (currently unbound) token to the pool\\n    // It's a two-step process: commitAddToken(), then applyAddToken()\\n    SmartPoolManager.NewTokenParams public newToken;\\n\\n    // Fee is initialized on creation, and can be changed if permission is set\\n    // Only needed for temporary storage between construction and createPool\\n    // Thereafter, the swap fee should always be read from the underlying pool\\n    uint private _initialSwapFee;\\n\\n    // Store the list of tokens in the pool, and balances\\n    // NOTE that the token list is *only* used to store the pool tokens between\\n    //   construction and createPool - thereafter, use the underlying BPool's list\\n    //   (avoids synchronization issues)\\n    address[] private _initialTokens;\\n    uint[] private _initialBalances;\\n\\n    // Enforce a minimum time between the start and end blocks\\n    uint public minimumWeightChangeBlockPeriod;\\n    // Enforce a mandatory wait time between updates\\n    // This is also the wait time between committing and applying a new token\\n    uint public addTokenTimeLockInBlocks;\\n\\n    // Whitelist of LPs (if configured)\\n    mapping(address => bool) private _liquidityProviderWhitelist;\\n\\n    // Cap on the pool size (i.e., # of tokens minted when joining)\\n    // Limits the risk of experimental pools; failsafe/backup for fixed-size pools\\n    uint public bspCap;\\n\\n    // Event declarations\\n\\n    // Anonymous logger event - can only be filtered by contract address\\n\\n    event LogCall(\\n        bytes4  indexed sig,\\n        address indexed caller,\\n        bytes data\\n    ) anonymous;\\n\\n    event LogJoin(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        uint tokenAmountIn\\n    );\\n\\n    event LogExit(\\n        address indexed caller,\\n        address indexed tokenOut,\\n        uint tokenAmountOut\\n    );\\n\\n    event CapChanged(\\n        address indexed caller,\\n        uint oldCap,\\n        uint newCap\\n    );\\n    \\n    event NewTokenCommitted(\\n        address indexed token,\\n        address indexed pool,\\n        address indexed caller\\n    );\\n\\n    // Modifiers\\n\\n    modifier logs() {\\n        emit LogCall(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n\\n    // Mark functions that require delegation to the underlying Pool\\n    modifier needsBPool() {\\n        require(address(bPool) != address(0), \\\"ERR_NOT_CREATED\\\");\\n        _;\\n    }\\n\\n    modifier lockUnderlyingPool() {\\n        // Turn off swapping on the underlying pool during joins\\n        // Otherwise tokens with callbacks would enable attacks involving simultaneous swaps and joins\\n        bool origSwapState = bPool.isPublicSwap();\\n        bPool.setPublicSwap(false);\\n        _;\\n        bPool.setPublicSwap(origSwapState);\\n    }\\n\\n    // Default values for these variables (used only in updateWeightsGradually), set in the constructor\\n    // Pools without permission to update weights cannot use them anyway, and should call\\n    //   the default createPool() function.\\n    // To override these defaults, pass them into the overloaded createPool()\\n    // Period is in blocks; 500 blocks ~ 2 hours; 90,000 blocks ~ 2 weeks\\n    uint public constant DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD = 90000;\\n    uint public constant DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS = 500;\\n\\n    // Function declarations\\n\\n    /**\\n     * @notice Construct a new Configurable Rights Pool (wrapper around BPool)\\n     * @dev _initialTokens and _swapFee are only used for temporary storage between construction\\n     *      and create pool, and should not be used thereafter! _initialTokens is destroyed in\\n     *      createPool to prevent this, and _swapFee is kept in sync (defensively), but\\n     *      should never be used except in this constructor and createPool()\\n     * @param factoryAddress - the KPoolFactory used to create the underlying pool\\n     * @param poolParams - struct containing pool parameters\\n     * @param rightsStruct - Set of permissions we are assigning to this smart pool\\n     */\\n    constructor(\\n        address factoryAddress,\\n        PoolParams memory poolParams,\\n        RightsManager.Rights memory rightsStruct\\n    )\\n        public\\n        PCToken(poolParams.poolTokenSymbol, poolParams.poolTokenName)\\n    {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(poolParams.swapFee >= BuniConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(poolParams.swapFee <= BuniConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(poolParams.tokenBalances.length == poolParams.constituentTokens.length, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(poolParams.tokenWeights.length == poolParams.constituentTokens.length, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(poolParams.constituentTokens.length >= BuniConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(poolParams.constituentTokens.length <= BuniConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n\\n        SmartPoolManager.verifyTokenCompliance(poolParams.constituentTokens);\\n\\n        bFactory = IBFactory(factoryAddress);\\n        rights = rightsStruct;\\n        _initialTokens = poolParams.constituentTokens;\\n        _initialBalances = poolParams.tokenBalances;\\n        _initialSwapFee = poolParams.swapFee;\\n\\n        // These default block time parameters can be overridden in createPool\\n        minimumWeightChangeBlockPeriod = DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD;\\n        addTokenTimeLockInBlocks = DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS;\\n        \\n        gradualUpdate.startWeights = poolParams.tokenWeights;\\n        // Initializing (unnecessarily) for documentation - 0 means no gradual weight change has been initiated\\n        gradualUpdate.startBlock = 0;\\n        // By default, there is no cap (unlimited pool token minting)\\n        bspCap = BuniConstants.MAX_UINT;\\n    }\\n\\n    // External functions\\n\\n    /**\\n     * @notice Set the swap fee on the underlying pool\\n     * @dev Keep the local version and core in sync (see below)\\n     *      bPool is a contract interface; function calls on it are external\\n     * @param swapFee in Wei\\n     */\\n    function setSwapFee(uint swapFee)\\n        external\\n        logs\\n        lock\\n        onlyOwner\\n        needsBPool\\n        virtual\\n    {\\n        require(rights.canChangeSwapFee, \\\"ERR_NOT_CONFIGURABLE_SWAP_FEE\\\");\\n\\n        // Underlying pool will check against min/max fee\\n        bPool.setSwapFee(swapFee);\\n    }\\n\\n    /**\\n     * @notice Getter for the publicSwap field on the underlying pool\\n     * @dev viewLock, because setPublicSwap is lock\\n     *      bPool is a contract interface; function calls on it are external\\n     * @return Current value of isPublicSwap\\n     */\\n    function isPublicSwap()\\n        external\\n        view\\n        viewlock\\n        needsBPool\\n        virtual\\n        returns (bool)\\n    {\\n        return bPool.isPublicSwap();\\n    }\\n\\n    /**\\n     * @notice Set the cap (max # of pool tokens)\\n     * @dev _bspCap defaults in the constructor to unlimited\\n     *      Can set to 0 (or anywhere below the current supply), to halt new investment\\n     *      Prevent setting it before creating a pool, since createPool sets to intialSupply\\n     *      (it does this to avoid an unlimited cap window between construction and createPool)\\n     *      Therefore setting it before then has no effect, so should not be allowed\\n     * @param newCap - new value of the cap\\n     */\\n    function setCap(uint newCap)\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        onlyOwner\\n    {\\n        require(rights.canChangeCap, \\\"ERR_CANNOT_CHANGE_CAP\\\");\\n\\n        emit CapChanged(msg.sender, bspCap, newCap);\\n\\n        bspCap = newCap;\\n    }\\n\\n    /**\\n     * @notice Set the public swap flag on the underlying pool\\n     * @dev If this smart pool has canPauseSwapping enabled, we can turn publicSwap off if it's already on\\n     *      Note that if they turn swapping off - but then finalize the pool - finalizing will turn the\\n     *      swapping back on. They're not supposed to finalize the underlying pool... would defeat the\\n     *      smart pool functions. (Only the owner can finalize the pool - which is this contract -\\n     *      so there is no risk from outside.)\\n     *\\n     *      bPool is a contract interface; function calls on it are external\\n     * @param publicSwap new value of the swap\\n     */\\n    function setPublicSwap(bool publicSwap)\\n        external\\n        logs\\n        lock\\n        onlyOwner\\n        needsBPool\\n        virtual\\n    {\\n        require(rights.canPauseSwapping, \\\"ERR_NOT_PAUSABLE_SWAP\\\");\\n\\n        bPool.setPublicSwap(publicSwap);\\n    }\\n\\n    /**\\n     * @notice Create a new Smart Pool - and set the block period time parameters\\n     * @dev Initialize the swap fee to the value provided in the CRP constructor\\n     *      Can be changed if the canChangeSwapFee permission is enabled\\n     *      Time parameters will be fixed at these values\\n     *\\n     *      If this contract doesn't have canChangeWeights permission - or you want to use the default\\n     *      values, the block time arguments are not needed, and you can just call the single-argument\\n     *      createPool()\\n     * @param initialSupply - Starting token balance\\n     * @param minimumWeightChangeBlockPeriodParam - Enforce a minimum time between the start and end blocks\\n     * @param addTokenTimeLockInBlocksParam - Enforce a mandatory wait time between updates\\n     *                                   This is also the wait time between committing and applying a new token\\n     */\\n    function createPool(\\n        uint initialSupply,\\n        uint minimumWeightChangeBlockPeriodParam,\\n        uint addTokenTimeLockInBlocksParam\\n    )\\n        external\\n        onlyOwner\\n        logs\\n        lock\\n        virtual\\n    {\\n        require (minimumWeightChangeBlockPeriodParam >= addTokenTimeLockInBlocksParam,\\n                \\\"ERR_INCONSISTENT_TOKEN_TIME_LOCK\\\");\\n \\n        minimumWeightChangeBlockPeriod = minimumWeightChangeBlockPeriodParam;\\n        addTokenTimeLockInBlocks = addTokenTimeLockInBlocksParam;\\n\\n        createPoolInternal(initialSupply);\\n    }\\n\\n    /**\\n     * @notice Create a new Smart Pool\\n     * @dev Delegates to internal function\\n     * @param initialSupply starting token balance\\n     */\\n    function createPool(uint initialSupply)\\n        external\\n        onlyOwner\\n        logs\\n        lock\\n        virtual\\n    {\\n        createPoolInternal(initialSupply);\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Notice Balance is not an input (like with rebind on BPool) since we will require prices not to change\\n     *      This is achieved by forcing balances to change proportionally to weights, so that prices don't change\\n     *      If prices could be changed, this would allow the controller to drain the pool by arbing price changes\\n     * @param token - token to be reweighted\\n     * @param newWeight - new weight of the token\\n    */\\n    function updateWeight(address token, uint newWeight)\\n        external\\n        logs\\n        lock\\n        onlyOwner\\n        needsBPool\\n        virtual\\n    {\\n        require(rights.canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n\\n        // We don't want people to set weights manually if there's a block-based update in progress\\n        require(gradualUpdate.startBlock == 0, \\\"ERR_NO_UPDATE_DURING_GRADUAL\\\");\\n\\n        // Delegate to library to save space\\n        SmartPoolManager.updateWeight(IConfigurableRightsPool(address(this)), bPool, token, newWeight);\\n    }\\n\\n    /**\\n     * @notice Update weights in a predetermined way, between startBlock and endBlock,\\n     *         through external calls to pokeWeights\\n     * @dev Must call pokeWeights at least once past the end for it to do the final update\\n     *      and enable calling this again.\\n     *      It is possible to call updateWeightsGradually during an update in some use cases\\n     *      For instance, setting newWeights to currentWeights to stop the update where it is\\n     * @param newWeights - final weights we want to get to. Note that the ORDER (and number) of\\n     *                     tokens can change if you have added or removed tokens from the pool\\n     *                     It ensures the counts are correct, but can't help you with the order!\\n     *                     You can get the underlying BPool (it's public), and call \\n     *                     getCurrentTokens() to see the current ordering, if you're not sure\\n     * @param startBlock - when weights should start to change\\n     * @param endBlock - when weights will be at their final values\\n    */\\n    function updateWeightsGradually(\\n        uint[] calldata newWeights,\\n        uint startBlock,\\n        uint endBlock\\n    )\\n        external\\n        logs\\n        lock\\n        onlyOwner\\n        needsBPool\\n        virtual\\n    {\\n        require(rights.canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n         // Don't start this when we're in the middle of adding a new token\\n        require(!newToken.isCommitted, \\\"ERR_PENDING_TOKEN_ADD\\\");\\n        \\n        // Library computes the startBlock, computes startWeights as the current\\n        // denormalized weights of the core pool tokens.\\n        SmartPoolManager.updateWeightsGradually(\\n            bPool,\\n            gradualUpdate,\\n            newWeights,\\n            startBlock,\\n            endBlock,\\n            minimumWeightChangeBlockPeriod\\n        );\\n    }\\n\\n    /**\\n     * @notice External function called to make the contract update weights according to plan\\n     * @dev Still works if we poke after the end of the period; also works if the weights don't change\\n     *      Resets if we are poking beyond the end, so that we can do it again\\n    */\\n    function pokeWeights()\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        virtual\\n    {\\n        require(rights.canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n\\n        // Delegate to library to save space\\n        SmartPoolManager.pokeWeights(bPool, gradualUpdate);\\n    }\\n\\n    /**\\n     * @notice Schedule (commit) a token to be added; must call applyAddToken after a fixed\\n     *         number of blocks to actually add the token\\n     *\\n     * @dev The purpose of this two-stage commit is to give warning of a potentially dangerous\\n     *      operation. A malicious pool operator could add a large amount of a low-value token,\\n     *      then drain the pool through price manipulation. Of course, there are many\\n     *      legitimate purposes, such as adding additional collateral tokens.\\n     *\\n     * @param token - the token to be added\\n     * @param balance - how much to be added\\n     * @param denormalizedWeight - the desired token weight\\n     */\\n    function commitAddToken(\\n        address token,\\n        uint balance,\\n        uint denormalizedWeight\\n    )\\n        external\\n        logs\\n        lock\\n        onlyOwner\\n        needsBPool\\n        virtual\\n    {\\n        require(rights.canAddRemoveTokens, \\\"ERR_CANNOT_ADD_REMOVE_TOKENS\\\");\\n\\n        // Can't do this while a progressive update is happening\\n        require(gradualUpdate.startBlock == 0, \\\"ERR_NO_UPDATE_DURING_GRADUAL\\\");\\n\\n        SmartPoolManager.verifyTokenCompliance(token);\\n\\n        emit NewTokenCommitted(token, address(this), msg.sender);\\n\\n        // Delegate to library to save space\\n        SmartPoolManager.commitAddToken(\\n            bPool,\\n            token,\\n            balance,\\n            denormalizedWeight,\\n            newToken\\n        );\\n    }\\n\\n    /**\\n     * @notice Add the token previously committed (in commitAddToken) to the pool\\n     */\\n    function applyAddToken()\\n        external\\n        logs\\n        lock\\n        onlyOwner\\n        needsBPool\\n        virtual\\n    {\\n        require(rights.canAddRemoveTokens, \\\"ERR_CANNOT_ADD_REMOVE_TOKENS\\\");\\n\\n        // Delegate to library to save space\\n        SmartPoolManager.applyAddToken(\\n            IConfigurableRightsPool(address(this)),\\n            bPool,\\n            addTokenTimeLockInBlocks,\\n            newToken\\n        );\\n    }\\n\\n     /**\\n     * @notice Remove a token from the pool\\n     * @dev bPool is a contract interface; function calls on it are external\\n     * @param token - token to remove\\n     */\\n    function removeToken(address token)\\n        external\\n        logs\\n        lock\\n        onlyOwner\\n        needsBPool\\n    {\\n        // It's possible to have remove rights without having add rights\\n        require(rights.canAddRemoveTokens,\\\"ERR_CANNOT_ADD_REMOVE_TOKENS\\\");\\n        // After createPool, token list is maintained in the underlying BPool\\n        require(!newToken.isCommitted, \\\"ERR_REMOVE_WITH_ADD_PENDING\\\");\\n        // Prevent removing during an update (or token lists can get out of sync)\\n        require(gradualUpdate.startBlock == 0, \\\"ERR_NO_UPDATE_DURING_GRADUAL\\\");\\n\\n        // Delegate to library to save space\\n        SmartPoolManager.removeToken(IConfigurableRightsPool(address(this)), bPool, token);\\n    } \\n\\n    /**\\n     * @notice Join a pool\\n     * @dev Emits a LogJoin event (for each token)\\n     *      bPool is a contract interface; function calls on it are external\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     */\\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn)\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        lockUnderlyingPool\\n    {\\n        require(!rights.canWhitelistLPs || _liquidityProviderWhitelist[msg.sender],\\n                \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        // Delegate to library to save space\\n\\n        // Library computes actualAmountsIn, and does many validations\\n        // Cannot call the push/pull/min from an external library for\\n        // any of these pool functions. Since msg.sender can be anybody,\\n        // they must be internal\\n        uint[] memory actualAmountsIn = SmartPoolManager.joinPool(\\n                                            IConfigurableRightsPool(address(this)),\\n                                            bPool,\\n                                            poolAmountOut,\\n                                            maxAmountsIn\\n                                        );\\n\\n        // After createPool, token list is maintained in the underlying BPool\\n        address[] memory poolTokens = bPool.getCurrentTokens();\\n\\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenAmountIn = actualAmountsIn[i];\\n\\n            emit LogJoin(msg.sender, t, tokenAmountIn);\\n\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\n        }\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @dev Emits a LogExit event for each token\\n     *      bPool is a contract interface; function calls on it are external\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     */\\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut)\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        lockUnderlyingPool\\n    {\\n        // Delegate to library to save space\\n\\n        // Library computes actualAmountsOut, and does many validations\\n        // Also computes the exitFee and pAiAfterExitFee\\n        (uint exitFee,\\n         uint pAiAfterExitFee,\\n         uint[] memory actualAmountsOut) = SmartPoolManager.exitPool(\\n                                               IConfigurableRightsPool(address(this)),\\n                                               bPool,\\n                                               poolAmountIn,\\n                                               minAmountsOut\\n                                           );\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _pushPoolShare(address(bFactory), exitFee);\\n        _burnPoolShare(pAiAfterExitFee);\\n\\n        // After createPool, token list is maintained in the underlying BPool\\n        address[] memory poolTokens = bPool.getCurrentTokens();\\n\\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenAmountOut = actualAmountsOut[i];\\n\\n            emit LogExit(msg.sender, t, tokenAmountOut);\\n\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\n        }\\n    }\\n\\n    /**\\n     * @notice Join by swapping a fixed amount of an external token in (must be present in the pool)\\n     *         System calculates the pool token amount\\n     * @dev emits a LogJoin event\\n     * @param tokenIn - which token we're transferring in\\n     * @param tokenAmountIn - amount of deposit\\n     * @param minPoolAmountOut - minimum of pool tokens to receive\\n     * @return poolAmountOut - amount of pool tokens minted and transferred\\n     */\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint tokenAmountIn,\\n        uint minPoolAmountOut\\n    )\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        returns (uint poolAmountOut)\\n    {\\n        require(!rights.canWhitelistLPs || _liquidityProviderWhitelist[msg.sender],\\n                \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        // Delegate to library to save space\\n        poolAmountOut = SmartPoolManager.joinswapExternAmountIn(\\n                            IConfigurableRightsPool(address(this)),\\n                            bPool,\\n                            tokenIn,\\n                            tokenAmountIn,\\n                            minPoolAmountOut\\n                        );\\n\\n        emit LogJoin(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return poolAmountOut;\\n    }\\n\\n    /**\\n     * @notice Join by swapping an external token in (must be present in the pool)\\n     *         To receive an exact amount of pool tokens out. System calculates the deposit amount\\n     * @dev emits a LogJoin event\\n     * @param tokenIn - which token we're transferring in (system calculates amount required)\\n     * @param poolAmountOut - amount of pool tokens to be received\\n     * @param maxAmountIn - Maximum asset tokens that can be pulled to pay for the pool tokens\\n     * @return tokenAmountIn - amount of asset tokens transferred in to purchase the pool tokens\\n     */\\n    function joinswapPoolAmountOut(\\n        address tokenIn,\\n        uint poolAmountOut,\\n        uint maxAmountIn\\n    )\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        returns (uint tokenAmountIn)\\n    {\\n        require(!rights.canWhitelistLPs || _liquidityProviderWhitelist[msg.sender],\\n                \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        // Delegate to library to save space\\n        tokenAmountIn = SmartPoolManager.joinswapPoolAmountOut(\\n                            IConfigurableRightsPool(address(this)),\\n                            bPool,\\n                            tokenIn,\\n                            poolAmountOut,\\n                            maxAmountIn\\n                        );\\n\\n        emit LogJoin(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return tokenAmountIn;\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem a specific number of pool tokens for an underlying asset\\n     *         Asset must be present in the pool, and will incur an EXIT_FEE (if set to non-zero)\\n     * @dev Emits a LogExit event for the token\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountOut - minimum asset tokens to receive\\n     * @return tokenAmountOut - amount of asset tokens returned\\n     */\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint poolAmountIn,\\n        uint minAmountOut\\n    )\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        returns (uint tokenAmountOut)\\n    {\\n        // Delegate to library to save space\\n\\n        // Calculates final amountOut, and the fee and final amount in\\n        (uint exitFee,\\n         uint amountOut) = SmartPoolManager.exitswapPoolAmountIn(\\n                               IConfigurableRightsPool(address(this)),\\n                               bPool,\\n                               tokenOut,\\n                               poolAmountIn,\\n                               minAmountOut\\n                           );\\n\\n        tokenAmountOut = amountOut;\\n        uint pAiAfterExitFee = BuniSafeMath.bsub(poolAmountIn, exitFee);\\n\\n        emit LogExit(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(pAiAfterExitFee);\\n        _pushPoolShare(address(bFactory), exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return tokenAmountOut;\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for a specific amount of underlying assets\\n     *         Asset must be present in the pool\\n     * @dev Emits a LogExit event for the token\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param tokenAmountOut - amount of underlying asset tokens to receive\\n     * @param maxPoolAmountIn - maximum pool tokens to be redeemed\\n     * @return poolAmountIn - amount of pool tokens redeemed\\n     */\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint tokenAmountOut,\\n        uint maxPoolAmountIn\\n    )\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        returns (uint poolAmountIn)\\n    {\\n        // Delegate to library to save space\\n\\n        // Calculates final amounts in, accounting for the exit fee\\n        (uint exitFee,\\n         uint amountIn) = SmartPoolManager.exitswapExternAmountOut(\\n                              IConfigurableRightsPool(address(this)),\\n                              bPool,\\n                              tokenOut,\\n                              tokenAmountOut,\\n                              maxPoolAmountIn\\n                          );\\n\\n        poolAmountIn = amountIn;\\n        uint pAiAfterExitFee = BuniSafeMath.bsub(poolAmountIn, exitFee);\\n\\n        emit LogExit(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(pAiAfterExitFee);\\n        _pushPoolShare(address(bFactory), exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n        \\n        return poolAmountIn;\\n    }\\n\\n    /**\\n     * @notice Add to the whitelist of liquidity providers (if enabled)\\n     * @param provider - address of the liquidity provider\\n     */\\n    function whitelistLiquidityProvider(address provider)\\n        external\\n        onlyOwner\\n        lock\\n        logs\\n    {\\n        require(rights.canWhitelistLPs, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(provider != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n\\n        _liquidityProviderWhitelist[provider] = true;\\n    }\\n\\n    /**\\n     * @notice Remove from the whitelist of liquidity providers (if enabled)\\n     * @param provider - address of the liquidity provider\\n     */\\n    function removeWhitelistedLiquidityProvider(address provider)\\n        external\\n        onlyOwner\\n        lock\\n        logs\\n    {\\n        require(rights.canWhitelistLPs, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(_liquidityProviderWhitelist[provider], \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(provider != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n\\n        _liquidityProviderWhitelist[provider] = false;\\n    }\\n\\n    /**\\n     * @notice Check if an address is a liquidity provider\\n     * @dev If the whitelist feature is not enabled, anyone can provide liquidity (assuming finalized)\\n     * @return boolean value indicating whether the address can join a pool\\n     */\\n    function canProvideLiquidity(address provider)\\n        external\\n        view\\n        returns(bool)\\n    {\\n        if (rights.canWhitelistLPs) {\\n            return _liquidityProviderWhitelist[provider];\\n        }\\n        else {\\n            // Probably don't strictly need this (could just return true)\\n            // But the null address can't provide funds\\n            return provider != address(0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter for specific permissions\\n     * @dev value of the enum is just the 0-based index in the enumeration\\n     *      For instance canPauseSwapping is 0; canChangeWeights is 2\\n     * @return token boolean true if we have the given permission\\n    */\\n    function hasPermission(RightsManager.Permissions permission)\\n        external\\n        view\\n        virtual\\n        returns(bool)\\n    {\\n        return RightsManager.hasPermission(rights, permission);\\n    }\\n\\n    /**\\n     * @notice Get the denormalized weight of a token\\n     * @dev viewlock to prevent calling if it's being updated\\n     * @return token weight\\n     */\\n    function getDenormalizedWeight(address token)\\n        external\\n        view\\n        viewlock\\n        needsBPool\\n        returns (uint)\\n    {\\n        return bPool.getDenormalizedWeight(token);\\n    }\\n\\n    /**\\n     * @notice Getter for the RightsManager contract\\n     * @dev Convenience function to get the address of the RightsManager library (so clients can check version)\\n     * @return address of the RightsManager library\\n    */\\n    function getRightsManagerVersion() external pure returns (address) {\\n        return address(RightsManager);\\n    }\\n\\n    /**\\n     * @notice Getter for the BuniSafeMath contract\\n     * @dev Convenience function to get the address of the BuniSafeMath library (so clients can check version)\\n     * @return address of the BuniSafeMath library\\n    */\\n    function getBuniSafeMathVersion() external pure returns (address) {\\n        return address(BuniSafeMath);\\n    }\\n\\n    /**\\n     * @notice Getter for the SmartPoolManager contract\\n     * @dev Convenience function to get the address of the SmartPoolManager library (so clients can check version)\\n     * @return address of the SmartPoolManager library\\n    */\\n    function getSmartPoolManagerVersion() external pure returns (address) {\\n        return address(SmartPoolManager);\\n    }\\n\\n    // Public functions\\n\\n    // \\\"Public\\\" versions that can safely be called from SmartPoolManager\\n    // Allows only the contract itself to call them (not the controller or any external account)\\n\\n    function mintPoolShareFromLib(uint amount) public {\\n        require (msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _mint(amount);\\n    }\\n\\n    function pushPoolShareFromLib(address to, uint amount) public {\\n        require (msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _push(to, amount);\\n    }\\n\\n    function pullPoolShareFromLib(address from, uint amount) public  {\\n        require (msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _pull(from, amount);\\n    }\\n\\n    function burnPoolShareFromLib(uint amount) public  {\\n        require (msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _burn(amount);\\n    }\\n\\n    // Internal functions\\n\\n    // Lint wants the function to have a leading underscore too\\n    /* solhint-disable private-vars-leading-underscore */\\n\\n    /**\\n     * @notice Create a new Smart Pool\\n     * @dev Initialize the swap fee to the value provided in the CRP constructor\\n     *      Can be changed if the canChangeSwapFee permission is enabled\\n     * @param initialSupply starting token balance\\n     */\\n    function createPoolInternal(uint initialSupply) internal {\\n        require(address(bPool) == address(0), \\\"ERR_IS_CREATED\\\");\\n        require(initialSupply >= BuniConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= BuniConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n\\n        // If the controller can change the cap, initialize it to the initial supply\\n        // Defensive programming, so that there is no gap between creating the pool\\n        // (initialized to unlimited in the constructor), and setting the cap,\\n        // which they will presumably do if they have this right.\\n        if (rights.canChangeCap) {\\n            bspCap = initialSupply;\\n        }\\n\\n        // There is technically reentrancy here, since we're making external calls and\\n        // then transferring tokens. However, the external calls are all to the underlying BPool\\n\\n        // To the extent possible, modify state variables before calling functions\\n        _mintPoolShare(initialSupply);\\n        _pushPoolShare(msg.sender, initialSupply);\\n\\n        // Deploy new BPool (bFactory and bPool are interfaces; all calls are external)\\n        bPool = bFactory.newBPool();\\n\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        require(BuniConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n\\n        for (uint i = 0; i < _initialTokens.length; i++) {\\n            address t = _initialTokens[i];\\n            uint bal = _initialBalances[i];\\n            uint denorm = gradualUpdate.startWeights[i];\\n\\n            bool returnValue = IERC20(t).transferFrom(msg.sender, address(this), bal);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n            returnValue = IERC20(t).safeApprove(address(bPool), BuniConstants.MAX_UINT);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n            bPool.bind(t, bal, denorm);\\n        }\\n\\n        while (_initialTokens.length > 0) {\\n            // Modifying state variable after external calls here,\\n            // but not essential, so not dangerous\\n            _initialTokens.pop();\\n        }\\n\\n        // Set fee to the initial value set in the constructor\\n        // Hereafter, read the swapFee from the underlying pool, not the local state variable\\n        bPool.setSwapFee(_initialSwapFee);\\n        bPool.setPublicSwap(true);\\n\\n        // \\\"destroy\\\" the temporary swap fee (like _initialTokens above) in case a subclass tries to use it\\n        _initialSwapFee = 0;\\n    }\\n\\n    /* solhint-enable private-vars-leading-underscore */\\n\\n    // Rebind BPool and pull tokens from address\\n    // bPool is a contract interface; function calls on it are external\\n    function _pullUnderlying(address erc20, address from, uint amount) internal needsBPool {\\n        // Gets current Balance of token i, Bi, and weight of token i, Wi, from BPool.\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n\\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n        bPool.rebind(erc20, BuniSafeMath.badd(tokenBalance, amount), tokenWeight);\\n    }\\n\\n    // Rebind BPool and push tokens to address\\n    // bPool is a contract interface; function calls on it are external\\n    function _pushUnderlying(address erc20, address to, uint amount) internal needsBPool {\\n        // Gets current Balance of token i, Bi, and weight of token i, Wi, from BPool.\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n        bPool.rebind(erc20, BuniSafeMath.bsub(tokenBalance, amount), tokenWeight);\\n\\n        bool xfer = IERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    // Wrappers around corresponding core functions\\n\\n    // \\n    function _mint(uint amount) internal override {\\n        super._mint(amount);\\n        require(varTotalSupply <= bspCap, \\\"ERR_CAP_LIMIT_REACHED\\\");\\n    }\\n\\n    function _mintPoolShare(uint amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _pullPoolShare(address from, uint amount) internal  {\\n        _pull(from, amount);\\n    }\\n\\n    function _burnPoolShare(uint amount) internal  {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x364545bf27e145a87b2df17d44bc4ce19cc2032c387e4a5ac58f99ade205db03\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IBPool {\\n    function rebind(address token, uint balance, uint denorm) external;\\n    function setSwapFee(uint swapFee) external;\\n    function setPublicSwap(bool publicSwap) external;\\n    function bind(address token, uint balance, uint denorm) external;\\n    function unbind(address token) external;\\n    function gulp(address token) external;\\n    function isBound(address token) external view returns(bool);\\n    function getBalance(address token) external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n    function getSwapFee() external view returns (uint);\\n    function isPublicSwap() external view returns (bool);\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n    // solhint-disable-next-line func-name-mixedcase\\n    function EXIT_FEE() external view returns (uint);\\n \\n    function calcPoolOutGivenSingleIn(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint tokenAmountIn,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint poolAmountOut);\\n\\n    function calcSingleInGivenPoolOut(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint poolAmountOut,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint tokenAmountIn);\\n\\n    function calcSingleOutGivenPoolIn(\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint poolAmountIn,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint tokenAmountOut);\\n\\n    function calcPoolInGivenSingleOut(\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint tokenAmountOut,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint poolAmountIn);\\n\\n    function getCurrentTokens()\\n        external view\\n        returns (address[] memory tokens);\\n}\\n\\ninterface IBFactory {\\n    function newBPool() external returns (IBPool);\\n    function setBLabs(address b) external;\\n    function collect(IBPool pool) external;\\n    function isBPool(address b) external view returns (bool);\\n    function getKLabs() external view returns (address);\\n}\\n\",\"keccak256\":\"0xfaee647b2f1e162e356bf32bcf624a1604a06aaf7fb22d3fea4288a900fa296d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n    function burnPoolShareFromLib(uint amount) external;\\n    function totalSupply() external view returns (uint);\\n    function getController() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa1a798c05839da9029729e92454c5da729cec5bbbbf13f3950e3aab59d678c16\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x37d7904de6fabb6ab50b063cc6623997d5f7ff8e0322d0b4ba651c1c00fceed9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BuniConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Buni Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary BuniConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = BONE / 10**6;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 2;\\n    uint public constant MAX_ASSET_LIMIT = 8;\\n    uint public constant MAX_UINT = uint(-1);\\n}\\n\",\"keccak256\":\"0x42607058118671667cb337e5381e06cae3d601c17b8b502d8a098bfc207c4529\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BuniOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract BuniOwnable {\\n    // State variables\\n\\n    address private _owner;\\n\\n    // Event declarations\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    // Modifiers\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    // Function declarations\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setController(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @dev external for gas optimization\\n     * @return address - of the owner (AKA controller)\\n     */\\n    function getController() external view returns (address) {\\n        return _owner;\\n    }\\n}\\n\",\"keccak256\":\"0xda8f527e6c8a7c0e440567632944fd20aafcd8c32a6ebb937f3d2a38e416a502\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BuniReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Buni Labs (and OpenZeppelin)\\n * @title Protect against reentrant calls (and also selectively protect view functions)\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {_lock_} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `_lock_` guard, functions marked as\\n * `_lock_` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `_lock_` entry\\n * points to them.\\n *\\n * Also adds a _lockview_ modifier, which doesn't create a lock, but fails\\n *   if another _lock_ call is in progress\\n */\\ncontract BuniReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint private constant _NOT_ENTERED = 1;\\n    uint private constant _ENTERED = 2;\\n\\n    uint private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `_lock_` function from another `_lock_`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `_lock_` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier lock() {\\n        // On the first call to _lock_, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ERR_REENTRY\\\");\\n\\n        // Any calls to _lock_ after this point will fail\\n        _status = _ENTERED;\\n        _;\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Also add a modifier that doesn't create a lock, but protects functions that\\n     *      should not be called while a _lock_ function is running\\n     */\\n     modifier viewlock() {\\n        require(_status != _ENTERED, \\\"ERR_REENTRY_VIEW\\\");\\n        _;\\n     }\\n}\\n\",\"keccak256\":\"0x767d7b9c6a84caa3d163d49943d5f72514be3b019e9177fd63a214d823e2513d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BuniSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n\\n// Imports\\n\\nimport \\\"./BuniConstants.sol\\\";\\n\\n/**\\n * @author Buni Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary BuniSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (BuniConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / BuniConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0){\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * BuniConstants.BONE;\\n        require(c0 / dividend == BuniConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        }\\n        else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28c34942509b641885d066ec59037b9d641465f1b6a11e21035c5e2c2406702f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/PCToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"./BuniSafeMath.sol\\\";\\nimport \\\"./BuniConstants.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Contracts\\n\\n/* solhint-disable func-order */\\n\\n/**\\n * @author Buni Labs\\n * @title Highly opinionated token implementation\\n*/\\ncontract PCToken is IERC20 {\\n    using BuniSafeMath for uint;\\n\\n    // State variables\\n    string public constant NAME = \\\"Buni Smart Pool\\\";\\n    uint8 public constant DECIMALS = 18;\\n\\n    // No leading underscore per naming convention (non-private)\\n    // Cannot call totalSupply (name conflict)\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    uint internal varTotalSupply;\\n\\n    mapping(address => uint) private _balance;\\n    mapping(address => mapping(address => uint)) private _allowance;\\n\\n    string private _symbol;\\n    string private _name;\\n\\n    // Event declarations\\n\\n    // See definitions above; must be redeclared to be emitted from this contract\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Function declarations\\n\\n    /**\\n     * @notice Base token constructor\\n     * @param tokenSymbol - the token symbol\\n     */\\n    constructor (string memory tokenSymbol, string memory tokenName) public {\\n        _symbol = tokenSymbol;\\n        _name = tokenName;\\n    }\\n\\n    // External functions\\n\\n    /**\\n     * @notice Getter for allowance: amount spender will be allowed to spend on behalf of owner\\n     * @param owner - owner of the tokens\\n     * @param spender - entity allowed to spend the tokens\\n     * @return uint - remaining amount spender is allowed to transfer\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint) {\\n        return _allowance[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Getter for current account balance\\n     * @param account - address we're checking the balance of\\n     * @return uint - token balance in the account\\n     */\\n    function balanceOf(address account) external view override returns (uint) {\\n        return _balance[account];\\n    }\\n\\n    /**\\n     * @notice Approve owner (sender) to spend a certain amount\\n     * @dev emits an Approval event\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     * @return bool - result of the approval (will always be true if it doesn't revert)\\n     */\\n    function approve(address spender, uint amount) external override returns (bool) {\\n        /* In addition to the increase/decreaseApproval functions, could\\n           avoid the \\\"approval race condition\\\" by only allowing calls to approve\\n           when the current approval amount is 0\\n        \\n           require(_allowance[msg.sender][spender] == 0, \\\"ERR_RACE_CONDITION\\\");\\n           Some token contracts (e.g., KNC), already revert if you call approve \\n           on a non-zero allocation. To deal with these, we use the SafeApprove library\\n           and safeApprove function when adding tokens to the pool.\\n        */\\n\\n        _allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Increase the amount the spender is allowed to spend on behalf of the owner (sender)\\n     * @dev emits an Approval event\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     * @return bool - result of the approval (will always be true if it doesn't revert)\\n     */\\n    function increaseApproval(address spender, uint amount) external returns (bool) {\\n        _allowance[msg.sender][spender] = BuniSafeMath.badd(_allowance[msg.sender][spender], amount);\\n\\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Decrease the amount the spender is allowed to spend on behalf of the owner (sender)\\n     * @dev emits an Approval event\\n     * @dev If you try to decrease it below the current limit, it's just set to zero (not an error)\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     * @return bool - result of the approval (will always be true if it doesn't revert)\\n     */\\n    function decreaseApproval(address spender, uint amount) external returns (bool) {\\n        uint oldValue = _allowance[msg.sender][spender];\\n        // Gas optimization - if amount == oldValue (or is larger), set to zero immediately\\n        if (amount >= oldValue) {\\n            _allowance[msg.sender][spender] = 0;\\n        } else {\\n            _allowance[msg.sender][spender] = BuniSafeMath.bsub(oldValue, amount);\\n        }\\n\\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer the given amount from sender (caller) to recipient\\n     * @dev _move emits a Transfer event if successful\\n     * @param recipient - entity receiving the tokens\\n     * @param amount - number of tokens being transferred\\n     * @return bool - result of the transfer (will always be true if it doesn't revert)\\n     */\\n    function transfer(address recipient, uint amount) external override returns (bool) {\\n        require(recipient != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n\\n        _move(msg.sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer the given amount from sender to recipient\\n     * @dev _move emits a Transfer event if successful; may also emit an Approval event\\n     * @param sender - entity sending the tokens (must be caller or allowed to spend on behalf of caller)\\n     * @param recipient - recipient of the tokens\\n     * @param amount - number of tokens being transferred\\n     * @return bool - result of the transfer (will always be true if it doesn't revert)\\n     */\\n    function transferFrom(address sender, address recipient, uint amount) external override returns (bool) {\\n        require(recipient != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n        require(msg.sender == sender || amount <= _allowance[sender][msg.sender], \\\"ERR_PCTOKEN_BAD_CALLER\\\");\\n\\n        _move(sender, recipient, amount);\\n\\n        // memoize for gas optimization\\n        uint oldAllowance = _allowance[sender][msg.sender];\\n\\n        // If the sender is not the caller, adjust the allowance by the amount transferred\\n        if (msg.sender != sender && oldAllowance != uint(-1)) {\\n            _allowance[sender][msg.sender] = BuniSafeMath.bsub(oldAllowance, amount);\\n\\n            emit Approval(msg.sender, recipient, _allowance[sender][msg.sender]);\\n        }\\n\\n        return true;\\n    }\\n\\n    // public functions\\n\\n    /**\\n     * @notice Getter for the total supply\\n     * @dev declared external for gas optimization\\n     * @return uint - total number of tokens in existence\\n     */\\n    function totalSupply() external view override returns (uint) {\\n        return varTotalSupply;\\n    }\\n\\n    // Public functions\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     *      We allow the user to set this name (as well as the symbol).\\n     *      Alternatives are 1) A fixed string (original design)\\n     *                       2) A fixed string plus the user-defined symbol\\n     *                          return string(abi.encodePacked(NAME, \\\"-\\\", _symbol));\\n     */\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external pure returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    // internal functions\\n\\n    // Mint an amount of new tokens, and add them to the balance (and total supply)\\n    // Emit a transfer amount from the null address to this contract\\n    function _mint(uint amount) internal virtual {\\n        _balance[address(this)] = BuniSafeMath.badd(_balance[address(this)], amount);\\n        varTotalSupply = BuniSafeMath.badd(varTotalSupply, amount);\\n\\n        emit Transfer(address(0), address(this), amount);\\n    }\\n\\n    // Burn an amount of new tokens, and subtract them from the balance (and total supply)\\n    // Emit a transfer amount from this contract to the null address\\n    function _burn(uint amount) internal virtual {\\n        // Can't burn more than we have\\n        // Remove require for gas optimization - bsub will revert on underflow\\n        // require(_balance[address(this)] >= amount, \\\"ERR_INSUFFICIENT_BAL\\\");\\n\\n        _balance[address(this)] = BuniSafeMath.bsub(_balance[address(this)], amount);\\n        varTotalSupply = BuniSafeMath.bsub(varTotalSupply, amount);\\n\\n        emit Transfer(address(this), address(0), amount);\\n    }\\n\\n    // Transfer tokens from sender to recipient\\n    // Adjust balances, and emit a Transfer event\\n    function _move(address sender, address recipient, uint amount) internal virtual {\\n        // Can't send more than sender has\\n        // Remove require for gas optimization - bsub will revert on underflow\\n        // require(_balance[sender] >= amount, \\\"ERR_INSUFFICIENT_BAL\\\");\\n\\n        _balance[sender] = BuniSafeMath.bsub(_balance[sender], amount);\\n        _balance[recipient] = BuniSafeMath.badd(_balance[recipient], amount);\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    // Transfer from this contract to recipient\\n    // Emits a transfer event if successful\\n    function _push(address recipient, uint amount) internal {\\n        _move(address(this), recipient, amount);\\n    }\\n\\n    // Transfer from recipient to this contract\\n    // Emits a transfer event if successful\\n    function _pull(address sender, uint amount) internal {\\n        _move(sender, address(this), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x704e8e5342a88f7171d7d7d5e3635b896ddf7b1679bb4c6ff82ef421f4adf44a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/RightsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Buni Labs\\n * @title Manage Configurable Rights for the smart pool\\n *      canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                         by default, it is off on initialization and can only be turned on\\n *      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\\n */\\nlibrary RightsManager {\\n\\n    // Type declarations\\n\\n    enum Permissions { PAUSE_SWAPPING,\\n                       CHANGE_SWAP_FEE,\\n                       CHANGE_WEIGHTS,\\n                       ADD_REMOVE_TOKENS,\\n                       WHITELIST_LPS,\\n                       CHANGE_CAP }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canChangeCap;\\n    }\\n\\n    // State variables (can only be constants in a library)\\n    bool public constant DEFAULT_CAN_PAUSE_SWAPPING = false;\\n    bool public constant DEFAULT_CAN_CHANGE_SWAP_FEE = true;\\n    bool public constant DEFAULT_CAN_CHANGE_WEIGHTS = true;\\n    bool public constant DEFAULT_CAN_ADD_REMOVE_TOKENS = false;\\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\\n    bool public constant DEFAULT_CAN_CHANGE_CAP = false;\\n\\n    // Functions\\n\\n    /**\\n     * @notice create a struct from an array (or return defaults)\\n     * @dev If you pass an empty array, it will construct it using the defaults\\n     * @param a - array input\\n     * @return Rights struct\\n     */ \\n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\\n        if (a.length == 0) {\\n            return Rights(DEFAULT_CAN_PAUSE_SWAPPING,\\n                          DEFAULT_CAN_CHANGE_SWAP_FEE,\\n                          DEFAULT_CAN_CHANGE_WEIGHTS,\\n                          DEFAULT_CAN_ADD_REMOVE_TOKENS,\\n                          DEFAULT_CAN_WHITELIST_LPS,\\n                          DEFAULT_CAN_CHANGE_CAP);\\n        }\\n        else {\\n            return Rights(a[0], a[1], a[2], a[3], a[4], a[5]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\\n     * @dev avoids multiple calls to hasPermission\\n     * @param rights - the rights struct to convert\\n     * @return boolean array containing the rights settings\\n     */\\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\\n        bool[] memory result = new bool[](6);\\n\\n        result[0] = rights.canPauseSwapping;\\n        result[1] = rights.canChangeSwapFee;\\n        result[2] = rights.canChangeWeights;\\n        result[3] = rights.canAddRemoveTokens;\\n        result[4] = rights.canWhitelistLPs;\\n        result[5] = rights.canChangeCap;\\n\\n        return result;\\n    }\\n\\n    // Though it is actually simple, the number of branches triggers code-complexity\\n    /* solhint-disable code-complexity */\\n\\n    /**\\n     * @notice Externally check permissions using the Enum\\n     * @param self - Rights struct containing the permissions\\n     * @param permission - The permission to check\\n     * @return Boolean true if it has the permission\\n     */\\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\\n        if (Permissions.PAUSE_SWAPPING == permission) {\\n            return self.canPauseSwapping;\\n        }\\n        else if (Permissions.CHANGE_SWAP_FEE == permission) {\\n            return self.canChangeSwapFee;\\n        }\\n        else if (Permissions.CHANGE_WEIGHTS == permission) {\\n            return self.canChangeWeights;\\n        }\\n        else if (Permissions.ADD_REMOVE_TOKENS == permission) {\\n            return self.canAddRemoveTokens;\\n        }\\n        else if (Permissions.WHITELIST_LPS == permission) {\\n            return self.canWhitelistLPs;\\n        }\\n        else if (Permissions.CHANGE_CAP == permission) {\\n            return self.canChangeCap;\\n        }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n}\\n\",\"keccak256\":\"0x8a9c7eb74951677e23d4c2509593b48ec78cd46dea0ffda12effefd4408acde4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Buni Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(IERC20 token, address spender, uint amount) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if(currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if(currentAllowance != 0) {\\n            return token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1ed81da0697a43b7cee41af99645de6ed80d13db57e32ca513b1f3aa16751476\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../interfaces/IBFactory.sol\\\";\\nimport \\\"../utils/BuniSafeMath.sol\\\";\\nimport \\\"../utils/SafeApprove.sol\\\";\\n\\n\\n/**\\n * @author Buni Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    // Type declarations\\n\\n    struct NewTokenParams {\\n        address addr;\\n        bool isCommitted;\\n        uint commitBlock;\\n        uint denorm;\\n        uint balance;\\n    }\\n\\n    // For blockwise, automated weight updates\\n    // Move weights linearly from startWeights to endWeights,\\n    // between startBlock and endBlock\\n    struct GradualUpdateParams {\\n        uint startBlock;\\n        uint endBlock;\\n        uint[] startWeights;\\n        uint[] endWeights;\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - token to be reweighted\\n     * @param newWeight - new weight of the token\\n    */\\n    function updateWeight(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address token,\\n        uint newWeight\\n    )\\n        external\\n    {\\n        require(newWeight >= BuniConstants.MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(newWeight <= BuniConstants.MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n\\n        uint currentWeight = bPool.getDenormalizedWeight(token);\\n        // Save gas; return immediately on NOOP\\n        if (currentWeight == newWeight) {\\n             return;\\n        }\\n\\n        uint currentBalance = bPool.getBalance(token);\\n        uint totalSupply = self.totalSupply();\\n        uint totalWeight = bPool.getTotalDenormalizedWeight();\\n        uint poolShares;\\n        uint deltaBalance;\\n        uint deltaWeight;\\n        uint newBalance;\\n\\n        if (newWeight < currentWeight) {\\n            // This means the controller will withdraw tokens to keep price\\n            // So they need to redeem PCTokens\\n            deltaWeight = BuniSafeMath.bsub(currentWeight, newWeight);\\n\\n            // poolShares = totalSupply * (deltaWeight / totalWeight)\\n            poolShares = BuniSafeMath.bmul(totalSupply,\\n                                               BuniSafeMath.bdiv(deltaWeight, totalWeight));\\n\\n            // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n            deltaBalance = BuniSafeMath.bmul(currentBalance,\\n                                                 BuniSafeMath.bdiv(deltaWeight, currentWeight));\\n\\n            // New balance cannot be lower than MIN_BALANCE\\n            newBalance = BuniSafeMath.bsub(currentBalance, deltaBalance);\\n\\n            require(newBalance >= BuniConstants.MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n            // First get the tokens from this contract (Pool Controller) to msg.sender\\n            bPool.rebind(token, newBalance, newWeight);\\n\\n            // Now with the tokens this contract can send them to msg.sender\\n            bool xfer = IERC20(token).transfer(msg.sender, deltaBalance);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            self.pullPoolShareFromLib(msg.sender, poolShares);\\n            self.burnPoolShareFromLib(poolShares);\\n        }\\n        else {\\n            // This means the controller will deposit tokens to keep the price.\\n            // They will be minted and given PCTokens\\n            deltaWeight = BuniSafeMath.bsub(newWeight, currentWeight);\\n\\n            require(BuniSafeMath.badd(totalWeight, deltaWeight) <= BuniConstants.MAX_TOTAL_WEIGHT,\\n                    \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n\\n            // poolShares = totalSupply * (deltaWeight / totalWeight)\\n            poolShares = BuniSafeMath.bmul(totalSupply,\\n                                               BuniSafeMath.bdiv(deltaWeight, totalWeight));\\n            // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n            deltaBalance = BuniSafeMath.bmul(currentBalance,\\n                                                 BuniSafeMath.bdiv(deltaWeight, currentWeight));\\n\\n            // First gets the tokens from msg.sender to this contract (Pool Controller)\\n            bool xfer = IERC20(token).transferFrom(msg.sender, address(this), deltaBalance);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            // Now with the tokens this contract can bind them to the pool it controls\\n            bPool.rebind(token, BuniSafeMath.badd(currentBalance, deltaBalance), newWeight);\\n\\n            self.mintPoolShareFromLib(poolShares);\\n            self.pushPoolShareFromLib(msg.sender, poolShares);\\n        }\\n    }\\n\\n    /**\\n     * @notice External function called to make the contract update weights according to plan\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param gradualUpdate - gradual update parameters from the CRP\\n    */\\n    function pokeWeights(\\n        IBPool bPool,\\n        GradualUpdateParams storage gradualUpdate\\n    )\\n        external\\n    {\\n        // Do nothing if we call this when there is no update plan\\n        if (gradualUpdate.startBlock == 0) {\\n            return;\\n        }\\n\\n        // Error to call it before the start of the plan\\n        require(block.number >= gradualUpdate.startBlock, \\\"ERR_CANT_POKE_YET\\\");\\n        // Proposed error message improvement\\n        // require(block.number >= startBlock, \\\"ERR_NO_HOKEY_POKEY\\\");\\n\\n        // This allows for pokes after endBlock that get weights to endWeights\\n        // Get the current block (or the endBlock, if we're already past the end)\\n        uint currentBlock;\\n        if (block.number > gradualUpdate.endBlock) {\\n            currentBlock = gradualUpdate.endBlock;\\n        }\\n        else {\\n            currentBlock = block.number;\\n        }\\n\\n        uint blockPeriod = BuniSafeMath.bsub(gradualUpdate.endBlock, gradualUpdate.startBlock);\\n        uint blocksElapsed = BuniSafeMath.bsub(currentBlock, gradualUpdate.startBlock);\\n        uint weightDelta;\\n        uint deltaPerBlock;\\n        uint newWeight;\\n\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            // Make sure it does nothing if the new and old weights are the same (saves gas)\\n            // It's a degenerate case if they're *all* the same, but you certainly could have\\n            // a plan where you only change some of the weights in the set\\n            if (gradualUpdate.startWeights[i] != gradualUpdate.endWeights[i]) {\\n                if (gradualUpdate.endWeights[i] < gradualUpdate.startWeights[i]) {\\n                    // We are decreasing the weight\\n\\n                    // First get the total weight delta\\n                    weightDelta = BuniSafeMath.bsub(gradualUpdate.startWeights[i],\\n                                                        gradualUpdate.endWeights[i]);\\n                    // And the amount it should change per block = total change/number of blocks in the period\\n                    deltaPerBlock = BuniSafeMath.bdiv(weightDelta, blockPeriod);\\n                    //deltaPerBlock = bdivx(weightDelta, blockPeriod);\\n\\n                     // newWeight = startWeight - (blocksElapsed * deltaPerBlock)\\n                    newWeight = BuniSafeMath.bsub(gradualUpdate.startWeights[i],\\n                                                      BuniSafeMath.bmul(blocksElapsed, deltaPerBlock));\\n                }\\n                else {\\n                    // We are increasing the weight\\n\\n                    // First get the total weight delta\\n                    weightDelta = BuniSafeMath.bsub(gradualUpdate.endWeights[i],\\n                                                        gradualUpdate.startWeights[i]);\\n                    // And the amount it should change per block = total change/number of blocks in the period\\n                    deltaPerBlock = BuniSafeMath.bdiv(weightDelta, blockPeriod);\\n                    //deltaPerBlock = bdivx(weightDelta, blockPeriod);\\n\\n                     // newWeight = startWeight + (blocksElapsed * deltaPerBlock)\\n                    newWeight = BuniSafeMath.badd(gradualUpdate.startWeights[i],\\n                                                      BuniSafeMath.bmul(blocksElapsed, deltaPerBlock));\\n                }\\n\\n                uint bal = bPool.getBalance(tokens[i]);\\n\\n                bPool.rebind(tokens[i], bal, newWeight);\\n            }\\n        }\\n\\n        // Reset to allow add/remove tokens, or manual weight updates\\n        if (block.number >= gradualUpdate.endBlock) {\\n            gradualUpdate.startBlock = 0;\\n        }\\n    }\\n\\n    /* solhint-enable function-max-lines */\\n\\n    /**\\n     * @notice Schedule (commit) a token to be added; must call applyAddToken after a fixed\\n     *         number of blocks to actually add the token\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - the token to be added\\n     * @param balance - how much to be added\\n     * @param denormalizedWeight - the desired token weight\\n     * @param newToken - NewTokenParams struct used to hold the token data (in CRP storage)\\n     */\\n    function commitAddToken(\\n        IBPool bPool,\\n        address token,\\n        uint balance,\\n        uint denormalizedWeight,\\n        NewTokenParams storage newToken\\n    )\\n        external\\n    {\\n        require(!bPool.isBound(token), \\\"ERR_IS_BOUND\\\");\\n\\n        require(denormalizedWeight <= BuniConstants.MAX_WEIGHT, \\\"ERR_WEIGHT_ABOVE_MAX\\\");\\n        require(denormalizedWeight >= BuniConstants.MIN_WEIGHT, \\\"ERR_WEIGHT_BELOW_MIN\\\");\\n        require(BuniSafeMath.badd(bPool.getTotalDenormalizedWeight(),\\n                                      denormalizedWeight) <= BuniConstants.MAX_TOTAL_WEIGHT,\\n                \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        require(balance >= BuniConstants.MIN_BALANCE, \\\"ERR_BALANCE_BELOW_MIN\\\");\\n\\n        newToken.addr = token;\\n        newToken.balance = balance;\\n        newToken.denorm = denormalizedWeight;\\n        newToken.commitBlock = block.number;\\n        newToken.isCommitted = true;\\n    }\\n\\n    /**\\n     * @notice Add the token previously committed (in commitAddToken) to the pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param addTokenTimeLockInBlocks -  Wait time between committing and applying a new token\\n     * @param newToken - NewTokenParams struct used to hold the token data (in CRP storage)\\n     */\\n    function applyAddToken(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint addTokenTimeLockInBlocks,\\n        NewTokenParams storage newToken\\n    )\\n        external\\n    {\\n        require(newToken.isCommitted, \\\"ERR_NO_TOKEN_COMMIT\\\");\\n        require(BuniSafeMath.bsub(block.number, newToken.commitBlock) >= addTokenTimeLockInBlocks,\\n                                      \\\"ERR_TIMELOCK_STILL_COUNTING\\\");\\n\\n        uint totalSupply = self.totalSupply();\\n\\n        // poolShares = totalSupply * newTokenWeight / totalWeight\\n        uint poolShares = BuniSafeMath.bdiv(BuniSafeMath.bmul(totalSupply, newToken.denorm),\\n                                                bPool.getTotalDenormalizedWeight());\\n\\n        // Clear this to allow adding more tokens\\n        newToken.isCommitted = false;\\n\\n        // First gets the tokens from msg.sender to this contract (Pool Controller)\\n        bool returnValue = IERC20(newToken.addr).transferFrom(self.getController(), address(self), newToken.balance);\\n        require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        // Approves bPool to pull from this controller\\n        // Approve unlimited, same as when creating the pool, so they can join pools later\\n        returnValue = SafeApprove.safeApprove(IERC20(newToken.addr), address(bPool), BuniConstants.MAX_UINT);\\n        require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n        bPool.bind(newToken.addr, newToken.balance, newToken.denorm);\\n\\n        self.mintPoolShareFromLib(poolShares);\\n        self.pushPoolShareFromLib(msg.sender, poolShares);\\n    }\\n\\n     /**\\n     * @notice Remove a token from the pool\\n     * @dev Logic in the CRP controls when ths can be called. There are two related permissions:\\n     *      AddRemoveTokens - which allows removing down to the underlying BPool limit of two\\n     *      RemoveAllTokens - which allows completely draining the pool by removing all tokens\\n     *                        This can result in a non-viable pool with 0 or 1 tokens (by design),\\n     *                        meaning all swapping or binding operations would fail in this state\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - token to remove\\n     */\\n    function removeToken(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address token\\n    )\\n        external\\n    {\\n        uint totalSupply = self.totalSupply();\\n\\n        // poolShares = totalSupply * tokenWeight / totalWeight\\n        uint poolShares = BuniSafeMath.bdiv(BuniSafeMath.bmul(totalSupply,\\n                                                                      bPool.getDenormalizedWeight(token)),\\n                                                bPool.getTotalDenormalizedWeight());\\n\\n        // this is what will be unbound from the pool\\n        // Have to get it before unbinding\\n        uint balance = bPool.getBalance(token);\\n\\n        // Unbind and get the tokens out of Buni pool\\n        bPool.unbind(token);\\n\\n        // Now with the tokens this contract can send them to msg.sender\\n        bool xfer = IERC20(token).transfer(self.getController(), balance);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n        self.pullPoolShareFromLib(self.getController(), poolShares);\\n        self.burnPoolShareFromLib(poolShares);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n         }\\n    }\\n\\n    /**\\n     * @notice Update weights in a predetermined way, between startBlock and endBlock,\\n     *         through external cals to pokeWeights\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param newWeights - final weights we want to get to\\n     * @param startBlock - when weights should start to change\\n     * @param endBlock - when weights will be at their final values\\n     * @param minimumWeightChangeBlockPeriod - needed to validate the block period\\n    */\\n    function updateWeightsGradually(\\n        IBPool bPool,\\n        GradualUpdateParams storage gradualUpdate,\\n        uint[] calldata newWeights,\\n        uint startBlock,\\n        uint endBlock,\\n        uint minimumWeightChangeBlockPeriod\\n    )\\n        external\\n    {\\n        require(block.number < endBlock, \\\"ERR_GRADUAL_UPDATE_TIME_TRAVEL\\\");\\n        \\n        if (block.number > startBlock) {\\n            // This means the weight update should start ASAP\\n            // Moving the start block up prevents a big jump/discontinuity in the weights\\n            gradualUpdate.startBlock = block.number;\\n        }\\n        else{\\n            gradualUpdate.startBlock = startBlock;\\n        }\\n\\n        // Enforce a minimum time over which to make the changes\\n        // The also prevents endBlock <= startBlock\\n        require(BuniSafeMath.bsub(endBlock, gradualUpdate.startBlock) >= minimumWeightChangeBlockPeriod,\\n                \\\"ERR_WEIGHT_CHANGE_TIME_BELOW_MIN\\\");\\n\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        // Must specify weights for all tokens\\n        require(newWeights.length == tokens.length, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n\\n        uint weightsSum = 0;\\n        gradualUpdate.startWeights = new uint[](tokens.length);\\n\\n        // Check that endWeights are valid now to avoid reverting in a future pokeWeights call\\n        //\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            require(newWeights[i] <= BuniConstants.MAX_WEIGHT, \\\"ERR_WEIGHT_ABOVE_MAX\\\");\\n            require(newWeights[i] >= BuniConstants.MIN_WEIGHT, \\\"ERR_WEIGHT_BELOW_MIN\\\");\\n\\n            weightsSum = BuniSafeMath.badd(weightsSum, newWeights[i]);\\n            gradualUpdate.startWeights[i] = bPool.getDenormalizedWeight(tokens[i]);\\n        }\\n        require(weightsSum <= BuniConstants.MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n\\n        gradualUpdate.endBlock = endBlock;\\n        gradualUpdate.endWeights = newWeights;\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn\\n    )\\n         external\\n         view\\n         returns (uint[] memory actualAmountsIn)\\n    {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = BuniSafeMath.bdiv(poolAmountOut,\\n                                           BuniSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountIn = BuniSafeMath.bmul(ratio,\\n                                                       BuniSafeMath.badd(bal, 1));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return exitFee - calculated exit fee\\n     * @return pAiAfterExitFee - final amount in (after accounting for exit fee)\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint pAiAfterExitFee, uint[] memory actualAmountsOut)\\n    {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        // Calculate exit fee and the final amount in\\n        exitFee = BuniSafeMath.bmul(poolAmountIn, BuniConstants.EXIT_FEE);\\n        pAiAfterExitFee = BuniSafeMath.bsub(poolAmountIn, exitFee);\\n\\n        uint ratio = BuniSafeMath.bdiv(pAiAfterExitFee,\\n                                           BuniSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = BuniSafeMath.bmul(ratio,\\n                                                        BuniSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    /**\\n     * @notice Join by swapping a fixed amount of an external token in (must be present in the pool)\\n     *         System calculates the pool token amount\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenIn - which token we're transferring in\\n     * @param tokenAmountIn - amount of deposit\\n     * @param minPoolAmountOut - minimum of pool tokens to receive\\n     * @return poolAmountOut - amount of pool tokens minted and transferred\\n     */\\n    function joinswapExternAmountIn(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenIn,\\n        uint tokenAmountIn,\\n        uint minPoolAmountOut\\n    )\\n        external\\n        view\\n        returns (uint poolAmountOut)\\n    {\\n        require(bPool.isBound(tokenIn), \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountIn <= BuniSafeMath.bmul(bPool.getBalance(tokenIn),\\n                                                       BuniConstants.MAX_IN_RATIO),\\n                                                       \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        poolAmountOut = bPool.calcPoolOutGivenSingleIn(\\n                            bPool.getBalance(tokenIn),\\n                            bPool.getDenormalizedWeight(tokenIn),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            tokenAmountIn,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n    }\\n\\n    /**\\n     * @notice Join by swapping an external token in (must be present in the pool)\\n     *         To receive an exact amount of pool tokens out. System calculates the deposit amount\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenIn - which token we're transferring in (system calculates amount required)\\n     * @param poolAmountOut - amount of pool tokens to be received\\n     * @param maxAmountIn - Maximum asset tokens that can be pulled to pay for the pool tokens\\n     * @return tokenAmountIn - amount of asset tokens transferred in to purchase the pool tokens\\n     */\\n    function joinswapPoolAmountOut(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenIn,\\n        uint poolAmountOut,\\n        uint maxAmountIn\\n    )\\n        external\\n        view\\n        returns (uint tokenAmountIn)\\n    {\\n        require(bPool.isBound(tokenIn), \\\"ERR_NOT_BOUND\\\");\\n\\n        tokenAmountIn = bPool.calcSingleInGivenPoolOut(\\n                            bPool.getBalance(tokenIn),\\n                            bPool.getDenormalizedWeight(tokenIn),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            poolAmountOut,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(tokenAmountIn <= BuniSafeMath.bmul(bPool.getBalance(tokenIn),\\n                                                       BuniConstants.MAX_IN_RATIO),\\n                                                       \\\"ERR_MAX_IN_RATIO\\\");\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem a specific number of pool tokens for an underlying asset\\n     *         Asset must be present in the pool, and will incur an EXIT_FEE (if set to non-zero)\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountOut - minimum asset tokens to receive\\n     * @return exitFee - calculated exit fee\\n     * @return tokenAmountOut - amount of asset tokens returned\\n     */\\n    function exitswapPoolAmountIn(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenOut,\\n        uint poolAmountIn,\\n        uint minAmountOut\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint tokenAmountOut)\\n    {\\n        require(bPool.isBound(tokenOut), \\\"ERR_NOT_BOUND\\\");\\n\\n        tokenAmountOut = bPool.calcSingleOutGivenPoolIn(\\n                            bPool.getBalance(tokenOut),\\n                            bPool.getDenormalizedWeight(tokenOut),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            poolAmountIn,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n        require(tokenAmountOut <= BuniSafeMath.bmul(bPool.getBalance(tokenOut),\\n                                                        BuniConstants.MAX_OUT_RATIO),\\n                                                        \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        exitFee = BuniSafeMath.bmul(poolAmountIn, BuniConstants.EXIT_FEE);\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for a specific amount of underlying assets\\n     *         Asset must be present in the pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param tokenAmountOut - amount of underlying asset tokens to receive\\n     * @param maxPoolAmountIn - maximum pool tokens to be redeemed\\n     * @return exitFee - calculated exit fee\\n     * @return poolAmountIn - amount of pool tokens redeemed\\n     */\\n    function exitswapExternAmountOut(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenOut,\\n        uint tokenAmountOut,\\n        uint maxPoolAmountIn\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint poolAmountIn)\\n    {\\n        require(bPool.isBound(tokenOut), \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountOut <= BuniSafeMath.bmul(bPool.getBalance(tokenOut),\\n                                                        BuniConstants.MAX_OUT_RATIO),\\n                                                        \\\"ERR_MAX_OUT_RATIO\\\");\\n        poolAmountIn = bPool.calcPoolInGivenSingleOut(\\n                            bPool.getBalance(tokenOut),\\n                            bPool.getDenormalizedWeight(tokenOut),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            tokenAmountOut,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        exitFee = BuniSafeMath.bmul(poolAmountIn, BuniConstants.EXIT_FEE);\\n    }\\n\\n    // Internal functions\\n\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0371915aeb8570eb7f8e15a7f918f659aa0045284970ee8e59b32eb2b2589bd9\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615ee4806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200003a5760003560e01c80634420002b146200003f578063dc19e842146200006e575b600080fd5b6200005662000050366004620002f2565b62000094565b60405162000065919062000487565b60405180910390f35b620000856200007f366004620002cd565b6200026b565b604051620000659190620005f1565b60006002620000a76040850185620006a1565b90501015620000d35760405162461bcd60e51b8152600401620000ca906200066a565b60405180910390fd5b620000e26040840184620006a1565b9050620000f36060850185620006a1565b905014620001155760405162461bcd60e51b8152600401620000ca9062000633565b620001246040840184620006a1565b9050620001356080850185620006a1565b905014620001575760405162461bcd60e51b8152600401620000ca90620005fc565b60008484846040516200016a9062000289565b62000178939291906200049b565b604051809103906000f08015801562000195573d6000803e3d6000fd5b506040519091506001600160a01b0382169033907f8aaa45dbe91f274e1c80489691f3d62dbf595d587fcc6a989fa27696e7c2a23290600090a36001600160a01b03811660008181526020819052604090819020805460ff19166001179055517f92eefe9b0000000000000000000000000000000000000000000000000000000081526392eefe9b906200022e90339060040162000487565b600060405180830381600087803b1580156200024957600080fd5b505af11580156200025e573d6000803e3d6000fd5b5092979650505050505050565b6001600160a01b031660009081526020819052604090205460ff1690565b6156ff80620007b083390190565b80356001600160a01b0381168114620002af57600080fd5b92915050565b600060c08284031215620002c7578081fd5b50919050565b600060208284031215620002df578081fd5b620002eb838362000297565b9392505050565b6000806000610100848603121562000308578182fd5b83356001600160a01b03811681146200031f578283fd5b9250602084013567ffffffffffffffff8111156200033b578283fd5b6200034986828701620002b5565b9250506200035b8560408601620002b5565b90509250925092565b6001600160a01b0316815260200190565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115620003a7578081fd5b6020830280836020870137939093016020019283525090919050565b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b80358015158082146200040557600080fd5b835250602081013562000418816200079d565b1515602083015260408101356200042f816200079d565b15156040830152606081013562000446816200079d565b1515606083015260808101356200045d816200079d565b151560808301526200047360a082018262000746565b6200048260a0840182620003c3565b505050565b6001600160a01b0391909116815260200190565b60006101006001600160a01b038616835260208181850152620004bf868762000755565b60c084870152620004d66101c087018284620003c9565b93505050620004e88187018762000755565b60ff19808786030161012088015262000503858385620003c9565b94506200051460408a018a620006fb565b93509150808786030161014088015284620005308487620006f2565b929550869290505b838310156200056d578486016200055b8262000555838a62000297565b62000364565b91508096505060018301925062000538565b6200057c60608b018b620006fb565b9650945081888203016101608901526200059881878762000375565b955050620005aa60808a018a620006fb565b9450925080878603016101808801525050620005c883838362000375565b60a08801356101a08701529350620005e992505060408401905084620003f3565b949350505050565b901515815260200190565b6020808252601a908201527f4552525f53544152545f574549474854535f4d49534d41544348000000000000604082015260600190565b6020808252601b908201527f4552525f53544152545f42414c414e4345535f4d49534d415443480000000000604082015260600190565b60208082526012908201527f4552525f544f4f5f4645575f544f4b454e530000000000000000000000000000604082015260600190565b6000808335601e19843603018112620006b8578283fd5b83018035915067ffffffffffffffff821115620006d3578283fd5b6020908101925081023603821315620006eb57600080fd5b9250929050565b90815260200190565b6000808335601e1984360301811262000712578283fd5b830160208101925035905067ffffffffffffffff8111156200073357600080fd5b602081023603831315620006eb57600080fd5b60008235620002eb816200079d565b6000808335601e198436030181126200076c578283fd5b830160208101925035905067ffffffffffffffff8111156200078d57600080fd5b803603831315620006eb57600080fd5b8015158114620007ac57600080fd5b5056fe60806040523480156200001157600080fd5b50604051620056ff380380620056ff8339810160408190526200003491620006c7565b815160208084015182519091620000519160039185019062000337565b5080516200006790600490602084019062000337565b5050600580546001600160a01b03191633179055506001600655620f4240670de0b6b3a7640000048260a001511015620000be5760405162461bcd60e51b8152600401620000b590620008ef565b60405180910390fd5b60a082015167016345785d8a00001015620000ed5760405162461bcd60e51b8152600401620000b590620008ef565b81604001515182606001515114620001195760405162461bcd60e51b8152600401620000b5906200088c565b81604001515182608001515114620001455760405162461bcd60e51b8152600401620000b59062000855565b600282604001515110156200016e5760405162461bcd60e51b8152600401620000b590620008c3565b60088260400151511115620001975760405162461bcd60e51b8152600401620000b59062000926565b60408083015190516377d4434960e01b8152734CD95BBf3FcD61278E2e1b96De952166229dfE5E916377d4434991620001d4919060040162000806565b60006040518083038186803b158015620001ed57600080fd5b505af415801562000202573d6000803e3d6000fd5b5050600780546001600160a01b0319166001600160a01b03871617905550508051600980546020808501516040808701516060880151608089015160a08a015160ff199097169815159890981761ff001916610100941515949094029390931762ff0000191662010000911515919091021763ff00000019166301000000921515929092029190911760ff60201b1916640100000000951515959095029490941760ff60281b1916650100000000009215159290920291909117909155908301518051620002d5926013920190620003bc565b5060608201518051620002f19160149160209091019062000422565b5060a082015160125562015f906015556101f4601655608082015180516200032291600c9160209091019062000422565b50506000600a555050600019601855620009b6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200037a57805160ff1916838001178555620003aa565b82800160010185558215620003aa579182015b82811115620003aa5782518255916020019190600101906200038d565b50620003b89291506200045f565b5090565b82805482825590600052602060002090810192821562000414579160200282015b828111156200041457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620003dd565b50620003b892915062000476565b828054828255906000526020600020908101928215620003aa5791602002820182811115620003aa5782518255916020019190600101906200038d565b5b80821115620003b8576000815560010162000460565b5b80821115620003b85780546001600160a01b031916815560010162000477565b80516001600160a01b0381168114620004af57600080fd5b92915050565b600082601f830112620004c6578081fd5b8151620004dd620004d78262000984565b6200095d565b818152915060208083019084810181840286018201871015620004ff57600080fd5b60005b848110156200052a5762000517888362000497565b8452928201929082019060010162000502565b505050505092915050565b600082601f83011262000546578081fd5b815162000557620004d78262000984565b8181529150602080830190848101818402860182018710156200057957600080fd5b60005b848110156200052a578151845292820192908201906001016200057c565b600082601f830112620005ab578081fd5b81516001600160401b03811115620005c1578182fd5b6020620005d7601f8301601f191682016200095d565b92508183528481838601011115620005ee57600080fd5b60005b828110156200060e578481018201518482018301528101620005f1565b82811115620006205760008284860101525b50505092915050565b600060c082840312156200063b578081fd5b6200064760c06200095d565b905081516200065681620009a4565b815260208201516200066881620009a4565b602082015260408201516200067d81620009a4565b604082015260608201516200069281620009a4565b60608201526080820151620006a781620009a4565b608082015260a0820151620006bc81620009a4565b60a082015292915050565b60008060006101008486031215620006dd578283fd5b620006e9858562000497565b60208501519093506001600160401b038082111562000706578384fd5b9085019060c082880312156200071a578384fd5b6200072660c06200095d565b82518281111562000735578586fd5b62000743898286016200059a565b82525060208301518281111562000758578586fd5b62000766898286016200059a565b6020830152506040830151828111156200077e578586fd5b6200078c89828601620004b5565b604083015250606083015182811115620007a4578586fd5b620007b28982860162000535565b606083015250608083015182811115620007ca578586fd5b620007d88982860162000535565b60808301525060a083015160a0820152809450505050620007fd856040860162000629565b90509250925092565b6020808252825182820181905260009190848201906040850190845b81811015620008495783516001600160a01b03168352928401929184019160010162000822565b50909695505050505050565b6020808252601a908201527f4552525f53544152545f574549474854535f4d49534d41544348000000000000604082015260600190565b6020808252601b908201527f4552525f53544152545f42414c414e4345535f4d49534d415443480000000000604082015260600190565b6020808252601290820152714552525f544f4f5f4645575f544f4b454e5360701b604082015260600190565b60208082526014908201527f4552525f494e56414c49445f535741505f464545000000000000000000000000604082015260600190565b60208082526013908201527f4552525f544f4f5f4d414e595f544f4b454e5300000000000000000000000000604082015260600190565b6040518181016001600160401b03811182821017156200097c57600080fd5b604052919050565b60006001600160401b038211156200099a578081fd5b5060209081020190565b8015158114620009b357600080fd5b50565b614d3980620009c66000396000f3fe608060405234801561001057600080fd5b506004361061036d5760003560e01c806370a08231116101d3578063b64ef17b11610104578063dd62ed3e116100a2578063e7f1a5541161007c578063e7f1a554146106e7578063e854f53d146106ef578063f226b528146106f7578063fde924f7146106ff5761036d565b8063dd62ed3e146106b9578063e211b875146106cc578063e2762d4b146106d45761036d565b8063c3391d27116100de578063c3391d2714610667578063c42bd05a1461067a578063c83a1c2d14610693578063d73dd623146106a65761036d565b8063b64ef17b1461064f578063b99a098f14610657578063c275d81b1461065f5761036d565b80639776e94b11610171578063a3f4df7e1161014b578063a3f4df7e14610619578063a835a0de14610621578063a9059cbb14610629578063b02f0b731461063c5761036d565b80639776e94b146105e4578063980e8db6146105f75780639d829c2b146106115761036d565b80638259e6a0116101ad5780638259e6a0146105a357806392eefe9b146105b6578063948d8ce6146105c957806395d89b41146105dc5761036d565b806370a082311461057557806374983a0d14610588578063806c6f87146105905761036d565b806334e19907116102ad5780634f69c0d41161024b5780635db34277116102255780635db34277146105295780635fa7b5841461053c578063661884631461054f5780636d06dfa0146105625761036d565b80634f69c0d4146104ed57806355c32a23146105005780635a8342d8146105135761036d565b806347786d371161028757806347786d37146104a157806349b59552146104b45780634ba57882146104c75780634c20d209146104da5761036d565b806334e199071461046857806337c6f4d91461047b57806346ab38f11461048e5761036d565b806318160ddd1161031a578063246bc19b116102f4578063246bc19b146104305780632e0f2625146104435780633018205f14610458578063313ce567146104605761036d565b806318160ddd14610402578063220eb7601461040a57806323b872dd1461041d5761036d565b8063095ea7b31161034b578063095ea7b3146103c55780630a165940146103e55780630ce27925146103fa5761036d565b806302c967481461037257806306fdde031461039b578063095dcccc146103b0575b600080fd5b610385610380366004614023565b610707565b6040516103929190614c74565b60405180910390f35b6103a36108e7565b60405161039291906145e9565b6103c36103be366004613ff8565b61097d565b005b6103d86103d3366004613ff8565b6109aa565b604051610392919061441e565b6103ed610a14565b6040516103929190614364565b610385610a23565b610385610a29565b6103c36104183660046141ed565b610a2f565b6103d861042b366004613fb8565b610a5a565b6103c361043e3660046140f0565b610b9a565b61044b610d47565b6040516103929190614c8b565b6103ed610d4c565b61044b610d5b565b6103c36104763660046141ed565b610d60565b6103d86104893660046141ce565b610ea5565b61038561049c366004614023565b610f53565b6103c36104af3660046141ed565b61111a565b6103c36104c236600461417a565b611248565b6103c36104d53660046141ed565b61134e565b6103c36104e8366004614023565b611376565b6103c36104fb36600461421d565b6115c9565b6103c361050e366004613ff8565b6119d5565b61051b6119fe565b604051610392929190614c7d565b610385610537366004614023565b611a07565b6103c361054a366004613f64565b611be6565b6103d861055d366004613ff8565b611d9a565b610385610570366004614023565b611e86565b610385610583366004613f64565b612065565b6103ed612080565b6103d861059e366004613f64565b612098565b6103c36105b13660046141ed565b6120e2565b6103c36105c4366004613f64565b61217f565b6103856105d7366004613f64565b612238565b6103a3612305565b6103c36105f2366004613ff8565b612366565b6105ff6124fe565b60405161039296959493929190614429565b6103ed61253a565b6103a3612552565b61038561258b565b6103d8610637366004613ff8565b612591565b6103c361064a36600461421d565b6125cd565b6103ed612993565b6103ed6129a2565b6103c36129ba565b6103c36106753660046142d8565b612b32565b610682612bfb565b6040516103929594939291906143b6565b6103c36106a1366004613f64565b612c22565b6103d86106b4366004613ff8565b612d16565b6103856106c7366004613f80565b612d9c565b6103c3612dc7565b6103c36106e2366004613f64565b612ed7565b610385612fff565b610385613005565b61038561300b565b6103d8613012565b60405160009033906001600160e01b0319833516906107299084903690614459565b60405180910390a26002600654141561075d5760405162461bcd60e51b8152600401610754906148ce565b60405180910390fd5b60026006556008546001600160a01b031661078a5760405162461bcd60e51b815260040161075490614829565b6008546040517f724a2d530000000000000000000000000000000000000000000000000000000081526000918291734CD95BBf3FcD61278E2e1b96De952166229dfE5E9163724a2d53916107f49130916001600160a01b03909116908b908b908b9060040161454e565b604080518083038186803b15801561080b57600080fd5b505af415801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190614267565b91509150809250600061085684846130ea565b9050866001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e98860405161089b9190614c74565b60405180910390a36108ad33856119f4565b6108b681610a4e565b6007546108cc906001600160a01b03168461099c565b6108d7873388613123565b5050505b60016006559392505050565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109735780601f1061094857610100808354040283529160200191610973565b820191906000526020600020905b81548152906001019060200180831161095657829003601f168201915b5050505050905090565b33301461099c5760405162461bcd60e51b81526004016107549061463c565b6109a68282613385565b5050565b3360008181526002602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610a03908690614c74565b60405180910390a350600192915050565b6007546001600160a01b031681565b60185481565b60005490565b333014610a4e5760405162461bcd60e51b81526004016107549061463c565b610a5781613390565b50565b60006001600160a01b038316610a825760405162461bcd60e51b81526004016107549061474d565b336001600160a01b0385161480610abc57506001600160a01b03841660009081526002602090815260408083203384529091529020548211155b610ad85760405162461bcd60e51b815260040161075490614a18565b610ae384848461340a565b6001600160a01b0384166000818152600260209081526040808320338085529252909120549114801590610b1957506000198114155b15610b8d57610b2881846130ea565b6001600160a01b0386811660009081526002602090815260408083203380855292529182902084905590519187169290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591610b8491614c74565b60405180910390a35b60019150505b9392505050565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610bcc929190614459565b60405180910390a260026006541415610bf75760405162461bcd60e51b8152600401610754906148ce565b60026006556005546001600160a01b03163314610c265760405162461bcd60e51b81526004016107549061463c565b6008546001600160a01b0316610c4e5760405162461bcd60e51b815260040161075490614829565b60095462010000900460ff16610c765760405162461bcd60e51b8152600401610754906147bb565b600e54600160a01b900460ff1615610ca05760405162461bcd60e51b815260040161075490614a4f565b6008546015546040517f13b8bf24000000000000000000000000000000000000000000000000000000008152734CD95BBf3FcD61278E2e1b96De952166229dfE5E926313b8bf2492610d0c926001600160a01b0390921691600a918a918a918a918a91906004016144b9565b60006040518083038186803b158015610d2457600080fd5b505af4158015610d38573d6000803e3d6000fd5b50506001600655505050505050565b601281565b6005546001600160a01b031690565b601290565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610d92929190614459565b60405180910390a260026006541415610dbd5760405162461bcd60e51b8152600401610754906148ce565b60026006556005546001600160a01b03163314610dec5760405162461bcd60e51b81526004016107549061463c565b6008546001600160a01b0316610e145760405162461bcd60e51b815260040161075490614829565b600954610100900460ff16610e3b5760405162461bcd60e51b815260040161075490614b99565b6008546040516334e1990760e01b81526001600160a01b03909116906334e1990790610e6b908490600401614c74565b600060405180830381600087803b158015610e8557600080fd5b505af1158015610e99573d6000803e3d6000fd5b50506001600655505050565b6040517f4583544a000000000000000000000000000000000000000000000000000000008152600090738534C255BF2C06176e89235fE65E9A3132753d5c90634583544a90610efb906009908690600401614c07565b60206040518083038186803b158015610f1357600080fd5b505af4158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190614196565b90505b919050565b60405160009033906001600160e01b031983351690610f759084903690614459565b60405180910390a260026006541415610fa05760405162461bcd60e51b8152600401610754906148ce565b60026006556008546001600160a01b0316610fcd5760405162461bcd60e51b815260040161075490614829565b6008546040517fd505a94e0000000000000000000000000000000000000000000000000000000081526000918291734CD95BBf3FcD61278E2e1b96De952166229dfE5E9163d505a94e916110379130916001600160a01b03909116908b908b908b9060040161454e565b604080518083038186803b15801561104e57600080fd5b505af4158015611062573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110869190614267565b91509150809250600061109986846130ea565b9050866001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e9866040516110de9190614c74565b60405180910390a36110f033876119f4565b6110f981610a4e565b60075461110f906001600160a01b03168461099c565b6108d7873386613123565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161114c929190614459565b60405180910390a2600260065414156111775760405162461bcd60e51b8152600401610754906148ce565b60026006556008546001600160a01b03166111a45760405162461bcd60e51b815260040161075490614829565b6005546001600160a01b031633146111ce5760405162461bcd60e51b81526004016107549061463c565b60095465010000000000900460ff166111f95760405162461bcd60e51b815260040161075490614973565b336001600160a01b03167f6bc200110c7794738d401810b22ef824a2044a8ccb022d4ad8769840370331f560185483604051611236929190614c7d565b60405180910390a26018556001600655565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161127a929190614459565b60405180910390a2600260065414156112a55760405162461bcd60e51b8152600401610754906148ce565b60026006556005546001600160a01b031633146112d45760405162461bcd60e51b81526004016107549061463c565b6008546001600160a01b03166112fc5760405162461bcd60e51b815260040161075490614829565b60095460ff1661131e5760405162461bcd60e51b815260040161075490614af4565b6008546040516324dacaa960e11b81526001600160a01b03909116906349b5955290610e6b90849060040161441e565b33301461136d5760405162461bcd60e51b81526004016107549061463c565b610a57816134bb565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516113a8929190614459565b60405180910390a2600260065414156113d35760405162461bcd60e51b8152600401610754906148ce565b60026006556005546001600160a01b031633146114025760405162461bcd60e51b81526004016107549061463c565b6008546001600160a01b031661142a5760405162461bcd60e51b815260040161075490614829565b6009546301000000900460ff166114535760405162461bcd60e51b815260040161075490614673565b600a54156114735760405162461bcd60e51b815260040161075490614bd0565b6040517f1c1af136000000000000000000000000000000000000000000000000000000008152734CD95BBf3FcD61278E2e1b96De952166229dfE5E90631c1af136906114c3908690600401614364565b60006040518083038186803b1580156114db57600080fd5b505af41580156114ef573d6000803e3d6000fd5b50506040513392503091506001600160a01b038616907f33b043686b9408a355896fe90b2f8ecc86a41d87d1554ef65a739948b4f23e2790600090a46008546040517fb489ec19000000000000000000000000000000000000000000000000000000008152734CD95BBf3FcD61278E2e1b96De952166229dfE5E9163b489ec199161158f916001600160a01b031690879087908790600e90600401614488565b60006040518083038186803b1580156115a757600080fd5b505af41580156115bb573d6000803e3d6000fd5b505060016006555050505050565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516115fb929190614459565b60405180910390a2600260065414156116265760405162461bcd60e51b8152600401610754906148ce565b60026006556008546001600160a01b03166116535760405162461bcd60e51b815260040161075490614829565b6008546040805163fde924f760e01b815290516000926001600160a01b03169163fde924f7916004808301926020929190829003018186803b15801561169857600080fd5b505afa1580156116ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d09190614196565b6008546040516324dacaa960e11b81529192506001600160a01b0316906349b59552906117029060009060040161441e565b600060405180830381600087803b15801561171c57600080fd5b505af1158015611730573d6000803e3d6000fd5b5050600954640100000000900460ff1615915081905061175f57503360009081526017602052604090205460ff165b61177b5760405162461bcd60e51b8152600401610754906146df565b6008546040517fa1925f1d000000000000000000000000000000000000000000000000000000008152606091734CD95BBf3FcD61278E2e1b96De952166229dfE5E9163a1925f1d916117e19130916001600160a01b0316908a908a908a90600401614582565b60006040518083038186803b1580156117f957600080fd5b505af415801561180d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611835919081019061413f565b90506060600860009054906101000a90046001600160a01b03166001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561188757600080fd5b505afa15801561189b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118c39190810190614057565b905060005b81518110156119615760008282815181106118df57fe5b6020026020010151905060008483815181106118f757fe5b60200260200101519050816001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa72836040516119449190614c74565b60405180910390a36119578233836134e8565b50506001016118c8565b5061196b8661136d565b611975338761099c565b50506008546040516324dacaa960e11b81526001600160a01b03909116906349b59552906119a790849060040161441e565b600060405180830381600087803b1580156119c157600080fd5b505af1158015610d38573d6000803e3d6000fd5b3330146119f45760405162461bcd60e51b81526004016107549061463c565b6109a68282613731565b600a54600b5482565b60405160009033906001600160e01b031983351690611a299084903690614459565b60405180910390a260026006541415611a545760405162461bcd60e51b8152600401610754906148ce565b60026006556008546001600160a01b0316611a815760405162461bcd60e51b815260040161075490614829565b600954640100000000900460ff161580611aaa57503360009081526017602052604090205460ff165b611ac65760405162461bcd60e51b8152600401610754906146df565b6008546040517fdf90de0b000000000000000000000000000000000000000000000000000000008152734CD95BBf3FcD61278E2e1b96De952166229dfE5E9163df90de0b91611b2b9130916001600160a01b039091169089908990899060040161454e565b60206040518083038186803b158015611b4357600080fd5b505af4158015611b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7b9190614205565b9050836001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa7285604051611bc09190614c74565b60405180910390a3611bd18161136d565b611bdb338261099c565b6108db8433856134e8565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611c18929190614459565b60405180910390a260026006541415611c435760405162461bcd60e51b8152600401610754906148ce565b60026006556005546001600160a01b03163314611c725760405162461bcd60e51b81526004016107549061463c565b6008546001600160a01b0316611c9a5760405162461bcd60e51b815260040161075490614829565b6009546301000000900460ff16611cc35760405162461bcd60e51b815260040161075490614673565b600e54600160a01b900460ff1615611ced5760405162461bcd60e51b815260040161075490614a86565b600a5415611d0d5760405162461bcd60e51b815260040161075490614bd0565b6008546040517f0970e47f000000000000000000000000000000000000000000000000000000008152734CD95BBf3FcD61278E2e1b96De952166229dfE5E91630970e47f91611d6e9130916001600160a01b03909116908690600401614501565b60006040518083038186803b158015611d8657600080fd5b505af4158015610e99573d6000803e3d6000fd5b3360009081526002602090815260408083206001600160a01b0386168452909152812054808310611dee573360009081526002602090815260408083206001600160a01b0388168452909152812055611e1d565b611df881846130ea565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b0389168085529252918290205491519092917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591611e749190614c74565b60405180910390a35060019392505050565b60405160009033906001600160e01b031983351690611ea89084903690614459565b60405180910390a260026006541415611ed35760405162461bcd60e51b8152600401610754906148ce565b60026006556008546001600160a01b0316611f005760405162461bcd60e51b815260040161075490614829565b600954640100000000900460ff161580611f2957503360009081526017602052604090205460ff165b611f455760405162461bcd60e51b8152600401610754906146df565b6008546040517f6a6dc6e7000000000000000000000000000000000000000000000000000000008152734CD95BBf3FcD61278E2e1b96De952166229dfE5E91636a6dc6e791611faa9130916001600160a01b039091169089908990899060040161454e565b60206040518083038186803b158015611fc257600080fd5b505af4158015611fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffa9190614205565b9050836001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa728360405161203f9190614c74565b60405180910390a36120508361136d565b61205a338461099c565b6108db8433836134e8565b6001600160a01b031660009081526001602052604090205490565b738534C255BF2C06176e89235fE65E9A3132753d5c90565b600954600090640100000000900460ff16156120d057506001600160a01b03811660009081526017602052604090205460ff16610f4e565b506001600160a01b0381161515610f4e565b6005546001600160a01b0316331461210c5760405162461bcd60e51b81526004016107549061463c565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161213e929190614459565b60405180910390a2600260065414156121695760405162461bcd60e51b8152600401610754906148ce565b60026006556121778161373c565b506001600655565b6005546001600160a01b031633146121a95760405162461bcd60e51b81526004016107549061463c565b6001600160a01b0381166121cf5760405162461bcd60e51b81526004016107549061474d565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006002600654141561225d5760405162461bcd60e51b815260040161075490614905565b6008546001600160a01b03166122855760405162461bcd60e51b815260040161075490614829565b600854604051634a46c67360e11b81526001600160a01b039091169063948d8ce6906122b5908590600401614364565b60206040518083038186803b1580156122cd57600080fd5b505afa1580156122e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190614205565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109735780601f1061094857610100808354040283529160200191610973565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612398929190614459565b60405180910390a2600260065414156123c35760405162461bcd60e51b8152600401610754906148ce565b60026006556005546001600160a01b031633146123f25760405162461bcd60e51b81526004016107549061463c565b6008546001600160a01b031661241a5760405162461bcd60e51b815260040161075490614829565b60095462010000900460ff166124425760405162461bcd60e51b8152600401610754906147bb565b600a54156124625760405162461bcd60e51b815260040161075490614bd0565b6008546040517ff544aa1c000000000000000000000000000000000000000000000000000000008152734CD95BBf3FcD61278E2e1b96De952166229dfE5E9163f544aa1c916124c59130916001600160a01b039091169087908790600401614524565b60006040518083038186803b1580156124dd57600080fd5b505af41580156124f1573d6000803e3d6000fd5b5050600160065550505050565b60095460ff8082169161010081048216916201000082048116916301000000810482169164010000000082048116916501000000000090041686565b734CD95BBf3FcD61278E2e1b96De952166229dfE5E90565b6040518060400160405280600f81526020017f42756e6920536d61727420506f6f6c000000000000000000000000000000000081525081565b6101f481565b60006001600160a01b0383166125b95760405162461bcd60e51b81526004016107549061474d565b6125c433848461340a565b50600192915050565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516125ff929190614459565b60405180910390a26002600654141561262a5760405162461bcd60e51b8152600401610754906148ce565b60026006556008546001600160a01b03166126575760405162461bcd60e51b815260040161075490614829565b6008546040805163fde924f760e01b815290516000926001600160a01b03169163fde924f7916004808301926020929190829003018186803b15801561269c57600080fd5b505afa1580156126b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d49190614196565b6008546040516324dacaa960e11b81529192506001600160a01b0316906349b59552906127069060009060040161441e565b600060405180830381600087803b15801561272057600080fd5b505af1158015612734573d6000803e3d6000fd5b50506008546040517f5471c3e400000000000000000000000000000000000000000000000000000000815260009350839250606091734CD95BBf3FcD61278E2e1b96De952166229dfE5E91635471c3e4916127a39130916001600160a01b0316908c908c908c90600401614582565b60006040518083038186803b1580156127bb57600080fd5b505af41580156127cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127f7919081019061428a565b92509250925061280733886119f4565b60075461281d906001600160a01b03168461099c565b61282682610a4e565b600854604080517fcc77828d00000000000000000000000000000000000000000000000000000000815290516060926001600160a01b03169163cc77828d916004808301926000929190829003018186803b15801561288457600080fd5b505afa158015612898573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128c09190810190614057565b905060005b815181101561295e5760008282815181106128dc57fe5b6020026020010151905060008483815181106128f457fe5b60200260200101519050816001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e9836040516129419190614c74565b60405180910390a3612954823383613123565b50506001016128c5565b50506008546040516324dacaa960e11b81526001600160a01b0390911693506349b5955292506119a79150849060040161441e565b6008546001600160a01b031681565b73940f9CC489A1A7dD47A135CdAcF9e8507A584c2790565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516129ec929190614459565b60405180910390a260026006541415612a175760405162461bcd60e51b8152600401610754906148ce565b60026006556005546001600160a01b03163314612a465760405162461bcd60e51b81526004016107549061463c565b6008546001600160a01b0316612a6e5760405162461bcd60e51b815260040161075490614829565b6009546301000000900460ff16612a975760405162461bcd60e51b815260040161075490614673565b6008546016546040517fefa58774000000000000000000000000000000000000000000000000000000008152734CD95BBf3FcD61278E2e1b96De952166229dfE5E9263efa5877492612afb9230926001600160a01b03169190600e906004016145c0565b60006040518083038186803b158015612b1357600080fd5b505af4158015612b27573d6000803e3d6000fd5b505060016006555050565b6005546001600160a01b03163314612b5c5760405162461bcd60e51b81526004016107549061463c565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612b8e929190614459565b60405180910390a260026006541415612bb95760405162461bcd60e51b8152600401610754906148ce565b600260065580821015612bde5760405162461bcd60e51b8152600401610754906146aa565b60158290556016819055612bf18361373c565b5050600160065550565b600e54600f546010546011546001600160a01b03841693600160a01b900460ff1692919085565b6005546001600160a01b03163314612c4c5760405162461bcd60e51b81526004016107549061463c565b60026006541415612c6f5760405162461bcd60e51b8152600401610754906148ce565b60026006556040513390600080356001600160e01b03191691612c9491903690614459565b60405180910390a2600954640100000000900460ff16612cc65760405162461bcd60e51b815260040161075490614784565b6001600160a01b038116612cec5760405162461bcd60e51b81526004016107549061493c565b6001600160a01b03166000908152601760205260409020805460ff19166001908117909155600655565b3360009081526002602090815260408083206001600160a01b0386168452909152812054612d449083613c4d565b3360008181526002602090815260408083206001600160a01b038916808552925291829020849055905190927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591610a039190614c74565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612df9929190614459565b60405180910390a260026006541415612e245760405162461bcd60e51b8152600401610754906148ce565b60026006556008546001600160a01b0316612e515760405162461bcd60e51b815260040161075490614829565b60095462010000900460ff16612e795760405162461bcd60e51b8152600401610754906147bb565b6008546040517f82495b45000000000000000000000000000000000000000000000000000000008152734CD95BBf3FcD61278E2e1b96De952166229dfE5E916382495b4591612afb916001600160a01b031690600a906004016143e4565b6005546001600160a01b03163314612f015760405162461bcd60e51b81526004016107549061463c565b60026006541415612f245760405162461bcd60e51b8152600401610754906148ce565b60026006556040513390600080356001600160e01b03191691612f4991903690614459565b60405180910390a2600954640100000000900460ff16612f7b5760405162461bcd60e51b815260040161075490614784565b6001600160a01b03811660009081526017602052604090205460ff16612fb35760405162461bcd60e51b8152600401610754906147f2565b6001600160a01b038116612fd95760405162461bcd60e51b81526004016107549061493c565b6001600160a01b03166000908152601760205260409020805460ff191690556001600655565b60165481565b60155481565b62015f9081565b6000600260065414156130375760405162461bcd60e51b815260040161075490614905565b6008546001600160a01b031661305f5760405162461bcd60e51b815260040161075490614829565b600860009054906101000a90046001600160a01b03166001600160a01b031663fde924f76040518163ffffffff1660e01b815260040160206040518083038186803b1580156130ad57600080fd5b505afa1580156130c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e59190614196565b905090565b60008060006130f98585613c72565b91509150801561311b5760405162461bcd60e51b815260040161075490614b2b565b509392505050565b6008546001600160a01b031661314b5760405162461bcd60e51b815260040161075490614829565b60085460405163f8b2cb4f60e01b81526000916001600160a01b03169063f8b2cb4f9061317c908790600401614364565b60206040518083038186803b15801561319457600080fd5b505afa1580156131a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cc9190614205565b600854604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce690613202908890600401614364565b60206040518083038186803b15801561321a57600080fd5b505afa15801561322e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132529190614205565b6008549091506001600160a01b0316633fdddaa28661327185876130ea565b846040518463ffffffff1660e01b8152600401613290939291906143fd565b600060405180830381600087803b1580156132aa57600080fd5b505af11580156132be573d6000803e3d6000fd5b50506040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600092506001600160a01b038816915063a9059cbb9061330c90889088906004016143e4565b602060405180830381600087803b15801561332657600080fd5b505af115801561333a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335e9190614196565b90508061337d5760405162461bcd60e51b815260040161075490614abd565b505050505050565b6109a630838361340a565b306000908152600160205260409020546133aa90826130ea565b30600090815260016020526040812091909155546133c890826130ea565b600090815560405130907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906133ff908590614c74565b60405180910390a350565b6001600160a01b03831660009081526001602052604090205461342d90826130ea565b6001600160a01b03808516600090815260016020526040808220939093559084168152205461345c9082613c4d565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906134ae908590614c74565b60405180910390a3505050565b6134c481613c97565b6018546000541115610a575760405162461bcd60e51b8152600401610754906149e1565b6008546001600160a01b03166135105760405162461bcd60e51b815260040161075490614829565b60085460405163f8b2cb4f60e01b81526000916001600160a01b03169063f8b2cb4f90613541908790600401614364565b60206040518083038186803b15801561355957600080fd5b505afa15801561356d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135919190614205565b600854604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce6906135c7908890600401614364565b60206040518083038186803b1580156135df57600080fd5b505afa1580156135f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136179190614205565b90506000856001600160a01b03166323b872dd8630876040518463ffffffff1660e01b815260040161364b93929190614378565b602060405180830381600087803b15801561366557600080fd5b505af1158015613679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061369d9190614196565b9050806136bc5760405162461bcd60e51b815260040161075490614abd565b6008546001600160a01b0316633fdddaa2876136d88688613c4d565b856040518463ffffffff1660e01b81526004016136f7939291906143fd565b600060405180830381600087803b15801561371157600080fd5b505af1158015613725573d6000803e3d6000fd5b50505050505050505050565b6109a682308361340a565b6008546001600160a01b0316156137655760405162461bcd60e51b815260040161075490614860565b68056bc75e2d6310000081101561378e5760405162461bcd60e51b815260040161075490614897565b6b033b2e3c9fd0803ce80000008111156137ba5760405162461bcd60e51b815260040161075490614716565b60095465010000000000900460ff16156137d45760188190555b6137dd8161136d565b6137e7338261099c565b600760009054906101000a90046001600160a01b03166001600160a01b031663d556c5dc6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561383757600080fd5b505af115801561384b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061386f91906141b2565b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790819055604080517fc6580d120000000000000000000000000000000000000000000000000000000081529051919092169163c6580d12916004808301926020929190829003018186803b1580156138ed57600080fd5b505afa158015613901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139259190614205565b156139425760405162461bcd60e51b8152600401610754906149aa565b60005b601354811015613b365760006013828154811061395e57fe5b6000918252602082200154601480546001600160a01b039092169350908490811061398557fe5b906000526020600020015490506000600a60020184815481106139a457fe5b60009182526020822001546040517f23b872dd0000000000000000000000000000000000000000000000000000000081529092506001600160a01b038516906323b872dd906139fb90339030908890600401614378565b602060405180830381600087803b158015613a1557600080fd5b505af1158015613a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4d9190614196565b905080613a6c5760405162461bcd60e51b815260040161075490614abd565b600854613a88906001600160a01b038681169116600019613d07565b905080613aa75760405162461bcd60e51b815260040161075490614abd565b6008546040517fe4e1e5380000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063e4e1e53890613af4908790879087906004016143fd565b600060405180830381600087803b158015613b0e57600080fd5b505af1158015613b22573d6000803e3d6000fd5b505060019096019550613945945050505050565b505b60135415613b7f576013805480613b4b57fe5b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff19169055019055613b38565b6008546012546040516334e1990760e01b81526001600160a01b03909216916334e1990791613bb091600401614c74565b600060405180830381600087803b158015613bca57600080fd5b505af1158015613bde573d6000803e3d6000fd5b50506008546040516324dacaa960e11b81526001600160a01b0390911692506349b595529150613c139060019060040161441e565b600060405180830381600087803b158015613c2d57600080fd5b505af1158015613c41573d6000803e3d6000fd5b50506000601255505050565b600082820183811015610b935760405162461bcd60e51b815260040161075490614b62565b600080838311613c885750508082036000613c90565b505081810360015b9250929050565b30600090815260016020526040902054613cb19082613c4d565b3060009081526001602052604081209190915554613ccf9082613c4d565b60009081556040513091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906133ff908590614c74565b600080846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401613d3892919061439c565b60206040518083038186803b158015613d5057600080fd5b505afa158015613d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d889190614205565b905082811415613d9c576001915050610b93565b8015613e2b5760405163095ea7b360e01b81526001600160a01b0386169063095ea7b390613dd19087906000906004016143e4565b602060405180830381600087803b158015613deb57600080fd5b505af1158015613dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e239190614196565b915050610b93565b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b390613e5990879087906004016143e4565b602060405180830381600087803b158015613e7357600080fd5b505af1158015613e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eab9190614196565b95945050505050565b60008083601f840112613ec5578081fd5b50813567ffffffffffffffff811115613edc578182fd5b6020830191508360208083028501011115613c9057600080fd5b600082601f830112613f06578081fd5b8151613f19613f1482614cc0565b614c99565b818152915060208083019084810181840286018201871015613f3a57600080fd5b60005b84811015613f5957815184529282019290820190600101613f3d565b505050505092915050565b600060208284031215613f75578081fd5b8135610b9381614ce0565b60008060408385031215613f92578081fd5b8235613f9d81614ce0565b91506020830135613fad81614ce0565b809150509250929050565b600080600060608486031215613fcc578081fd5b8335613fd781614ce0565b92506020840135613fe781614ce0565b929592945050506040919091013590565b6000806040838503121561400a578182fd5b823561401581614ce0565b946020939093013593505050565b600080600060608486031215614037578283fd5b833561404281614ce0565b95602085013595506040909401359392505050565b60006020808385031215614069578182fd5b825167ffffffffffffffff81111561407f578283fd5b8301601f8101851361408f578283fd5b805161409d613f1482614cc0565b81815283810190838501858402850186018910156140b9578687fd5b8694505b838510156140e45780516140d081614ce0565b8352600194909401939185019185016140bd565b50979650505050505050565b60008060008060608587031215614105578081fd5b843567ffffffffffffffff81111561411b578182fd5b61412787828801613eb4565b90989097506020870135966040013595509350505050565b600060208284031215614150578081fd5b815167ffffffffffffffff811115614166578182fd5b61417284828501613ef6565b949350505050565b60006020828403121561418b578081fd5b8135610b9381614cf5565b6000602082840312156141a7578081fd5b8151610b9381614cf5565b6000602082840312156141c3578081fd5b8151610b9381614ce0565b6000602082840312156141df578081fd5b813560068110610b93578182fd5b6000602082840312156141fe578081fd5b5035919050565b600060208284031215614216578081fd5b5051919050565b600080600060408486031215614231578081fd5b83359250602084013567ffffffffffffffff81111561424e578182fd5b61425a86828701613eb4565b9497909650939450505050565b60008060408385031215614279578182fd5b505080516020909101519092909150565b60008060006060848603121561429e578081fd5b8351925060208401519150604084015167ffffffffffffffff8111156142c2578182fd5b6142ce86828701613ef6565b9150509250925092565b6000806000606084860312156142ec578081fd5b505081359360208301359350604090920135919050565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614334578081fd5b6020830280836020870137939093016020019283525090919050565b15159052565b6006811061436057fe5b9052565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03959095168552921515602085015260408401919091526060830152608082015260a00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b9515158652931515602086015291151560408501521515606084015215156080830152151560a082015260c00190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b60006001600160a01b038916825287602083015260c060408301526144e260c083018789614303565b606083019590955250608081019290925260a090910152949350505050565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b60006001600160a01b038088168352808716602084015250846040830152608060608301526145b5608083018486614303565b979650505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6000602080835283518082850152825b81811015614615578581018301518582016040015282016145f9565b818111156146265783604083870101525b50601f01601f1916929092016040019392505050565b60208082526012908201527f4552525f4e4f545f434f4e54524f4c4c45520000000000000000000000000000604082015260600190565b6020808252601c908201527f4552525f43414e4e4f545f4144445f52454d4f56455f544f4b454e5300000000604082015260600190565b6020808252818101527f4552525f494e434f4e53495354454e545f544f4b454e5f54494d455f4c4f434b604082015260600190565b60208082526014908201527f4552525f4e4f545f4f4e5f57484954454c495354000000000000000000000000604082015260600190565b60208082526013908201527f4552525f494e49545f535550504c595f4d415800000000000000000000000000604082015260600190565b60208082526010908201527f4552525f5a45524f5f4144445245535300000000000000000000000000000000604082015260600190565b60208082526018908201527f4552525f43414e4e4f545f57484954454c4953545f4c50530000000000000000604082015260600190565b6020808252601c908201527f4552525f4e4f545f434f4e464947555241424c455f5745494748545300000000604082015260600190565b60208082526016908201527f4552525f4c505f4e4f545f57484954454c495354454400000000000000000000604082015260600190565b6020808252600f908201527f4552525f4e4f545f435245415445440000000000000000000000000000000000604082015260600190565b6020808252600e908201527f4552525f49535f43524541544544000000000000000000000000000000000000604082015260600190565b60208082526013908201527f4552525f494e49545f535550504c595f4d494e00000000000000000000000000604082015260600190565b6020808252600b908201527f4552525f5245454e545259000000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f4552525f5245454e5452595f5649455700000000000000000000000000000000604082015260600190565b60208082526013908201527f4552525f494e56414c49445f4144445245535300000000000000000000000000604082015260600190565b60208082526015908201527f4552525f43414e4e4f545f4348414e47455f4341500000000000000000000000604082015260600190565b60208082526014908201527f4552525f4e4f4e5a45524f5f455849545f464545000000000000000000000000604082015260600190565b60208082526015908201527f4552525f4341505f4c494d49545f524541434845440000000000000000000000604082015260600190565b60208082526016908201527f4552525f5043544f4b454e5f4241445f43414c4c455200000000000000000000604082015260600190565b60208082526015908201527f4552525f50454e44494e475f544f4b454e5f4144440000000000000000000000604082015260600190565b6020808252601b908201527f4552525f52454d4f56455f574954485f4144445f50454e44494e470000000000604082015260600190565b6020808252600f908201527f4552525f45524332305f46414c53450000000000000000000000000000000000604082015260600190565b60208082526015908201527f4552525f4e4f545f5041555341424c455f535741500000000000000000000000604082015260600190565b60208082526011908201527f4552525f5355425f554e444552464c4f57000000000000000000000000000000604082015260600190565b60208082526010908201527f4552525f4144445f4f564552464c4f5700000000000000000000000000000000604082015260600190565b6020808252601d908201527f4552525f4e4f545f434f4e464947555241424c455f535741505f464545000000604082015260600190565b6020808252601c908201527f4552525f4e4f5f5550444154455f445552494e475f4752414455414c00000000604082015260600190565b600060e082019050835460ff80821615158452808260081c1615156020850152808260101c1615156040850152808260181c1615156060850152614c5360808501828460201c16614350565b614c6560a08501828460281c16614350565b5050610b9360c0830184614356565b90815260200190565b918252602082015260400190565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715614cb857600080fd5b604052919050565b600067ffffffffffffffff821115614cd6578081fd5b5060209081020190565b6001600160a01b0381168114610a5757600080fd5b8015158114610a5757600080fdfea2646970667358221220c86bdeaeba08dc9e248d506606eeeb904e1f98f0e54ef28ecc560ff2105287e764736f6c634300060c0033a2646970667358221220c095076d66e20fbb9b0a121d6817f3a2f78daa855c8a4fba12dfa5f61fd319d864736f6c634300060c0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200003a5760003560e01c80634420002b146200003f578063dc19e842146200006e575b600080fd5b6200005662000050366004620002f2565b62000094565b60405162000065919062000487565b60405180910390f35b620000856200007f366004620002cd565b6200026b565b604051620000659190620005f1565b60006002620000a76040850185620006a1565b90501015620000d35760405162461bcd60e51b8152600401620000ca906200066a565b60405180910390fd5b620000e26040840184620006a1565b9050620000f36060850185620006a1565b905014620001155760405162461bcd60e51b8152600401620000ca9062000633565b620001246040840184620006a1565b9050620001356080850185620006a1565b905014620001575760405162461bcd60e51b8152600401620000ca90620005fc565b60008484846040516200016a9062000289565b62000178939291906200049b565b604051809103906000f08015801562000195573d6000803e3d6000fd5b506040519091506001600160a01b0382169033907f8aaa45dbe91f274e1c80489691f3d62dbf595d587fcc6a989fa27696e7c2a23290600090a36001600160a01b03811660008181526020819052604090819020805460ff19166001179055517f92eefe9b0000000000000000000000000000000000000000000000000000000081526392eefe9b906200022e90339060040162000487565b600060405180830381600087803b1580156200024957600080fd5b505af11580156200025e573d6000803e3d6000fd5b5092979650505050505050565b6001600160a01b031660009081526020819052604090205460ff1690565b6156ff80620007b083390190565b80356001600160a01b0381168114620002af57600080fd5b92915050565b600060c08284031215620002c7578081fd5b50919050565b600060208284031215620002df578081fd5b620002eb838362000297565b9392505050565b6000806000610100848603121562000308578182fd5b83356001600160a01b03811681146200031f578283fd5b9250602084013567ffffffffffffffff8111156200033b578283fd5b6200034986828701620002b5565b9250506200035b8560408601620002b5565b90509250925092565b6001600160a01b0316815260200190565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115620003a7578081fd5b6020830280836020870137939093016020019283525090919050565b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b80358015158082146200040557600080fd5b835250602081013562000418816200079d565b1515602083015260408101356200042f816200079d565b15156040830152606081013562000446816200079d565b1515606083015260808101356200045d816200079d565b151560808301526200047360a082018262000746565b6200048260a0840182620003c3565b505050565b6001600160a01b0391909116815260200190565b60006101006001600160a01b038616835260208181850152620004bf868762000755565b60c084870152620004d66101c087018284620003c9565b93505050620004e88187018762000755565b60ff19808786030161012088015262000503858385620003c9565b94506200051460408a018a620006fb565b93509150808786030161014088015284620005308487620006f2565b929550869290505b838310156200056d578486016200055b8262000555838a62000297565b62000364565b91508096505060018301925062000538565b6200057c60608b018b620006fb565b9650945081888203016101608901526200059881878762000375565b955050620005aa60808a018a620006fb565b9450925080878603016101808801525050620005c883838362000375565b60a08801356101a08701529350620005e992505060408401905084620003f3565b949350505050565b901515815260200190565b6020808252601a908201527f4552525f53544152545f574549474854535f4d49534d41544348000000000000604082015260600190565b6020808252601b908201527f4552525f53544152545f42414c414e4345535f4d49534d415443480000000000604082015260600190565b60208082526012908201527f4552525f544f4f5f4645575f544f4b454e530000000000000000000000000000604082015260600190565b6000808335601e19843603018112620006b8578283fd5b83018035915067ffffffffffffffff821115620006d3578283fd5b6020908101925081023603821315620006eb57600080fd5b9250929050565b90815260200190565b6000808335601e1984360301811262000712578283fd5b830160208101925035905067ffffffffffffffff8111156200073357600080fd5b602081023603831315620006eb57600080fd5b60008235620002eb816200079d565b6000808335601e198436030181126200076c578283fd5b830160208101925035905067ffffffffffffffff8111156200078d57600080fd5b803603831315620006eb57600080fd5b8015158114620007ac57600080fd5b5056fe60806040523480156200001157600080fd5b50604051620056ff380380620056ff8339810160408190526200003491620006c7565b815160208084015182519091620000519160039185019062000337565b5080516200006790600490602084019062000337565b5050600580546001600160a01b03191633179055506001600655620f4240670de0b6b3a7640000048260a001511015620000be5760405162461bcd60e51b8152600401620000b590620008ef565b60405180910390fd5b60a082015167016345785d8a00001015620000ed5760405162461bcd60e51b8152600401620000b590620008ef565b81604001515182606001515114620001195760405162461bcd60e51b8152600401620000b5906200088c565b81604001515182608001515114620001455760405162461bcd60e51b8152600401620000b59062000855565b600282604001515110156200016e5760405162461bcd60e51b8152600401620000b590620008c3565b60088260400151511115620001975760405162461bcd60e51b8152600401620000b59062000926565b60408083015190516377d4434960e01b815273__$af2aa94b09ef8aeccfc7c541ff1aafae3a$$af2aa94b09ef8aeccfc7c541ff1aafae3a$__9163724a2d53916107f49130916001600160a01b03909116908b908b908b9060040161454e565b604080518083038186803b15801561080b57600080fd5b505af415801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190614267565b91509150809250600061085684846130ea565b9050866001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e98860405161089b9190614c74565b60405180910390a36108ad33856119f4565b6108b681610a4e565b6007546108cc906001600160a01b03168461099c565b6108d7873388613123565b5050505b60016006559392505050565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109735780601f1061094857610100808354040283529160200191610973565b820191906000526020600020905b81548152906001019060200180831161095657829003601f168201915b5050505050905090565b33301461099c5760405162461bcd60e51b81526004016107549061463c565b6109a68282613385565b5050565b3360008181526002602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610a03908690614c74565b60405180910390a350600192915050565b6007546001600160a01b031681565b60185481565b60005490565b333014610a4e5760405162461bcd60e51b81526004016107549061463c565b610a5781613390565b50565b60006001600160a01b038316610a825760405162461bcd60e51b81526004016107549061474d565b336001600160a01b0385161480610abc57506001600160a01b03841660009081526002602090815260408083203384529091529020548211155b610ad85760405162461bcd60e51b815260040161075490614a18565b610ae384848461340a565b6001600160a01b0384166000818152600260209081526040808320338085529252909120549114801590610b1957506000198114155b15610b8d57610b2881846130ea565b6001600160a01b0386811660009081526002602090815260408083203380855292529182902084905590519187169290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591610b8491614c74565b60405180910390a35b60019150505b9392505050565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610bcc929190614459565b60405180910390a260026006541415610bf75760405162461bcd60e51b8152600401610754906148ce565b60026006556005546001600160a01b03163314610c265760405162461bcd60e51b81526004016107549061463c565b6008546001600160a01b0316610c4e5760405162461bcd60e51b815260040161075490614829565b60095462010000900460ff16610c765760405162461bcd60e51b8152600401610754906147bb565b600e54600160a01b900460ff1615610ca05760405162461bcd60e51b815260040161075490614a4f565b6008546015546040517f13b8bf2400000000000000000000000000000000000000000000000000000000815273__$af2aa94b09ef8aeccfc7c541ff1aafae3a$__926313b8bf2492610d0c926001600160a01b0390921691600a918a918a918a918a91906004016144b9565b60006040518083038186803b158015610d2457600080fd5b505af4158015610d38573d6000803e3d6000fd5b50506001600655505050505050565b601281565b6005546001600160a01b031690565b601290565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610d92929190614459565b60405180910390a260026006541415610dbd5760405162461bcd60e51b8152600401610754906148ce565b60026006556005546001600160a01b03163314610dec5760405162461bcd60e51b81526004016107549061463c565b6008546001600160a01b0316610e145760405162461bcd60e51b815260040161075490614829565b600954610100900460ff16610e3b5760405162461bcd60e51b815260040161075490614b99565b6008546040516334e1990760e01b81526001600160a01b03909116906334e1990790610e6b908490600401614c74565b600060405180830381600087803b158015610e8557600080fd5b505af1158015610e99573d6000803e3d6000fd5b50506001600655505050565b6040517f4583544a00000000000000000000000000000000000000000000000000000000815260009073__$d0903ca16ac8278340ca8b6de102e541fd$__90634583544a90610efb906009908690600401614c07565b60206040518083038186803b158015610f1357600080fd5b505af4158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190614196565b90505b919050565b60405160009033906001600160e01b031983351690610f759084903690614459565b60405180910390a260026006541415610fa05760405162461bcd60e51b8152600401610754906148ce565b60026006556008546001600160a01b0316610fcd5760405162461bcd60e51b815260040161075490614829565b6008546040517fd505a94e000000000000000000000000000000000000000000000000000000008152600091829173__$af2aa94b09ef8aeccfc7c541ff1aafae3a$__9163d505a94e916110379130916001600160a01b03909116908b908b908b9060040161454e565b604080518083038186803b15801561104e57600080fd5b505af4158015611062573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110869190614267565b91509150809250600061109986846130ea565b9050866001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e9866040516110de9190614c74565b60405180910390a36110f033876119f4565b6110f981610a4e565b60075461110f906001600160a01b03168461099c565b6108d7873386613123565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161114c929190614459565b60405180910390a2600260065414156111775760405162461bcd60e51b8152600401610754906148ce565b60026006556008546001600160a01b03166111a45760405162461bcd60e51b815260040161075490614829565b6005546001600160a01b031633146111ce5760405162461bcd60e51b81526004016107549061463c565b60095465010000000000900460ff166111f95760405162461bcd60e51b815260040161075490614973565b336001600160a01b03167f6bc200110c7794738d401810b22ef824a2044a8ccb022d4ad8769840370331f560185483604051611236929190614c7d565b60405180910390a26018556001600655565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161127a929190614459565b60405180910390a2600260065414156112a55760405162461bcd60e51b8152600401610754906148ce565b60026006556005546001600160a01b031633146112d45760405162461bcd60e51b81526004016107549061463c565b6008546001600160a01b03166112fc5760405162461bcd60e51b815260040161075490614829565b60095460ff1661131e5760405162461bcd60e51b815260040161075490614af4565b6008546040516324dacaa960e11b81526001600160a01b03909116906349b5955290610e6b90849060040161441e565b33301461136d5760405162461bcd60e51b81526004016107549061463c565b610a57816134bb565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516113a8929190614459565b60405180910390a2600260065414156113d35760405162461bcd60e51b8152600401610754906148ce565b60026006556005546001600160a01b031633146114025760405162461bcd60e51b81526004016107549061463c565b6008546001600160a01b031661142a5760405162461bcd60e51b815260040161075490614829565b6009546301000000900460ff166114535760405162461bcd60e51b815260040161075490614673565b600a54156114735760405162461bcd60e51b815260040161075490614bd0565b6040517f1c1af13600000000000000000000000000000000000000000000000000000000815273__$af2aa94b09ef8aeccfc7c541ff1aafae3a$__90631c1af136906114c3908690600401614364565b60006040518083038186803b1580156114db57600080fd5b505af41580156114ef573d6000803e3d6000fd5b50506040513392503091506001600160a01b038616907f33b043686b9408a355896fe90b2f8ecc86a41d87d1554ef65a739948b4f23e2790600090a46008546040517fb489ec1900000000000000000000000000000000000000000000000000000000815273__$af2aa94b09ef8aeccfc7c541ff1aafae3a$__9163b489ec199161158f916001600160a01b031690879087908790600e90600401614488565b60006040518083038186803b1580156115a757600080fd5b505af41580156115bb573d6000803e3d6000fd5b505060016006555050505050565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516115fb929190614459565b60405180910390a2600260065414156116265760405162461bcd60e51b8152600401610754906148ce565b60026006556008546001600160a01b03166116535760405162461bcd60e51b815260040161075490614829565b6008546040805163fde924f760e01b815290516000926001600160a01b03169163fde924f7916004808301926020929190829003018186803b15801561169857600080fd5b505afa1580156116ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d09190614196565b6008546040516324dacaa960e11b81529192506001600160a01b0316906349b59552906117029060009060040161441e565b600060405180830381600087803b15801561171c57600080fd5b505af1158015611730573d6000803e3d6000fd5b5050600954640100000000900460ff1615915081905061175f57503360009081526017602052604090205460ff165b61177b5760405162461bcd60e51b8152600401610754906146df565b6008546040517fa1925f1d00000000000000000000000000000000000000000000000000000000815260609173__$af2aa94b09ef8aeccfc7c541ff1aafae3a$__9163a1925f1d916117e19130916001600160a01b0316908a908a908a90600401614582565b60006040518083038186803b1580156117f957600080fd5b505af415801561180d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611835919081019061413f565b90506060600860009054906101000a90046001600160a01b03166001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561188757600080fd5b505afa15801561189b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118c39190810190614057565b905060005b81518110156119615760008282815181106118df57fe5b6020026020010151905060008483815181106118f757fe5b60200260200101519050816001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa72836040516119449190614c74565b60405180910390a36119578233836134e8565b50506001016118c8565b5061196b8661136d565b611975338761099c565b50506008546040516324dacaa960e11b81526001600160a01b03909116906349b59552906119a790849060040161441e565b600060405180830381600087803b1580156119c157600080fd5b505af1158015610d38573d6000803e3d6000fd5b3330146119f45760405162461bcd60e51b81526004016107549061463c565b6109a68282613731565b600a54600b5482565b60405160009033906001600160e01b031983351690611a299084903690614459565b60405180910390a260026006541415611a545760405162461bcd60e51b8152600401610754906148ce565b60026006556008546001600160a01b0316611a815760405162461bcd60e51b815260040161075490614829565b600954640100000000900460ff161580611aaa57503360009081526017602052604090205460ff165b611ac65760405162461bcd60e51b8152600401610754906146df565b6008546040517fdf90de0b00000000000000000000000000000000000000000000000000000000815273__$af2aa94b09ef8aeccfc7c541ff1aafae3a$__9163df90de0b91611b2b9130916001600160a01b039091169089908990899060040161454e565b60206040518083038186803b158015611b4357600080fd5b505af4158015611b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7b9190614205565b9050836001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa7285604051611bc09190614c74565b60405180910390a3611bd18161136d565b611bdb338261099c565b6108db8433856134e8565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611c18929190614459565b60405180910390a260026006541415611c435760405162461bcd60e51b8152600401610754906148ce565b60026006556005546001600160a01b03163314611c725760405162461bcd60e51b81526004016107549061463c565b6008546001600160a01b0316611c9a5760405162461bcd60e51b815260040161075490614829565b6009546301000000900460ff16611cc35760405162461bcd60e51b815260040161075490614673565b600e54600160a01b900460ff1615611ced5760405162461bcd60e51b815260040161075490614a86565b600a5415611d0d5760405162461bcd60e51b815260040161075490614bd0565b6008546040517f0970e47f00000000000000000000000000000000000000000000000000000000815273__$af2aa94b09ef8aeccfc7c541ff1aafae3a$__91630970e47f91611d6e9130916001600160a01b03909116908690600401614501565b60006040518083038186803b158015611d8657600080fd5b505af4158015610e99573d6000803e3d6000fd5b3360009081526002602090815260408083206001600160a01b0386168452909152812054808310611dee573360009081526002602090815260408083206001600160a01b0388168452909152812055611e1d565b611df881846130ea565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b0389168085529252918290205491519092917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591611e749190614c74565b60405180910390a35060019392505050565b60405160009033906001600160e01b031983351690611ea89084903690614459565b60405180910390a260026006541415611ed35760405162461bcd60e51b8152600401610754906148ce565b60026006556008546001600160a01b0316611f005760405162461bcd60e51b815260040161075490614829565b600954640100000000900460ff161580611f2957503360009081526017602052604090205460ff165b611f455760405162461bcd60e51b8152600401610754906146df565b6008546040517f6a6dc6e700000000000000000000000000000000000000000000000000000000815273__$af2aa94b09ef8aeccfc7c541ff1aafae3a$__91636a6dc6e791611faa9130916001600160a01b039091169089908990899060040161454e565b60206040518083038186803b158015611fc257600080fd5b505af4158015611fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffa9190614205565b9050836001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa728360405161203f9190614c74565b60405180910390a36120508361136d565b61205a338461099c565b6108db8433836134e8565b6001600160a01b031660009081526001602052604090205490565b73__$d0903ca16ac8278340ca8b6de102e541fd$__90565b600954600090640100000000900460ff16156120d057506001600160a01b03811660009081526017602052604090205460ff16610f4e565b506001600160a01b0381161515610f4e565b6005546001600160a01b0316331461210c5760405162461bcd60e51b81526004016107549061463c565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161213e929190614459565b60405180910390a2600260065414156121695760405162461bcd60e51b8152600401610754906148ce565b60026006556121778161373c565b506001600655565b6005546001600160a01b031633146121a95760405162461bcd60e51b81526004016107549061463c565b6001600160a01b0381166121cf5760405162461bcd60e51b81526004016107549061474d565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60006002600654141561225d5760405162461bcd60e51b815260040161075490614905565b6008546001600160a01b03166122855760405162461bcd60e51b815260040161075490614829565b600854604051634a46c67360e11b81526001600160a01b039091169063948d8ce6906122b5908590600401614364565b60206040518083038186803b1580156122cd57600080fd5b505afa1580156122e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190614205565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109735780601f1061094857610100808354040283529160200191610973565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612398929190614459565b60405180910390a2600260065414156123c35760405162461bcd60e51b8152600401610754906148ce565b60026006556005546001600160a01b031633146123f25760405162461bcd60e51b81526004016107549061463c565b6008546001600160a01b031661241a5760405162461bcd60e51b815260040161075490614829565b60095462010000900460ff166124425760405162461bcd60e51b8152600401610754906147bb565b600a54156124625760405162461bcd60e51b815260040161075490614bd0565b6008546040517ff544aa1c00000000000000000000000000000000000000000000000000000000815273__$af2aa94b09ef8aeccfc7c541ff1aafae3a$__9163f544aa1c916124c59130916001600160a01b039091169087908790600401614524565b60006040518083038186803b1580156124dd57600080fd5b505af41580156124f1573d6000803e3d6000fd5b5050600160065550505050565b60095460ff8082169161010081048216916201000082048116916301000000810482169164010000000082048116916501000000000090041686565b73__$af2aa94b09ef8aeccfc7c541ff1aafae3a$__90565b6040518060400160405280600f81526020017f42756e6920536d61727420506f6f6c000000000000000000000000000000000081525081565b6101f481565b60006001600160a01b0383166125b95760405162461bcd60e51b81526004016107549061474d565b6125c433848461340a565b50600192915050565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516125ff929190614459565b60405180910390a26002600654141561262a5760405162461bcd60e51b8152600401610754906148ce565b60026006556008546001600160a01b03166126575760405162461bcd60e51b815260040161075490614829565b6008546040805163fde924f760e01b815290516000926001600160a01b03169163fde924f7916004808301926020929190829003018186803b15801561269c57600080fd5b505afa1580156126b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d49190614196565b6008546040516324dacaa960e11b81529192506001600160a01b0316906349b59552906127069060009060040161441e565b600060405180830381600087803b15801561272057600080fd5b505af1158015612734573d6000803e3d6000fd5b50506008546040517f5471c3e40000000000000000000000000000000000000000000000000000000081526000935083925060609173__$af2aa94b09ef8aeccfc7c541ff1aafae3a$__91635471c3e4916127a39130916001600160a01b0316908c908c908c90600401614582565b60006040518083038186803b1580156127bb57600080fd5b505af41580156127cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127f7919081019061428a565b92509250925061280733886119f4565b60075461281d906001600160a01b03168461099c565b61282682610a4e565b600854604080517fcc77828d00000000000000000000000000000000000000000000000000000000815290516060926001600160a01b03169163cc77828d916004808301926000929190829003018186803b15801561288457600080fd5b505afa158015612898573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128c09190810190614057565b905060005b815181101561295e5760008282815181106128dc57fe5b6020026020010151905060008483815181106128f457fe5b60200260200101519050816001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e9836040516129419190614c74565b60405180910390a3612954823383613123565b50506001016128c5565b50506008546040516324dacaa960e11b81526001600160a01b0390911693506349b5955292506119a79150849060040161441e565b6008546001600160a01b031681565b73__$8a74390f924d86b46d69884446e22ee462$__90565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516129ec929190614459565b60405180910390a260026006541415612a175760405162461bcd60e51b8152600401610754906148ce565b60026006556005546001600160a01b03163314612a465760405162461bcd60e51b81526004016107549061463c565b6008546001600160a01b0316612a6e5760405162461bcd60e51b815260040161075490614829565b6009546301000000900460ff16612a975760405162461bcd60e51b815260040161075490614673565b6008546016546040517fefa5877400000000000000000000000000000000000000000000000000000000815273__$af2aa94b09ef8aeccfc7c541ff1aafae3a$__9263efa5877492612afb9230926001600160a01b03169190600e906004016145c0565b60006040518083038186803b158015612b1357600080fd5b505af4158015612b27573d6000803e3d6000fd5b505060016006555050565b6005546001600160a01b03163314612b5c5760405162461bcd60e51b81526004016107549061463c565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612b8e929190614459565b60405180910390a260026006541415612bb95760405162461bcd60e51b8152600401610754906148ce565b600260065580821015612bde5760405162461bcd60e51b8152600401610754906146aa565b60158290556016819055612bf18361373c565b5050600160065550565b600e54600f546010546011546001600160a01b03841693600160a01b900460ff1692919085565b6005546001600160a01b03163314612c4c5760405162461bcd60e51b81526004016107549061463c565b60026006541415612c6f5760405162461bcd60e51b8152600401610754906148ce565b60026006556040513390600080356001600160e01b03191691612c9491903690614459565b60405180910390a2600954640100000000900460ff16612cc65760405162461bcd60e51b815260040161075490614784565b6001600160a01b038116612cec5760405162461bcd60e51b81526004016107549061493c565b6001600160a01b03166000908152601760205260409020805460ff19166001908117909155600655565b3360009081526002602090815260408083206001600160a01b0386168452909152812054612d449083613c4d565b3360008181526002602090815260408083206001600160a01b038916808552925291829020849055905190927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591610a039190614c74565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612df9929190614459565b60405180910390a260026006541415612e245760405162461bcd60e51b8152600401610754906148ce565b60026006556008546001600160a01b0316612e515760405162461bcd60e51b815260040161075490614829565b60095462010000900460ff16612e795760405162461bcd60e51b8152600401610754906147bb565b6008546040517f82495b4500000000000000000000000000000000000000000000000000000000815273__$af2aa94b09ef8aeccfc7c541ff1aafae3a$__916382495b4591612afb916001600160a01b031690600a906004016143e4565b6005546001600160a01b03163314612f015760405162461bcd60e51b81526004016107549061463c565b60026006541415612f245760405162461bcd60e51b8152600401610754906148ce565b60026006556040513390600080356001600160e01b03191691612f4991903690614459565b60405180910390a2600954640100000000900460ff16612f7b5760405162461bcd60e51b815260040161075490614784565b6001600160a01b03811660009081526017602052604090205460ff16612fb35760405162461bcd60e51b8152600401610754906147f2565b6001600160a01b038116612fd95760405162461bcd60e51b81526004016107549061493c565b6001600160a01b03166000908152601760205260409020805460ff191690556001600655565b60165481565b60155481565b62015f9081565b6000600260065414156130375760405162461bcd60e51b815260040161075490614905565b6008546001600160a01b031661305f5760405162461bcd60e51b815260040161075490614829565b600860009054906101000a90046001600160a01b03166001600160a01b031663fde924f76040518163ffffffff1660e01b815260040160206040518083038186803b1580156130ad57600080fd5b505afa1580156130c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e59190614196565b905090565b60008060006130f98585613c72565b91509150801561311b5760405162461bcd60e51b815260040161075490614b2b565b509392505050565b6008546001600160a01b031661314b5760405162461bcd60e51b815260040161075490614829565b60085460405163f8b2cb4f60e01b81526000916001600160a01b03169063f8b2cb4f9061317c908790600401614364565b60206040518083038186803b15801561319457600080fd5b505afa1580156131a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cc9190614205565b600854604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce690613202908890600401614364565b60206040518083038186803b15801561321a57600080fd5b505afa15801561322e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132529190614205565b6008549091506001600160a01b0316633fdddaa28661327185876130ea565b846040518463ffffffff1660e01b8152600401613290939291906143fd565b600060405180830381600087803b1580156132aa57600080fd5b505af11580156132be573d6000803e3d6000fd5b50506040517fa9059cbb000000000000000000000000000000000000000000000000000000008152600092506001600160a01b038816915063a9059cbb9061330c90889088906004016143e4565b602060405180830381600087803b15801561332657600080fd5b505af115801561333a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335e9190614196565b90508061337d5760405162461bcd60e51b815260040161075490614abd565b505050505050565b6109a630838361340a565b306000908152600160205260409020546133aa90826130ea565b30600090815260016020526040812091909155546133c890826130ea565b600090815560405130907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906133ff908590614c74565b60405180910390a350565b6001600160a01b03831660009081526001602052604090205461342d90826130ea565b6001600160a01b03808516600090815260016020526040808220939093559084168152205461345c9082613c4d565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906134ae908590614c74565b60405180910390a3505050565b6134c481613c97565b6018546000541115610a575760405162461bcd60e51b8152600401610754906149e1565b6008546001600160a01b03166135105760405162461bcd60e51b815260040161075490614829565b60085460405163f8b2cb4f60e01b81526000916001600160a01b03169063f8b2cb4f90613541908790600401614364565b60206040518083038186803b15801561355957600080fd5b505afa15801561356d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135919190614205565b600854604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce6906135c7908890600401614364565b60206040518083038186803b1580156135df57600080fd5b505afa1580156135f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136179190614205565b90506000856001600160a01b03166323b872dd8630876040518463ffffffff1660e01b815260040161364b93929190614378565b602060405180830381600087803b15801561366557600080fd5b505af1158015613679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061369d9190614196565b9050806136bc5760405162461bcd60e51b815260040161075490614abd565b6008546001600160a01b0316633fdddaa2876136d88688613c4d565b856040518463ffffffff1660e01b81526004016136f7939291906143fd565b600060405180830381600087803b15801561371157600080fd5b505af1158015613725573d6000803e3d6000fd5b50505050505050505050565b6109a682308361340a565b6008546001600160a01b0316156137655760405162461bcd60e51b815260040161075490614860565b68056bc75e2d6310000081101561378e5760405162461bcd60e51b815260040161075490614897565b6b033b2e3c9fd0803ce80000008111156137ba5760405162461bcd60e51b815260040161075490614716565b60095465010000000000900460ff16156137d45760188190555b6137dd8161136d565b6137e7338261099c565b600760009054906101000a90046001600160a01b03166001600160a01b031663d556c5dc6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561383757600080fd5b505af115801561384b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061386f91906141b2565b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790819055604080517fc6580d120000000000000000000000000000000000000000000000000000000081529051919092169163c6580d12916004808301926020929190829003018186803b1580156138ed57600080fd5b505afa158015613901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139259190614205565b156139425760405162461bcd60e51b8152600401610754906149aa565b60005b601354811015613b365760006013828154811061395e57fe5b6000918252602082200154601480546001600160a01b039092169350908490811061398557fe5b906000526020600020015490506000600a60020184815481106139a457fe5b60009182526020822001546040517f23b872dd0000000000000000000000000000000000000000000000000000000081529092506001600160a01b038516906323b872dd906139fb90339030908890600401614378565b602060405180830381600087803b158015613a1557600080fd5b505af1158015613a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4d9190614196565b905080613a6c5760405162461bcd60e51b815260040161075490614abd565b600854613a88906001600160a01b038681169116600019613d07565b905080613aa75760405162461bcd60e51b815260040161075490614abd565b6008546040517fe4e1e5380000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063e4e1e53890613af4908790879087906004016143fd565b600060405180830381600087803b158015613b0e57600080fd5b505af1158015613b22573d6000803e3d6000fd5b505060019096019550613945945050505050565b505b60135415613b7f576013805480613b4b57fe5b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff19169055019055613b38565b6008546012546040516334e1990760e01b81526001600160a01b03909216916334e1990791613bb091600401614c74565b600060405180830381600087803b158015613bca57600080fd5b505af1158015613bde573d6000803e3d6000fd5b50506008546040516324dacaa960e11b81526001600160a01b0390911692506349b595529150613c139060019060040161441e565b600060405180830381600087803b158015613c2d57600080fd5b505af1158015613c41573d6000803e3d6000fd5b50506000601255505050565b600082820183811015610b935760405162461bcd60e51b815260040161075490614b62565b600080838311613c885750508082036000613c90565b505081810360015b9250929050565b30600090815260016020526040902054613cb19082613c4d565b3060009081526001602052604081209190915554613ccf9082613c4d565b60009081556040513091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906133ff908590614c74565b600080846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401613d3892919061439c565b60206040518083038186803b158015613d5057600080fd5b505afa158015613d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d889190614205565b905082811415613d9c576001915050610b93565b8015613e2b5760405163095ea7b360e01b81526001600160a01b0386169063095ea7b390613dd19087906000906004016143e4565b602060405180830381600087803b158015613deb57600080fd5b505af1158015613dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e239190614196565b915050610b93565b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b390613e5990879087906004016143e4565b602060405180830381600087803b158015613e7357600080fd5b505af1158015613e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eab9190614196565b95945050505050565b60008083601f840112613ec5578081fd5b50813567ffffffffffffffff811115613edc578182fd5b6020830191508360208083028501011115613c9057600080fd5b600082601f830112613f06578081fd5b8151613f19613f1482614cc0565b614c99565b818152915060208083019084810181840286018201871015613f3a57600080fd5b60005b84811015613f5957815184529282019290820190600101613f3d565b505050505092915050565b600060208284031215613f75578081fd5b8135610b9381614ce0565b60008060408385031215613f92578081fd5b8235613f9d81614ce0565b91506020830135613fad81614ce0565b809150509250929050565b600080600060608486031215613fcc578081fd5b8335613fd781614ce0565b92506020840135613fe781614ce0565b929592945050506040919091013590565b6000806040838503121561400a578182fd5b823561401581614ce0565b946020939093013593505050565b600080600060608486031215614037578283fd5b833561404281614ce0565b95602085013595506040909401359392505050565b60006020808385031215614069578182fd5b825167ffffffffffffffff81111561407f578283fd5b8301601f8101851361408f578283fd5b805161409d613f1482614cc0565b81815283810190838501858402850186018910156140b9578687fd5b8694505b838510156140e45780516140d081614ce0565b8352600194909401939185019185016140bd565b50979650505050505050565b60008060008060608587031215614105578081fd5b843567ffffffffffffffff81111561411b578182fd5b61412787828801613eb4565b90989097506020870135966040013595509350505050565b600060208284031215614150578081fd5b815167ffffffffffffffff811115614166578182fd5b61417284828501613ef6565b949350505050565b60006020828403121561418b578081fd5b8135610b9381614cf5565b6000602082840312156141a7578081fd5b8151610b9381614cf5565b6000602082840312156141c3578081fd5b8151610b9381614ce0565b6000602082840312156141df578081fd5b813560068110610b93578182fd5b6000602082840312156141fe578081fd5b5035919050565b600060208284031215614216578081fd5b5051919050565b600080600060408486031215614231578081fd5b83359250602084013567ffffffffffffffff81111561424e578182fd5b61425a86828701613eb4565b9497909650939450505050565b60008060408385031215614279578182fd5b505080516020909101519092909150565b60008060006060848603121561429e578081fd5b8351925060208401519150604084015167ffffffffffffffff8111156142c2578182fd5b6142ce86828701613ef6565b9150509250925092565b6000806000606084860312156142ec578081fd5b505081359360208301359350604090920135919050565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614334578081fd5b6020830280836020870137939093016020019283525090919050565b15159052565b6006811061436057fe5b9052565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03959095168552921515602085015260408401919091526060830152608082015260a00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b9515158652931515602086015291151560408501521515606084015215156080830152151560a082015260c00190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b60006001600160a01b038916825287602083015260c060408301526144e260c083018789614303565b606083019590955250608081019290925260a090910152949350505050565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b60006001600160a01b038088168352808716602084015250846040830152608060608301526145b5608083018486614303565b979650505050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6000602080835283518082850152825b81811015614615578581018301518582016040015282016145f9565b818111156146265783604083870101525b50601f01601f1916929092016040019392505050565b60208082526012908201527f4552525f4e4f545f434f4e54524f4c4c45520000000000000000000000000000604082015260600190565b6020808252601c908201527f4552525f43414e4e4f545f4144445f52454d4f56455f544f4b454e5300000000604082015260600190565b6020808252818101527f4552525f494e434f4e53495354454e545f544f4b454e5f54494d455f4c4f434b604082015260600190565b60208082526014908201527f4552525f4e4f545f4f4e5f57484954454c495354000000000000000000000000604082015260600190565b60208082526013908201527f4552525f494e49545f535550504c595f4d415800000000000000000000000000604082015260600190565b60208082526010908201527f4552525f5a45524f5f4144445245535300000000000000000000000000000000604082015260600190565b60208082526018908201527f4552525f43414e4e4f545f57484954454c4953545f4c50530000000000000000604082015260600190565b6020808252601c908201527f4552525f4e4f545f434f4e464947555241424c455f5745494748545300000000604082015260600190565b60208082526016908201527f4552525f4c505f4e4f545f57484954454c495354454400000000000000000000604082015260600190565b6020808252600f908201527f4552525f4e4f545f435245415445440000000000000000000000000000000000604082015260600190565b6020808252600e908201527f4552525f49535f43524541544544000000000000000000000000000000000000604082015260600190565b60208082526013908201527f4552525f494e49545f535550504c595f4d494e00000000000000000000000000604082015260600190565b6020808252600b908201527f4552525f5245454e545259000000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f4552525f5245454e5452595f5649455700000000000000000000000000000000604082015260600190565b60208082526013908201527f4552525f494e56414c49445f4144445245535300000000000000000000000000604082015260600190565b60208082526015908201527f4552525f43414e4e4f545f4348414e47455f4341500000000000000000000000604082015260600190565b60208082526014908201527f4552525f4e4f4e5a45524f5f455849545f464545000000000000000000000000604082015260600190565b60208082526015908201527f4552525f4341505f4c494d49545f524541434845440000000000000000000000604082015260600190565b60208082526016908201527f4552525f5043544f4b454e5f4241445f43414c4c455200000000000000000000604082015260600190565b60208082526015908201527f4552525f50454e44494e475f544f4b454e5f4144440000000000000000000000604082015260600190565b6020808252601b908201527f4552525f52454d4f56455f574954485f4144445f50454e44494e470000000000604082015260600190565b6020808252600f908201527f4552525f45524332305f46414c53450000000000000000000000000000000000604082015260600190565b60208082526015908201527f4552525f4e4f545f5041555341424c455f535741500000000000000000000000604082015260600190565b60208082526011908201527f4552525f5355425f554e444552464c4f57000000000000000000000000000000604082015260600190565b60208082526010908201527f4552525f4144445f4f564552464c4f5700000000000000000000000000000000604082015260600190565b6020808252601d908201527f4552525f4e4f545f434f4e464947555241424c455f535741505f464545000000604082015260600190565b6020808252601c908201527f4552525f4e4f5f5550444154455f445552494e475f4752414455414c00000000604082015260600190565b600060e082019050835460ff80821615158452808260081c1615156020850152808260101c1615156040850152808260181c1615156060850152614c5360808501828460201c16614350565b614c6560a08501828460281c16614350565b5050610b9360c0830184614356565b90815260200190565b918252602082015260400190565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715614cb857600080fd5b604052919050565b600067ffffffffffffffff821115614cd6578081fd5b5060209081020190565b6001600160a01b0381168114610a5757600080fd5b8015158114610a5757600080fdfea2646970667358221220c86bdeaeba08dc9e248d506606eeeb904e1f98f0e54ef28ecc560ff2105287e764736f6c634300060c0033a2646970667358221220c095076d66e20fbb9b0a121d6817f3a2f78daa855c8a4fba12dfa5f61fd319d864736f6c634300060c0033",
  "libraries": {
    "BuniSafeMath": "0x940f9CC489A1A7dD47A135CdAcF9e8507A584c27",
    "RightsManager": "0x8534C255BF2C06176e89235fE65E9A3132753d5c",
    "SmartPoolManager": "0x4CD95BBf3FcD61278E2e1b96De952166229dfE5E"
  },
  "devdoc": {
    "author": "Buni Labs",
    "details": "Rights are held in a corresponding struct in ConfigurableRightsPool      Index values are as follows:      0: canPauseSwapping - can setPublicSwap back to false after turning it on                            by default, it is off on initialization and can only be turned on      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)      2: canChangeWeights - can bind new token weights (allowed by default in base pool)      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)      4: canWhitelistLPs - if set, only whitelisted addresses can join pools                           (enables private pools with more than one LP)      5: canChangeCap - can change the BSP cap (max # of pool tokens)",
    "kind": "dev",
    "methods": {
      "isCrp(address)": {
        "params": {
          "addr": "- address to check"
        },
        "returns": {
          "_0": "boolean indicating whether it is a CRP"
        }
      },
      "newCrp(address,(string,string,address[],uint256[],uint256[],uint256),(bool,bool,bool,bool,bool,bool))": {
        "details": "emits a LogNewCRP event",
        "params": {
          "factoryAddress": "- the BFactory instance used to create the underlying pool",
          "poolParams": "- struct containing the names, tokens, weights, balances, and swap fee",
          "rights": "- struct of permissions, configuring this CRP instance (see above for definitions)"
        }
      }
    },
    "title": "Configurable Rights Pool Factory - create parameterized smart pools",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isCrp(address)": {
        "notice": "Check to see if a given address is a CRP"
      },
      "newCrp(address,(string,string,address[],uint256[],uint256[],uint256),(bool,bool,bool,bool,bool,bool))": {
        "notice": "Create a new CRP"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3987,
        "contract": "contracts/crp/CRPFactory.sol:CRPFactory",
        "label": "_isCrp",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}
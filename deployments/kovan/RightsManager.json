{
  "address": "0x8534C255BF2C06176e89235fE65E9A3132753d5c",
  "abi": [
    {
      "inputs": [],
      "name": "DEFAULT_CAN_ADD_REMOVE_TOKENS",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_CAN_CHANGE_CAP",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_CAN_CHANGE_SWAP_FEE",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_CAN_CHANGE_WEIGHTS",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_CAN_PAUSE_SWAPPING",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_CAN_WHITELIST_LPS",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool[]",
          "name": "a",
          "type": "bool[]"
        }
      ],
      "name": "constructRights",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canPauseSwapping",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeSwapFee",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeWeights",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canAddRemoveTokens",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeCap",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canPauseSwapping",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeSwapFee",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeWeights",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canAddRemoveTokens",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeCap",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "rights",
          "type": "tuple"
        }
      ],
      "name": "convertRights",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canPauseSwapping",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeSwapFee",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeWeights",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canAddRemoveTokens",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeCap",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "self",
          "type": "tuple"
        },
        {
          "internalType": "enum RightsManager.Permissions",
          "name": "permission",
          "type": "RightsManager.Permissions"
        }
      ],
      "name": "hasPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x631b9681a9be14e758f5bb279cd7fdfcb1f84171f14cd2b111d1ae44e0feeb96",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xba535ade958703Ffb99B9325ca8db04A00937029",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "421763",
    "logsBloom": "0x
    "blockHash": "0x331a501ac5ff17c82f82b47475e12023e4c92f94658a4ce63a39669cf030429c",
    "transactionHash": "0x631b9681a9be14e758f5bb279cd7fdfcb1f84171f14cd2b111d1ae44e0feeb96",
    "logs": [],
    "blockNumber": 24164620,
    "cumulativeGasUsed": "535579",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "44256da70cc812bee6154882727baa12",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DEFAULT_CAN_ADD_REMOVE_TOKENS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_CHANGE_CAP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_CHANGE_SWAP_FEE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_CHANGE_WEIGHTS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_PAUSE_SWAPPING\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_CAN_WHITELIST_LPS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"a\",\"type\":\"bool[]\"}],\"name\":\"constructRights\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeCap\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeCap\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"rights\",\"type\":\"tuple\"}],\"name\":\"convertRights\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeCap\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"self\",\"type\":\"tuple\"},{\"internalType\":\"enum RightsManager.Permissions\",\"name\":\"permission\",\"type\":\"RightsManager.Permissions\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Buni Labs\",\"kind\":\"dev\",\"methods\":{\"constructRights(bool[])\":{\"details\":\"If you pass an empty array, it will construct it using the defaults\",\"params\":{\"a\":\"- array input\"},\"returns\":{\"_0\":\"Rights struct\"}},\"convertRights(RightsManager.Rights)\":{\"details\":\"avoids multiple calls to hasPermission\",\"params\":{\"rights\":\"- the rights struct to convert\"},\"returns\":{\"_0\":\"boolean array containing the rights settings\"}},\"hasPermission(RightsManager.Rights,RightsManager.Permissions)\":{\"params\":{\"permission\":\"- The permission to check\",\"self\":\"- Rights struct containing the permissions\"},\"returns\":{\"_0\":\"Boolean true if it has the permission\"}}},\"title\":\"Manage Configurable Rights for the smart pool      canPauseSwapping - can setPublicSwap back to false after turning it on                         by default, it is off on initialization and can only be turned on      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)      canChangeWeights - can bind new token weights (allowed by default in base pool)      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)      canWhitelistLPs - can limit liquidity providers to a given set of addresses      canChangeCap - can change the BSP cap (max # of pool tokens)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructRights(bool[])\":{\"notice\":\"create a struct from an array (or return defaults)\"},\"convertRights(RightsManager.Rights)\":{\"notice\":\"Convert rights struct to an array (e.g., for events, GUI)\"},\"hasPermission(RightsManager.Rights,RightsManager.Permissions)\":{\"notice\":\"Externally check permissions using the Enum\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/RightsManager.sol\":\"RightsManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/utils/RightsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Buni Labs\\n * @title Manage Configurable Rights for the smart pool\\n *      canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                         by default, it is off on initialization and can only be turned on\\n *      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\\n */\\nlibrary RightsManager {\\n\\n    // Type declarations\\n\\n    enum Permissions { PAUSE_SWAPPING,\\n                       CHANGE_SWAP_FEE,\\n                       CHANGE_WEIGHTS,\\n                       ADD_REMOVE_TOKENS,\\n                       WHITELIST_LPS,\\n                       CHANGE_CAP }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canChangeCap;\\n    }\\n\\n    // State variables (can only be constants in a library)\\n    bool public constant DEFAULT_CAN_PAUSE_SWAPPING = false;\\n    bool public constant DEFAULT_CAN_CHANGE_SWAP_FEE = true;\\n    bool public constant DEFAULT_CAN_CHANGE_WEIGHTS = true;\\n    bool public constant DEFAULT_CAN_ADD_REMOVE_TOKENS = false;\\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\\n    bool public constant DEFAULT_CAN_CHANGE_CAP = false;\\n\\n    // Functions\\n\\n    /**\\n     * @notice create a struct from an array (or return defaults)\\n     * @dev If you pass an empty array, it will construct it using the defaults\\n     * @param a - array input\\n     * @return Rights struct\\n     */ \\n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\\n        if (a.length == 0) {\\n            return Rights(DEFAULT_CAN_PAUSE_SWAPPING,\\n                          DEFAULT_CAN_CHANGE_SWAP_FEE,\\n                          DEFAULT_CAN_CHANGE_WEIGHTS,\\n                          DEFAULT_CAN_ADD_REMOVE_TOKENS,\\n                          DEFAULT_CAN_WHITELIST_LPS,\\n                          DEFAULT_CAN_CHANGE_CAP);\\n        }\\n        else {\\n            return Rights(a[0], a[1], a[2], a[3], a[4], a[5]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\\n     * @dev avoids multiple calls to hasPermission\\n     * @param rights - the rights struct to convert\\n     * @return boolean array containing the rights settings\\n     */\\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\\n        bool[] memory result = new bool[](6);\\n\\n        result[0] = rights.canPauseSwapping;\\n        result[1] = rights.canChangeSwapFee;\\n        result[2] = rights.canChangeWeights;\\n        result[3] = rights.canAddRemoveTokens;\\n        result[4] = rights.canWhitelistLPs;\\n        result[5] = rights.canChangeCap;\\n\\n        return result;\\n    }\\n\\n    // Though it is actually simple, the number of branches triggers code-complexity\\n    /* solhint-disable code-complexity */\\n\\n    /**\\n     * @notice Externally check permissions using the Enum\\n     * @param self - Rights struct containing the permissions\\n     * @param permission - The permission to check\\n     * @return Boolean true if it has the permission\\n     */\\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\\n        if (Permissions.PAUSE_SWAPPING == permission) {\\n            return self.canPauseSwapping;\\n        }\\n        else if (Permissions.CHANGE_SWAP_FEE == permission) {\\n            return self.canChangeSwapFee;\\n        }\\n        else if (Permissions.CHANGE_WEIGHTS == permission) {\\n            return self.canChangeWeights;\\n        }\\n        else if (Permissions.ADD_REMOVE_TOKENS == permission) {\\n            return self.canAddRemoveTokens;\\n        }\\n        else if (Permissions.WHITELIST_LPS == permission) {\\n            return self.canWhitelistLPs;\\n        }\\n        else if (Permissions.CHANGE_CAP == permission) {\\n            return self.canChangeCap;\\n        }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n}\\n\",\"keccak256\":\"0x8a9c7eb74951677e23d4c2509593b48ec78cd46dea0ffda12effefd4408acde4\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6106a6610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c80634583544a11610080578063c08473fc11610065578063c08473fc1461010b578063cb0d28f6146100d0578063dccf54e7146100b2576100ad565b80634583544a146100d8578063710a51c2146100eb576100ad565b806308395a34146100b257806321bb04ae146100d05780632cc0c346146100b25780633d027b9d146100b2575b600080fd5b6100ba61012b565b6040516100c79190610615565b60405180910390f35b6100ba610130565b6100ba6100e6366004610595565b610135565b6100fe6100f936600461057a565b610215565b6040516100c791906105cf565b61011e6101193660046104e4565b61034b565b6040516100c79190610620565b600081565b600181565b600081600581111561014357fe5b61015b576101546020840184610553565b905061020f565b81600581111561016757fe5b6001141561017f576101546040840160208501610553565b81600581111561018b57fe5b600214156101a3576101546060840160408501610553565b8160058111156101af57fe5b600314156101c7576101546080840160608501610553565b8160058111156101d357fe5b600414156101eb5761015460a0840160808501610553565b8160058111156101f757fe5b6005141561020f5761015460c0840160a08501610553565b92915050565b60408051600680825260e082019092526060918291906020820160c0803683370190505090506102486020840184610553565b8160008151811061025557fe5b9115156020928302919091018201526102749060408501908501610553565b8160018151811061028157fe5b911515602092830291909101909101526102a16060840160408501610553565b816002815181106102ae57fe5b911515602092830291909101909101526102ce6080840160608501610553565b816003815181106102db57fe5b911515602092830291909101909101526102fb60a0840160808501610553565b8160048151811061030857fe5b9115156020928302919091019091015261032860c0840160a08501610553565b8160058151811061033557fe5b9115156020928302919091019091015292915050565b610353610498565b8161039357506040805160c081018252600080825260016020830181905292820192909252606081018290526080810182905260a081019190915261020f565b6040518060c00160405280848460008181106103ab57fe5b90506020020160208101906103c09190610553565b15158152602001848460018181106103d457fe5b90506020020160208101906103e99190610553565b15158152602001848460028181106103fd57fe5b90506020020160208101906104129190610553565b151581526020018484600381811061042657fe5b905060200201602081019061043b9190610553565b151581526020018484600481811061044f57fe5b90506020020160208101906104649190610553565b151581526020018484600581811061047857fe5b905060200201602081019061048d9190610553565b15159052905061020f565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600060c082840312156104de578081fd5b50919050565b600080602083850312156104f6578182fd5b823567ffffffffffffffff8082111561050d578384fd5b818501915085601f830112610520578384fd5b81358181111561052e578485fd5b8660208083028501011115610541578485fd5b60209290920196919550909350505050565b600060208284031215610564578081fd5b81358015158114610573578182fd5b9392505050565b600060c0828403121561058b578081fd5b61057383836104cd565b60008060e083850312156105a7578182fd5b6105b184846104cd565b915060c0830135600681106105c4578182fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156106095783511515835292840192918401916001016105eb565b50909695505050505050565b901515815260200190565b600060c08201905082511515825260208301511515602083015260408301511515604083015260608301511515606083015260808301511515608083015260a0830151151560a08301529291505056fea2646970667358221220c5f042c8754177ba4c563ce00612b0fcf6fa879c2e7e498eeaeaa7655664898664736f6c634300060c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c80634583544a11610080578063c08473fc11610065578063c08473fc1461010b578063cb0d28f6146100d0578063dccf54e7146100b2576100ad565b80634583544a146100d8578063710a51c2146100eb576100ad565b806308395a34146100b257806321bb04ae146100d05780632cc0c346146100b25780633d027b9d146100b2575b600080fd5b6100ba61012b565b6040516100c79190610615565b60405180910390f35b6100ba610130565b6100ba6100e6366004610595565b610135565b6100fe6100f936600461057a565b610215565b6040516100c791906105cf565b61011e6101193660046104e4565b61034b565b6040516100c79190610620565b600081565b600181565b600081600581111561014357fe5b61015b576101546020840184610553565b905061020f565b81600581111561016757fe5b6001141561017f576101546040840160208501610553565b81600581111561018b57fe5b600214156101a3576101546060840160408501610553565b8160058111156101af57fe5b600314156101c7576101546080840160608501610553565b8160058111156101d357fe5b600414156101eb5761015460a0840160808501610553565b8160058111156101f757fe5b6005141561020f5761015460c0840160a08501610553565b92915050565b60408051600680825260e082019092526060918291906020820160c0803683370190505090506102486020840184610553565b8160008151811061025557fe5b9115156020928302919091018201526102749060408501908501610553565b8160018151811061028157fe5b911515602092830291909101909101526102a16060840160408501610553565b816002815181106102ae57fe5b911515602092830291909101909101526102ce6080840160608501610553565b816003815181106102db57fe5b911515602092830291909101909101526102fb60a0840160808501610553565b8160048151811061030857fe5b9115156020928302919091019091015261032860c0840160a08501610553565b8160058151811061033557fe5b9115156020928302919091019091015292915050565b610353610498565b8161039357506040805160c081018252600080825260016020830181905292820192909252606081018290526080810182905260a081019190915261020f565b6040518060c00160405280848460008181106103ab57fe5b90506020020160208101906103c09190610553565b15158152602001848460018181106103d457fe5b90506020020160208101906103e99190610553565b15158152602001848460028181106103fd57fe5b90506020020160208101906104129190610553565b151581526020018484600381811061042657fe5b905060200201602081019061043b9190610553565b151581526020018484600481811061044f57fe5b90506020020160208101906104649190610553565b151581526020018484600581811061047857fe5b905060200201602081019061048d9190610553565b15159052905061020f565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b600060c082840312156104de578081fd5b50919050565b600080602083850312156104f6578182fd5b823567ffffffffffffffff8082111561050d578384fd5b818501915085601f830112610520578384fd5b81358181111561052e578485fd5b8660208083028501011115610541578485fd5b60209290920196919550909350505050565b600060208284031215610564578081fd5b81358015158114610573578182fd5b9392505050565b600060c0828403121561058b578081fd5b61057383836104cd565b60008060e083850312156105a7578182fd5b6105b184846104cd565b915060c0830135600681106105c4578182fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156106095783511515835292840192918401916001016105eb565b50909695505050505050565b901515815260200190565b600060c08201905082511515825260208301511515602083015260408301511515604083015260608301511515606083015260808301511515608083015260a0830151151560a08301529291505056fea2646970667358221220c5f042c8754177ba4c563ce00612b0fcf6fa879c2e7e498eeaeaa7655664898664736f6c634300060c0033",
  "devdoc": {
    "author": "Buni Labs",
    "kind": "dev",
    "methods": {
      "constructRights(bool[])": {
        "details": "If you pass an empty array, it will construct it using the defaults",
        "params": {
          "a": "- array input"
        },
        "returns": {
          "_0": "Rights struct"
        }
      },
      "convertRights(RightsManager.Rights)": {
        "details": "avoids multiple calls to hasPermission",
        "params": {
          "rights": "- the rights struct to convert"
        },
        "returns": {
          "_0": "boolean array containing the rights settings"
        }
      },
      "hasPermission(RightsManager.Rights,RightsManager.Permissions)": {
        "params": {
          "permission": "- The permission to check",
          "self": "- Rights struct containing the permissions"
        },
        "returns": {
          "_0": "Boolean true if it has the permission"
        }
      }
    },
    "title": "Manage Configurable Rights for the smart pool      canPauseSwapping - can setPublicSwap back to false after turning it on                         by default, it is off on initialization and can only be turned on      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)      canChangeWeights - can bind new token weights (allowed by default in base pool)      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)      canWhitelistLPs - can limit liquidity providers to a given set of addresses      canChangeCap - can change the BSP cap (max # of pool tokens)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructRights(bool[])": {
        "notice": "create a struct from an array (or return defaults)"
      },
      "convertRights(RightsManager.Rights)": {
        "notice": "Convert rights struct to an array (e.g., for events, GUI)"
      },
      "hasPermission(RightsManager.Rights,RightsManager.Permissions)": {
        "notice": "Externally check permissions using the Enum"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}